diff -crB --new-file audio_common/audio_capture/CHANGELOG.rst audio_common_patched/audio_capture/CHANGELOG.rst
*** audio_common/audio_capture/CHANGELOG.rst	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,136 ****
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Changelog for package audio_capture
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- 0.3.3 (2018-05-22)
- ------------------
- 
- 0.3.2 (2018-05-02)
- ------------------
- * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
-   * [sound_play] add option to select audio device to play
-   * [sound_play] reformat README to markdown; add usage to set device via rosparam
-   * audio_capture: add option for selecting device to use
-   * audio_play: add option to select device for playing audio
-   * add device argument to launch files
-   Conflicts:
-   audio_capture/launch/capture.launch
-   audio_capture/launch/capture_to_file.launch
-   audio_capture/src/audio_capture.cpp
-   audio_play/launch/play.launch
-   sound_play/scripts/soundplay_node.py
- * Merge pull request `#102 <https://github.com/ros-drivers/audio_common/issues/102>`_ from EndPointCorp/fix_capture_leak
-   Fix audio_capture leak
- * Fix audio_capture sample/buffer leak
- * Merge pull request `#90 <https://github.com/ros-drivers/audio_common/issues/90>`_ from prarobo/master
-   Error checking code and improvements to launch files
- * Bug fix
- * fix(audio_capture): capturing wave using gst1.0
-   0.10-style raw audio caps were being created, according to GStreamer warning. Should be audio/x-raw,format=(string).. now.
- * Merge pull request `#1 <https://github.com/ros-drivers/audio_common/issues/1>`_ from prarobo/fixes
-   Error checking code and improvements to launch files
- * Removed default device
- * Added error checking code
- * Added parameters to launch files
- * Contributors: Austin, Matt Vollrath, Prasanna Kannappan, Rokus, Yuki Furuta, prarobo
- 
- 0.3.1 (2016-08-28)
- ------------------
- * Update to new gstreamer rosdeps
- * #70 can launch these in different namespaces with different microphones, and both are operating.
- * #70 can switch between different microphones, but the first microphone doesn't like the hw:1, it only works with device:="" - so must be doing something wrong still.
- * Add changelogs
- * [audio_capture] add error handler
- * [audio_capture] add option to publish captured audio data as wav format
-   Conflicts:
-   audio_capture/src/audio_capture.cpp
- * Fixed memory leak (see #18).
- * Removed trailing whitespace.
- * Fixed problem that CMake uses gstreamer-0.1 instead of gstreamer-1.0
- * Added gstreamer 1.0 dependecies
- * Ported to gstreamer 1.0
-   package.xml dependencies still missing
- * Update maintainer email
- * Contributors: Benny, Felix Duvallet, Furushchev, Lucas Walter, trainman419
- 
- 0.2.11 (2016-02-16)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.10 (2016-01-21)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.9 (2015-12-02)
- ------------------
- * Add changelogs
- * [audio_capture] add error handler
- * [audio_capture] add option to publish captured audio data as wav format
- * Fixed memory leak (see `#18 <https://github.com/ros-drivers/audio_common/issues/18>`_).
- * Removed trailing whitespace.
- * Contributors: Felix Duvallet, Furushchev, trainman419
- 
- 0.2.8 (2015-10-02)
- ------------------
- * Update maintainer email
- * Contributors: trainman419
- 
- 0.2.7 (2014-07-25)
- ------------------
- * audio_capture.cpp has to wait for generated AudioData headers
- * Contributors: v4hn
- 
- 0.2.6 (2014-02-26)
- ------------------
- * audio_capture and play _require\_ gstreamer, it's not optional
- * Contributors: v4hn
- 
- 0.2.5 (2014-01-23)
- ------------------
- * "0.2.5"
- * Contributors: trainman419
- 
- 0.2.4 (2013-09-10)
- ------------------
- * Update CMakeLists.txt
- * audio_capture: install launchfiles
- * Contributors: David Gossow
- 
- 0.2.3 (2013-07-15)
- ------------------
- * Fix install rule for audio_capture.
- * Contributors: Austin Hendrix
- 
- 0.2.2 (2013-04-10)
- ------------------
- 
- 0.2.1 (2013-04-08 13:59)
- ------------------------
- 
- 0.2.0 (2013-04-08 13:49)
- ------------------------
- * Finish catkinizing audio_common.
- * Catkinize audio_play.
- * Catkinize audio_capture.
- * Fix typo in package.xml
- * Versions and more URLs.
- * Convert manifests to package.xml
- * Convert audio_capture manifest to package.xml
- * Ditch old makefiles.
- * Updates manifest
- * Updated manifests for rodep2
- * oneiric build fixes, bump version to 0.1.6
- * Removed redundant thread::thread
- * Added a rosdep.yaml file
- * Fixed to use audio_common_msgs
- * Added ability to use different festival voices
- * Updated documentation
- * Added ability to capture to file
- * Fixed ignore files
- * Added hgignore files
- * Audio_capture and audio_play working
- * Making separate audio_capture and audio_play packages
- * Moved audio_transport to audio_capture
- * Contributors: Austin Hendrix, Brian Gerkey, Nate Koenig, nkoenig
--- 0 ----
diff -crB --new-file audio_common/audio_capture/CMakeLists.txt audio_common_patched/audio_capture/CMakeLists.txt
*** audio_common/audio_capture/CMakeLists.txt	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,24 ****
- cmake_minimum_required(VERSION 2.8.3)
- 
- project(audio_capture)
- 
- find_package(catkin REQUIRED COMPONENTS roscpp audio_common_msgs)
- 
- find_package(PkgConfig)
- pkg_check_modules(GST1.0 gstreamer-1.0 REQUIRED)
- 
- find_package(Boost REQUIRED COMPONENTS thread)
- 
- include_directories(${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${GST1.0_INCLUDE_DIRS})
- 
- catkin_package()
- 
- add_executable(audio_capture src/audio_capture.cpp)
- target_link_libraries(audio_capture ${catkin_LIBRARIES} ${GST1.0_LIBRARIES} ${Boost_LIBRARIES})
- add_dependencies(audio_capture ${catkin_EXPORTED_TARGETS})
- 
- install(TARGETS audio_capture
-    DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
- 
- install(DIRECTORY launch
-    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
--- 0 ----
diff -crB --new-file audio_common/audio_capture/.gitignore audio_common_patched/audio_capture/.gitignore
*** audio_common/audio_capture/.gitignore	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/.gitignore	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- build
--- 0 ----
diff -crB --new-file audio_common/audio_capture/launch/capture.launch audio_common_patched/audio_capture/launch/capture.launch
*** audio_common/audio_capture/launch/capture.launch	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/launch/capture.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,21 ****
- <launch>
-   <!-- arecord -l will show available input devices, use the car number as
-       the first number and the subdevice number as the second in a string
-       like hw:1,0 -->
-   <arg name="device" default=""/>
-   <arg name="channels" default="1"/>
-   <arg name="sample_rate" default="16000"/>
-   <arg name="format" default="mp3"/>
-   <arg name="ns" default="audio"/>
- 
-   <group ns="$(arg ns)">
-     <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
-       <param name="bitrate" value="128"/>
-       <param name="device" value="$(arg device)"/>
-       <param name="channels" value="$(arg channels)"/>
-       <param name="sample_rate" value="$(arg sample_rate)"/>
-       <param name="format" value="$(arg format)"/>
-     </node>
-   </group>
- 
- </launch>
--- 0 ----
diff -crB --new-file audio_common/audio_capture/launch/capture_to_file.launch audio_common_patched/audio_capture/launch/capture_to_file.launch
*** audio_common/audio_capture/launch/capture_to_file.launch	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/launch/capture_to_file.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,20 ****
- <launch>
-   <arg name="device" default=""/>
-   <arg name="channels" default="1"/>
-   <arg name="sample_rate" default="16000"/>
-   <arg name="dst" default="/tmp/output.mp3"/>
-   <arg name="format" default="mp3"/>
-   <arg name="ns" default="audio"/>
- 
-   <group ns="$(arg ns)">
-     <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
-       <param name="bitrate" value="128"/>
-       <param name="device" value="$(arg device)"/>
-       <param name="channels" value="$(arg channels)"/>
-       <param name="sample_rate" value="$(arg sample_rate)"/>
-       <param name="dst" value="$(arg dst)"/>
-       <param name="format" value="$(arg format)"/>
-     </node>
-   </group>
- 
- </launch>
--- 0 ----
diff -crB --new-file audio_common/audio_capture/launch/capture_wave.launch audio_common_patched/audio_capture/launch/capture_wave.launch
*** audio_common/audio_capture/launch/capture_wave.launch	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/launch/capture_wave.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,13 ****
- <launch>
-   <arg name="device" default="" />
- 
-   <!-- publish audio data as wav format -->
-   <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
-     <param name="device" value="" />
-     <param name="format" value="wave" />
-     <param name="channels" value="1" />
-     <param name="depth" value="16" />
-     <param name="sample_rate" value="16000" />
-     <param name="device" value="$(arg device)" />
-   </node>
- </launch>
--- 0 ----
diff -crB --new-file audio_common/audio_capture/mainpage.dox audio_common_patched/audio_capture/mainpage.dox
*** audio_common/audio_capture/mainpage.dox	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,21 ****
- /**
- \mainpage
- \htmlinclude manifest.html
- 
- \b audio_capture is a package that records audio from a microphone and makes it available to other ROS nodes.
- 
- \section codeapi Code API
- 
- <!--
- Provide links to specific auto-generated API documentation within your
- package that is of particular interest to a reader. Doxygen will
- document pretty much every part of your code, so do your best here to
- point the reader to the actual API.
- 
- If your codebase is fairly large or has different sets of APIs, you
- should use the doxygen 'group' tag to keep these APIs together. For
- example, the roscpp documentation has 'libros' group.
- -->
- 
- 
- */
--- 0 ----
diff -crB --new-file audio_common/audio_capture/package.xml audio_common_patched/audio_capture/package.xml
*** audio_common/audio_capture/package.xml	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/package.xml	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,29 ****
- <package>
-    <name>audio_capture</name>
-    <version>0.3.3</version>
-    <description>
-       Transports audio from a source to a destination. Audio sources can come
-       from a microphone or file. The destination can play the audio or save it
-       to an mp3 file.
-    </description>
-    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
-    <author>Nate Koenig</author>
-    <license>BSD</license>
-    <url type="website">http://ros.org/wiki/audio_capture</url>
-    <url type="repository">https://github.com/ros-drivers/audio_common</url>
-    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
- 
-    <buildtool_depend>catkin</buildtool_depend>
- 
-    <build_depend>roscpp</build_depend>
-    <build_depend>audio_common_msgs</build_depend>
-    <build_depend>libgstreamer1.0-dev</build_depend>
-    <build_depend>libgstreamer-plugins-base1.0-dev</build_depend>
- 
-    <run_depend>roscpp</run_depend>
-    <run_depend>audio_common_msgs</run_depend>
-    <run_depend>gstreamer1.0</run_depend>
-    <run_depend>gstreamer1.0-plugins-base</run_depend>
-    <run_depend>gstreamer1.0-plugins-good</run_depend>
-    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
- </package>
--- 0 ----
diff -crB --new-file audio_common/audio_capture/src/audio_capture.cpp audio_common_patched/audio_capture/src/audio_capture.cpp
*** audio_common/audio_capture/src/audio_capture.cpp	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_capture/src/audio_capture.cpp	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,227 ****
- #include <stdio.h>
- #include <gst/gst.h>
- #include <gst/app/gstappsink.h>
- #include <boost/thread.hpp>
- 
- #include <ros/ros.h>
- 
- #include "audio_common_msgs/AudioData.h"
- 
- namespace audio_transport
- {
-   class RosGstCapture
-   {
-     public:
-       RosGstCapture()
-       {
-         _bitrate = 192;
- 
-         std::string dst_type;
- 
-         // Need to encoding or publish raw wave data
-         ros::param::param<std::string>("~format", _format, "mp3");
- 
-         // The bitrate at which to encode the audio
-         ros::param::param<int>("~bitrate", _bitrate, 192);
- 
-         // only available for raw data
-         ros::param::param<int>("~channels", _channels, 1);
-         ros::param::param<int>("~depth", _depth, 16);
-         ros::param::param<int>("~sample_rate", _sample_rate, 16000);
- 
-         // The destination of the audio
-         ros::param::param<std::string>("~dst", dst_type, "appsink");
- 
-         // The source of the audio
-         //ros::param::param<std::string>("~src", source_type, "alsasrc");
-         std::string device;
-         ros::param::param<std::string>("~device", device, "");
- 
-         _pub = _nh.advertise<audio_common_msgs::AudioData>("audio", 10, true);
- 
-         _loop = g_main_loop_new(NULL, false);
-         _pipeline = gst_pipeline_new("ros_pipeline");
-         _bus = gst_pipeline_get_bus(GST_PIPELINE(_pipeline));
-         gst_bus_add_signal_watch(_bus);
-         g_signal_connect(_bus, "message::error",
-                          G_CALLBACK(onMessage), this);
-         g_object_unref(_bus);
- 
-         // We create the sink first, just for convenience
-         if (dst_type == "appsink")
-         {
-           _sink = gst_element_factory_make("appsink", "sink");
-           g_object_set(G_OBJECT(_sink), "emit-signals", true, NULL);
-           g_object_set(G_OBJECT(_sink), "max-buffers", 100, NULL);
-           g_signal_connect( G_OBJECT(_sink), "new-sample",
-                             G_CALLBACK(onNewBuffer), this);
-         }
-         else
-         {
-           printf("file sink\n");
-           _sink = gst_element_factory_make("filesink", "sink");
-           g_object_set( G_OBJECT(_sink), "location", dst_type.c_str(), NULL);
-         }
- 
-         _source = gst_element_factory_make("alsasrc", "source");
-         // if device isn't specified, it will use the default which is
-         // the alsa default source.
-         // A valid device will be of the foram hw:0,0 with other numbers
-         // than 0 and 0 as are available.
-         if (device != "")
-         {
-           // ghcar *gst_device = device.c_str();
-           g_object_set(G_OBJECT(_source), "device", device.c_str(), NULL);
-         }
- 
-         _filter = gst_element_factory_make("capsfilter", "filter");
-         {
-           GstCaps *caps;
-           caps = gst_caps_new_simple("audio/x-raw",
-                         //      "channels", G_TYPE_INT, _channels,
-                         //      "depth",    G_TYPE_INT, _depth,
-                               "rate",     G_TYPE_INT, _sample_rate,
-                         //       "signed",   G_TYPE_BOOLEAN, TRUE,
-                               NULL);
-           g_object_set( G_OBJECT(_filter), "caps", caps, NULL);
-           gst_caps_unref(caps);
-         }
- 
-         _convert = gst_element_factory_make("audioconvert", "convert");
-         if (!_convert) {
-       	  ROS_ERROR_STREAM("Failed to create audioconvert element");
-       	  exitOnMainThread(1);
-         }
- 
-         gboolean link_ok;
- 
-         if (_format == "mp3"){
-           _encode = gst_element_factory_make("lamemp3enc", "encoder");
-           if (!_encode) {
-         	  ROS_ERROR_STREAM("Failed to create encoder element");
-         	  exitOnMainThread(1);
-           }
-           g_object_set( G_OBJECT(_encode), "quality", 2.0, NULL);
-           g_object_set( G_OBJECT(_encode), "bitrate", _bitrate, NULL);
- 
-           gst_bin_add_many( GST_BIN(_pipeline), _source, _filter, _convert, _encode, _sink, NULL);
-           link_ok = gst_element_link_many(_source, _filter, _convert, _encode, _sink, NULL);
-         } else if (_format == "wave") {
-           GstCaps *caps;
-           caps = gst_caps_new_simple("audio/x-raw",
-                                      "channels", G_TYPE_INT, _channels,
-                                      "width",    G_TYPE_INT, _depth,
-                                      "depth",    G_TYPE_INT, _depth,
-                                      "rate",     G_TYPE_INT, _sample_rate,
-                                      "signed",   G_TYPE_BOOLEAN, TRUE,
-                                      NULL);
- 
-           g_object_set( G_OBJECT(_sink), "caps", caps, NULL);
-           gst_caps_unref(caps);
-           gst_bin_add_many( GST_BIN(_pipeline), _source, _sink, NULL);
-           link_ok = gst_element_link_many( _source, _sink, NULL);
-         } else {
-           ROS_ERROR_STREAM("format must be \"wave\" or \"mp3\"");
-           exitOnMainThread(1);
-         }
-         /*}
-         else
-         {
-           _sleep_time = 10000;
-           _source = gst_element_factory_make("filesrc", "source");
-           g_object_set(G_OBJECT(_source), "location", source_type.c_str(), NULL);
- 
-           gst_bin_add_many( GST_BIN(_pipeline), _source, _sink, NULL);
-           gst_element_link_many(_source, _sink, NULL);
-         }
-         */
- 
-         if (!link_ok) {
-           ROS_ERROR_STREAM("Unsupported media type.");
-           exitOnMainThread(1);
-         }
- 
-         gst_element_set_state(GST_ELEMENT(_pipeline), GST_STATE_PLAYING);
- 
-         _gst_thread = boost::thread( boost::bind(g_main_loop_run, _loop) );
-       }
- 
-       ~RosGstCapture()
-       {
-         g_main_loop_quit(_loop);
-         gst_element_set_state(_pipeline, GST_STATE_NULL);
-         gst_object_unref(_pipeline);
-         g_main_loop_unref(_loop);
-       }
- 
-       void exitOnMainThread(int code)
-       {
-         exit(code);
-       }
- 
-       void publish( const audio_common_msgs::AudioData &msg )
-       {
-         _pub.publish(msg);
-       }
- 
-       static GstFlowReturn onNewBuffer (GstAppSink *appsink, gpointer userData)
-       {
-         RosGstCapture *server = reinterpret_cast<RosGstCapture*>(userData);
-         GstMapInfo map;
- 
-         GstSample *sample;
-         g_signal_emit_by_name(appsink, "pull-sample", &sample);
- 
-         GstBuffer *buffer = gst_sample_get_buffer(sample);
- 
-         audio_common_msgs::AudioData msg;
-         gst_buffer_map(buffer, &map, GST_MAP_READ);
-         msg.data.resize( map.size );
- 
-         memcpy( &msg.data[0], map.data, map.size );
- 
-         gst_buffer_unmap(buffer, &map);
-         gst_sample_unref(sample);
- 
-         server->publish(msg);
- 
-         return GST_FLOW_OK;
-       }
- 
-       static gboolean onMessage (GstBus *bus, GstMessage *message, gpointer userData)
-       {
-         RosGstCapture *server = reinterpret_cast<RosGstCapture*>(userData);
-         GError *err;
-         gchar *debug;
- 
-         gst_message_parse_error(message, &err, &debug);
-         ROS_ERROR_STREAM("gstreamer: " << err->message);
-         g_error_free(err);
-         g_free(debug);
-         g_main_loop_quit(server->_loop);
-         server->exitOnMainThread(1);
-         return FALSE;
-       }
- 
-     private:
-       ros::NodeHandle _nh;
-       ros::Publisher _pub;
- 
-       boost::thread _gst_thread;
- 
-       GstElement *_pipeline, *_source, *_filter, *_sink, *_convert, *_encode;
-       GstBus *_bus;
-       int _bitrate, _channels, _depth, _sample_rate;
-       GMainLoop *_loop;
-       std::string _format;
-   };
- }
- 
- int main (int argc, char **argv)
- {
-   ros::init(argc, argv, "audio_capture");
-   gst_init(&argc, &argv);
- 
-   audio_transport::RosGstCapture server;
-   ros::spin();
- }
--- 0 ----
diff -crB --new-file audio_common/audio_common/audio_capture/CHANGELOG.rst audio_common_patched/audio_common/audio_capture/CHANGELOG.rst
*** audio_common/audio_common/audio_capture/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/CHANGELOG.rst	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,136 ----
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ Changelog for package audio_capture
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ 
+ 0.3.3 (2018-05-22)
+ ------------------
+ 
+ 0.3.2 (2018-05-02)
+ ------------------
+ * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
+   * [sound_play] add option to select audio device to play
+   * [sound_play] reformat README to markdown; add usage to set device via rosparam
+   * audio_capture: add option for selecting device to use
+   * audio_play: add option to select device for playing audio
+   * add device argument to launch files
+   Conflicts:
+   audio_capture/launch/capture.launch
+   audio_capture/launch/capture_to_file.launch
+   audio_capture/src/audio_capture.cpp
+   audio_play/launch/play.launch
+   sound_play/scripts/soundplay_node.py
+ * Merge pull request `#102 <https://github.com/ros-drivers/audio_common/issues/102>`_ from EndPointCorp/fix_capture_leak
+   Fix audio_capture leak
+ * Fix audio_capture sample/buffer leak
+ * Merge pull request `#90 <https://github.com/ros-drivers/audio_common/issues/90>`_ from prarobo/master
+   Error checking code and improvements to launch files
+ * Bug fix
+ * fix(audio_capture): capturing wave using gst1.0
+   0.10-style raw audio caps were being created, according to GStreamer warning. Should be audio/x-raw,format=(string).. now.
+ * Merge pull request `#1 <https://github.com/ros-drivers/audio_common/issues/1>`_ from prarobo/fixes
+   Error checking code and improvements to launch files
+ * Removed default device
+ * Added error checking code
+ * Added parameters to launch files
+ * Contributors: Austin, Matt Vollrath, Prasanna Kannappan, Rokus, Yuki Furuta, prarobo
+ 
+ 0.3.1 (2016-08-28)
+ ------------------
+ * Update to new gstreamer rosdeps
+ * #70 can launch these in different namespaces with different microphones, and both are operating.
+ * #70 can switch between different microphones, but the first microphone doesn't like the hw:1, it only works with device:="" - so must be doing something wrong still.
+ * Add changelogs
+ * [audio_capture] add error handler
+ * [audio_capture] add option to publish captured audio data as wav format
+   Conflicts:
+   audio_capture/src/audio_capture.cpp
+ * Fixed memory leak (see #18).
+ * Removed trailing whitespace.
+ * Fixed problem that CMake uses gstreamer-0.1 instead of gstreamer-1.0
+ * Added gstreamer 1.0 dependecies
+ * Ported to gstreamer 1.0
+   package.xml dependencies still missing
+ * Update maintainer email
+ * Contributors: Benny, Felix Duvallet, Furushchev, Lucas Walter, trainman419
+ 
+ 0.2.11 (2016-02-16)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.10 (2016-01-21)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.9 (2015-12-02)
+ ------------------
+ * Add changelogs
+ * [audio_capture] add error handler
+ * [audio_capture] add option to publish captured audio data as wav format
+ * Fixed memory leak (see `#18 <https://github.com/ros-drivers/audio_common/issues/18>`_).
+ * Removed trailing whitespace.
+ * Contributors: Felix Duvallet, Furushchev, trainman419
+ 
+ 0.2.8 (2015-10-02)
+ ------------------
+ * Update maintainer email
+ * Contributors: trainman419
+ 
+ 0.2.7 (2014-07-25)
+ ------------------
+ * audio_capture.cpp has to wait for generated AudioData headers
+ * Contributors: v4hn
+ 
+ 0.2.6 (2014-02-26)
+ ------------------
+ * audio_capture and play _require\_ gstreamer, it's not optional
+ * Contributors: v4hn
+ 
+ 0.2.5 (2014-01-23)
+ ------------------
+ * "0.2.5"
+ * Contributors: trainman419
+ 
+ 0.2.4 (2013-09-10)
+ ------------------
+ * Update CMakeLists.txt
+ * audio_capture: install launchfiles
+ * Contributors: David Gossow
+ 
+ 0.2.3 (2013-07-15)
+ ------------------
+ * Fix install rule for audio_capture.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.2 (2013-04-10)
+ ------------------
+ 
+ 0.2.1 (2013-04-08 13:59)
+ ------------------------
+ 
+ 0.2.0 (2013-04-08 13:49)
+ ------------------------
+ * Finish catkinizing audio_common.
+ * Catkinize audio_play.
+ * Catkinize audio_capture.
+ * Fix typo in package.xml
+ * Versions and more URLs.
+ * Convert manifests to package.xml
+ * Convert audio_capture manifest to package.xml
+ * Ditch old makefiles.
+ * Updates manifest
+ * Updated manifests for rodep2
+ * oneiric build fixes, bump version to 0.1.6
+ * Removed redundant thread::thread
+ * Added a rosdep.yaml file
+ * Fixed to use audio_common_msgs
+ * Added ability to use different festival voices
+ * Updated documentation
+ * Added ability to capture to file
+ * Fixed ignore files
+ * Added hgignore files
+ * Audio_capture and audio_play working
+ * Making separate audio_capture and audio_play packages
+ * Moved audio_transport to audio_capture
+ * Contributors: Austin Hendrix, Brian Gerkey, Nate Koenig, nkoenig
diff -crB --new-file audio_common/audio_common/audio_capture/CMakeLists.txt audio_common_patched/audio_common/audio_capture/CMakeLists.txt
*** audio_common/audio_common/audio_capture/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/CMakeLists.txt	2018-08-23 14:08:31.982973000 +0200
***************
*** 0 ****
--- 1,33 ----
+ cmake_minimum_required(VERSION 2.8.3)
+ 
+ project(audio_capture)
+ 
+ find_package(catkin REQUIRED COMPONENTS roscpp audio_common_msgs)
+ 
+ find_package(PkgConfig)
+ pkg_check_modules(GST1.0 gstreamer-1.0 REQUIRED)
+ 
+ find_package(Boost REQUIRED COMPONENTS thread)
+ 
+ include_directories(${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${GST1.0_INCLUDE_DIRS})
+ 
+ catkin_package()
+ 
+ add_executable(
+   audio_capture src/audio_capture.cpp
+ )
+ 
+ 
+ target_link_libraries(
+   audio_capture ${catkin_LIBRARIES} ${GST1.0_LIBRARIES} ${Boost_LIBRARIES}
+ )
+ 
+ add_dependencies(
+   audio_capture ${catkin_EXPORTED_TARGETS}
+ )
+ 
+ install(TARGETS audio_capture
+    DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
+ 
+ install(DIRECTORY launch
+    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
diff -crB --new-file audio_common/audio_common/audio_capture/.gitignore audio_common_patched/audio_common/audio_capture/.gitignore
*** audio_common/audio_common/audio_capture/.gitignore	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/.gitignore	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1 ----
+ build
diff -crB --new-file audio_common/audio_common/audio_capture/launch/capture.launch audio_common_patched/audio_common/audio_capture/launch/capture.launch
*** audio_common/audio_common/audio_capture/launch/capture.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/launch/capture.launch	2018-08-23 13:54:01.871659247 +0200
***************
*** 0 ****
--- 1,21 ----
+ <launch>
+   <!-- arecord -l will show available input devices, use the car number as
+       the first number and the subdevice number as the second in a string
+       like hw:1,0 -->
+   <arg name="device" default=""/>
+   <arg name="channels" default="1"/>
+   <arg name="sample_rate" default="16000"/>
+   <arg name="format" default="mp3"/>
+   <arg name="ns" default="audio"/>
+ 
+   <group ns="$(arg ns)">
+     <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
+       <param name="bitrate" value="128"/>
+       <param name="device" value="$(arg device)"/>
+       <param name="channels" value="$(arg channels)"/>
+       <param name="sample_rate" value="$(arg sample_rate)"/>
+       <param name="format" value="$(arg format)"/>
+     </node>
+   </group>
+ 
+ </launch>
diff -crB --new-file audio_common/audio_common/audio_capture/launch/capture_to_file.launch audio_common_patched/audio_common/audio_capture/launch/capture_to_file.launch
*** audio_common/audio_common/audio_capture/launch/capture_to_file.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/launch/capture_to_file.launch	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,20 ----
+ <launch>
+   <arg name="device" default=""/>
+   <arg name="channels" default="1"/>
+   <arg name="sample_rate" default="16000"/>
+   <arg name="dst" default="/tmp/output.mp3"/>
+   <arg name="format" default="mp3"/>
+   <arg name="ns" default="audio"/>
+ 
+   <group ns="$(arg ns)">
+     <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
+       <param name="bitrate" value="128"/>
+       <param name="device" value="$(arg device)"/>
+       <param name="channels" value="$(arg channels)"/>
+       <param name="sample_rate" value="$(arg sample_rate)"/>
+       <param name="dst" value="$(arg dst)"/>
+       <param name="format" value="$(arg format)"/>
+     </node>
+   </group>
+ 
+ </launch>
diff -crB --new-file audio_common/audio_common/audio_capture/launch/capture_wave.launch audio_common_patched/audio_common/audio_capture/launch/capture_wave.launch
*** audio_common/audio_common/audio_capture/launch/capture_wave.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/launch/capture_wave.launch	2018-08-23 13:54:09.527511343 +0200
***************
*** 0 ****
--- 1,13 ----
+ <launch>
+   <arg name="device" default="" />
+ 
+   <!-- publish audio data as wav format -->
+   <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
+     <param name="device" value="" />
+     <param name="format" value="wave" />
+     <param name="channels" value="1" />
+     <param name="depth" value="16" />
+     <param name="sample_rate" value="16000" />
+     <param name="device" value="$(arg device)" />
+   </node>
+ </launch>
diff -crB --new-file audio_common/audio_common/audio_capture/mainpage.dox audio_common_patched/audio_common/audio_capture/mainpage.dox
*** audio_common/audio_common/audio_capture/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/mainpage.dox	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,21 ----
+ /**
+ \mainpage
+ \htmlinclude manifest.html
+ 
+ \b audio_capture is a package that records audio from a microphone and makes it available to other ROS nodes.
+ 
+ \section codeapi Code API
+ 
+ <!--
+ Provide links to specific auto-generated API documentation within your
+ package that is of particular interest to a reader. Doxygen will
+ document pretty much every part of your code, so do your best here to
+ point the reader to the actual API.
+ 
+ If your codebase is fairly large or has different sets of APIs, you
+ should use the doxygen 'group' tag to keep these APIs together. For
+ example, the roscpp documentation has 'libros' group.
+ -->
+ 
+ 
+ */
diff -crB --new-file audio_common/audio_common/audio_capture/package.xml audio_common_patched/audio_common/audio_capture/package.xml
*** audio_common/audio_common/audio_capture/package.xml	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/package.xml	2018-08-23 11:48:51.823126202 +0200
***************
*** 0 ****
--- 1,31 ----
+ <package>
+    <name>audio_capture</name>
+    <version>0.3.3</version>
+    <description>
+       Transports audio from a source to a destination. Audio sources can come
+       from a microphone or file. The destination can play the audio or save it
+       to an mp3 file.
+    </description>
+    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
+    <author>Nate Koenig</author>
+    <license>BSD</license>
+    <url type="website">http://ros.org/wiki/audio_capture</url>
+    <url type="repository">https://github.com/ros-drivers/audio_common</url>
+    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
+ 
+    <buildtool_depend>catkin</buildtool_depend>
+ 
+    <build_depend>roscpp</build_depend>
+    <build_depend>audio_common_msgs</build_depend>
+    <build_depend>libgstreamer1.0-dev</build_depend>
+    <build_depend>libgstreamer-plugins-base1.0-dev</build_depend>
+    <build_depend>message_generation</build_depend>
+ 
+    <run_depend>roscpp</run_depend>
+    <run_depend>audio_common_msgs</run_depend>
+    <run_depend>message_runtime</run_depend>
+    <run_depend>gstreamer1.0</run_depend>
+    <run_depend>gstreamer1.0-plugins-base</run_depend>
+    <run_depend>gstreamer1.0-plugins-good</run_depend>
+    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
+ </package>
diff -crB --new-file audio_common/audio_common/audio_capture/src/audio_capture.cpp audio_common_patched/audio_common/audio_capture/src/audio_capture.cpp
*** audio_common/audio_common/audio_capture/src/audio_capture.cpp	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_capture/src/audio_capture.cpp	2018-08-23 14:03:54.560401503 +0200
***************
*** 0 ****
--- 1,230 ----
+ #include <stdio.h>
+ #include <gst/gst.h>
+ #include <gst/app/gstappsink.h>
+ #include <boost/thread.hpp>
+ 
+ #include <ros/ros.h>
+ 
+ #include "audio_common_msgs/AudioDataStampedRaw.h"
+ 
+ namespace audio_transport
+ {
+   class RosGstCapture
+   {
+     public:
+       RosGstCapture()
+       {
+         _bitrate = 192;
+ 
+         std::string dst_type;
+ 
+         // Need to encoding or publish raw wave data
+         ros::param::param<std::string>("~format", _format, "mp3");
+ 
+         // The bitrate at which to encode the audio
+         ros::param::param<int>("~bitrate", _bitrate, 192);
+ 
+         // only available for raw data
+         ros::param::param<int>("~channels", _channels, 1);
+         ros::param::param<int>("~depth", _depth, 16);
+         ros::param::param<int>("~sample_rate", _sample_rate, 16000);
+ 
+         // The destination of the audio
+         ros::param::param<std::string>("~dst", dst_type, "appsink");
+ 
+         // The source of the audio
+         //ros::param::param<std::string>("~src", source_type, "alsasrc");
+         std::string device;
+         ros::param::param<std::string>("~device", device, "");
+ 
+         _pub = _nh.advertise<audio_common_msgs::AudioDataStampedRaw>("audio", 10, true);
+ 
+         _loop = g_main_loop_new(NULL, false);
+         _pipeline = gst_pipeline_new("ros_pipeline");
+         _bus = gst_pipeline_get_bus(GST_PIPELINE(_pipeline));
+         gst_bus_add_signal_watch(_bus);
+         g_signal_connect(_bus, "message::error",
+                          G_CALLBACK(onMessage), this);
+         g_object_unref(_bus);
+ 
+         // We create the sink first, just for convenience
+         if (dst_type == "appsink")
+         {
+           _sink = gst_element_factory_make("appsink", "sink");
+           g_object_set(G_OBJECT(_sink), "emit-signals", true, NULL);
+           g_object_set(G_OBJECT(_sink), "max-buffers", 100, NULL);
+           g_signal_connect( G_OBJECT(_sink), "new-sample",
+                             G_CALLBACK(onNewBuffer), this);
+         }
+         else
+         {
+           printf("file sink\n");
+           _sink = gst_element_factory_make("filesink", "sink");
+           g_object_set( G_OBJECT(_sink), "location", dst_type.c_str(), NULL);
+         }
+ 
+         _source = gst_element_factory_make("alsasrc", "source");
+         // if device isn't specified, it will use the default which is
+         // the alsa default source.
+         // A valid device will be of the foram hw:0,0 with other numbers
+         // than 0 and 0 as are available.
+         if (device != "")
+         {
+           // ghcar *gst_device = device.c_str();
+           g_object_set(G_OBJECT(_source), "device", device.c_str(), NULL);
+         }
+ 
+         _filter = gst_element_factory_make("capsfilter", "filter");
+         {
+           GstCaps *caps;
+           caps = gst_caps_new_simple("audio/x-raw",
+                         //      "channels", G_TYPE_INT, _channels,
+                         //      "depth",    G_TYPE_INT, _depth,
+                               "rate",     G_TYPE_INT, _sample_rate,
+                         //       "signed",   G_TYPE_BOOLEAN, TRUE,
+                               NULL);
+           g_object_set( G_OBJECT(_filter), "caps", caps, NULL);
+           gst_caps_unref(caps);
+         }
+ 
+         _convert = gst_element_factory_make("audioconvert", "convert");
+         if (!_convert) {
+       	  ROS_ERROR_STREAM("Failed to create audioconvert element");
+       	  exitOnMainThread(1);
+         }
+ 
+         gboolean link_ok;
+ 
+         if (_format == "mp3"){
+           _encode = gst_element_factory_make("lamemp3enc", "encoder");
+           if (!_encode) {
+         	  ROS_ERROR_STREAM("Failed to create encoder element");
+         	  exitOnMainThread(1);
+           }
+           g_object_set( G_OBJECT(_encode), "quality", 2.0, NULL);
+           g_object_set( G_OBJECT(_encode), "bitrate", _bitrate, NULL);
+ 
+           gst_bin_add_many( GST_BIN(_pipeline), _source, _filter, _convert, _encode, _sink, NULL);
+           link_ok = gst_element_link_many(_source, _filter, _convert, _encode, _sink, NULL);
+         } else if (_format == "wave") {
+           GstCaps *caps;
+           caps = gst_caps_new_simple("audio/x-raw",
+                                      "channels", G_TYPE_INT, _channels,
+                                      "width",    G_TYPE_INT, _depth,
+                                      "depth",    G_TYPE_INT, _depth,
+                                      "rate",     G_TYPE_INT, _sample_rate,
+                                      "signed",   G_TYPE_BOOLEAN, TRUE,
+                                      NULL);
+ 
+           g_object_set( G_OBJECT(_sink), "caps", caps, NULL);
+           gst_caps_unref(caps);
+           gst_bin_add_many( GST_BIN(_pipeline), _source, _sink, NULL);
+           link_ok = gst_element_link_many( _source, _sink, NULL);
+         } else {
+           ROS_ERROR_STREAM("format must be \"wave\" or \"mp3\"");
+           exitOnMainThread(1);
+         }
+         /*}
+         else
+         {
+           _sleep_time = 10000;
+           _source = gst_element_factory_make("filesrc", "source");
+           g_object_set(G_OBJECT(_source), "location", source_type.c_str(), NULL);
+ 
+           gst_bin_add_many( GST_BIN(_pipeline), _source, _sink, NULL);
+           gst_element_link_many(_source, _sink, NULL);
+         }
+         */
+ 
+         if (!link_ok) {
+           ROS_ERROR_STREAM("Unsupported media type.");
+           exitOnMainThread(1);
+         }
+ 
+         gst_element_set_state(GST_ELEMENT(_pipeline), GST_STATE_PLAYING);
+ 
+         _gst_thread = boost::thread( boost::bind(g_main_loop_run, _loop) );
+       }
+ 
+       ~RosGstCapture()
+       {
+         g_main_loop_quit(_loop);
+         gst_element_set_state(_pipeline, GST_STATE_NULL);
+         gst_object_unref(_pipeline);
+         g_main_loop_unref(_loop);
+       }
+ 
+       void exitOnMainThread(int code)
+       {
+         exit(code);
+       }
+ 
+       void publish( const audio_common_msgs::AudioDataStampedRaw &msg )
+       {
+         _pub.publish(msg);
+       }
+ 
+       static GstFlowReturn onNewBuffer (GstAppSink *appsink, gpointer userData)
+       {
+         RosGstCapture *server = reinterpret_cast<RosGstCapture*>(userData);
+         GstMapInfo map;
+ 
+         GstSample *sample;
+         g_signal_emit_by_name(appsink, "pull-sample", &sample);
+ 
+         GstBuffer *buffer = gst_sample_get_buffer(sample);
+ 
+         audio_common_msgs::AudioDataStampedRaw msg;
+         // add timestamp to header
+         msg.header.stamp = ros::Time::now();
+ 
+         gst_buffer_map(buffer, &map, GST_MAP_READ);
+         msg.data.resize( map.size );
+ 
+         memcpy( &msg.data[0], map.data, map.size );
+ 
+         gst_buffer_unmap(buffer, &map);
+         gst_sample_unref(sample);
+ 
+         server->publish(msg);
+ 
+         return GST_FLOW_OK;
+       }
+ 
+       static gboolean onMessage (GstBus *bus, GstMessage *message, gpointer userData)
+       {
+         RosGstCapture *server = reinterpret_cast<RosGstCapture*>(userData);
+         GError *err;
+         gchar *debug;
+ 
+         gst_message_parse_error(message, &err, &debug);
+         ROS_ERROR_STREAM("gstreamer: " << err->message);
+         g_error_free(err);
+         g_free(debug);
+         g_main_loop_quit(server->_loop);
+         server->exitOnMainThread(1);
+         return FALSE;
+       }
+ 
+     private:
+       ros::NodeHandle _nh;
+       ros::Publisher _pub;
+ 
+       boost::thread _gst_thread;
+ 
+       GstElement *_pipeline, *_source, *_filter, *_sink, *_convert, *_encode;
+       GstBus *_bus;
+       int _bitrate, _channels, _depth, _sample_rate;
+       GMainLoop *_loop;
+       std::string _format;
+   };
+ }
+ 
+ int main (int argc, char **argv)
+ {
+   ros::init(argc, argv, "audio_capture");
+   gst_init(&argc, &argv);
+ 
+   audio_transport::RosGstCapture server;
+   ros::spin();
+ }
diff -crB --new-file audio_common/audio_common/audio_common/CHANGELOG.rst audio_common_patched/audio_common/audio_common/CHANGELOG.rst
*** audio_common/audio_common/audio_common/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common/CHANGELOG.rst	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,67 ----
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ Changelog for package audio_common
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ 
+ 0.3.3 (2018-05-22)
+ ------------------
+ 
+ 0.3.2 (2018-05-02)
+ ------------------
+ 
+ 0.3.1 (2016-08-28)
+ ------------------
+ * Add changelogs
+ * Update maintainer email
+ * Contributors: trainman419
+ 
+ 0.2.11 (2016-02-16)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.10 (2016-01-21)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.9 (2015-12-02)
+ ------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.8 (2015-10-02)
+ ------------------
+ * Update maintainer email
+ * Contributors: trainman419
+ 
+ 0.2.7 (2014-07-25)
+ ------------------
+ 
+ 0.2.6 (2014-02-26)
+ ------------------
+ 
+ 0.2.5 (2014-01-23)
+ ------------------
+ * "0.2.5"
+ * Contributors: trainman419
+ 
+ 0.2.4 (2013-09-10)
+ ------------------
+ 
+ 0.2.3 (2013-07-15)
+ ------------------
+ 
+ 0.2.2 (2013-04-10)
+ ------------------
+ 
+ 0.2.1 (2013-04-08 13:59)
+ ------------------------
+ * Fix metapackage for REP 127.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.0 (2013-04-08 13:49)
+ ------------------------
+ * Versions and more URLs.
+ * Convert stack.xml to metapackage package.xml
+ * Start catkinizing.
+ * Contributors: Austin Hendrix
diff -crB --new-file audio_common/audio_common/audio_common/CMakeLists.txt audio_common_patched/audio_common/audio_common/CMakeLists.txt
*** audio_common/audio_common/audio_common/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common/CMakeLists.txt	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,4 ----
+ cmake_minimum_required(VERSION 2.8.3)
+ project(audio_common)
+ find_package(catkin REQUIRED)
+ catkin_metapackage()
diff -crB --new-file audio_common/audio_common/audio_common/package.xml audio_common_patched/audio_common/audio_common/package.xml
*** audio_common/audio_common/audio_common/package.xml	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common/package.xml	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,24 ----
+ <package>
+    <name>audio_common</name>
+    <version>0.3.3</version>
+    <description>
+       Common code for working with audio in ROS
+    </description>
+    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
+    <author>Blaise Gassend</author>
+    <license>BSD</license>  
+    <url type="website">http://ros.org/wiki/audio_common</url>
+    <url type="repository">https://github.com/ros-drivers/audio_common</url>
+    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
+ 
+    <buildtool_depend>catkin</buildtool_depend>
+ 
+    <run_depend>audio_capture</run_depend>
+    <run_depend>audio_common_msgs</run_depend>
+    <run_depend>audio_play</run_depend>
+    <run_depend>sound_play</run_depend>
+ 
+    <export>
+       <metapackage/>
+    </export>
+ </package>
diff -crB --new-file audio_common/audio_common/audio_common_msgs/CHANGELOG.rst audio_common_patched/audio_common/audio_common_msgs/CHANGELOG.rst
*** audio_common/audio_common/audio_common_msgs/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/CHANGELOG.rst	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,68 ----
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ Changelog for package audio_common_msgs
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ 
+ 0.3.3 (2018-05-22)
+ ------------------
+ 
+ 0.3.2 (2018-05-02)
+ ------------------
+ 
+ 0.3.1 (2016-08-28)
+ ------------------
+ * Add changelogs
+ * Update maintainer email
+ * Contributors: trainman419
+ 
+ 0.2.11 (2016-02-16)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.10 (2016-01-21)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.9 (2015-12-02)
+ ------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.8 (2015-10-02)
+ ------------------
+ * Update maintainer email
+ * Contributors: trainman419
+ 
+ 0.2.7 (2014-07-25)
+ ------------------
+ 
+ 0.2.6 (2014-02-26)
+ ------------------
+ 
+ 0.2.5 (2014-01-23)
+ ------------------
+ * "0.2.5"
+ * Contributors: trainman419
+ 
+ 0.2.4 (2013-09-10)
+ ------------------
+ 
+ 0.2.3 (2013-07-15)
+ ------------------
+ 
+ 0.2.2 (2013-04-10)
+ ------------------
+ 
+ 0.2.1 (2013-04-08 13:59)
+ ------------------------
+ 
+ 0.2.0 (2013-04-08 13:49)
+ ------------------------
+ * Catkinize audio_common_msgs.
+ * Versions and more URLs.
+ * Convert manifests to package.xml
+ * Ditch old makefiles.
+ * Fixed audio_msgs names to audio_common_msgs
+ * Renamed audio_msgs to audio_common_msgs
+ * Contributors: Austin Hendrix, Nate Koenig
diff -crB --new-file audio_common/audio_common/audio_common_msgs/CMakeLists.txt audio_common_patched/audio_common/audio_common_msgs/CMakeLists.txt
*** audio_common/audio_common/audio_common_msgs/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/CMakeLists.txt	2018-08-23 12:32:56.424997748 +0200
***************
*** 0 ****
--- 1,13 ----
+ cmake_minimum_required(VERSION 2.8.3)
+ 
+ project(audio_common_msgs)
+ 
+ find_package(catkin REQUIRED COMPONENTS std_msgs message_generation)
+ add_message_files(DIRECTORY msg FILES AudioData.msg AudioDataStampedRaw.msg)
+ generate_messages(DEPENDENCIES std_msgs)
+ 
+ catkin_package(CATKIN_DEPENDS message_runtime)
+ 
+ include_directories(
+   ${catkin_INCLUDE_DIRS}
+ )
diff -crB --new-file audio_common/audio_common/audio_common_msgs/.gitignore audio_common_patched/audio_common/audio_common_msgs/.gitignore
*** audio_common/audio_common/audio_common_msgs/.gitignore	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/.gitignore	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1 ----
+ build
diff -crB --new-file audio_common/audio_common/audio_common_msgs/mainpage.dox audio_common_patched/audio_common/audio_common_msgs/mainpage.dox
*** audio_common/audio_common/audio_common_msgs/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/mainpage.dox	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,11 ----
+ /**
+ \mainpage
+ \htmlinclude manifest.html
+ 
+ \b audio_common_msgs contain messages for transimitting audio via ROS.
+ 
+ 
+ \section codeapi Code API
+ 
+ 
+ */
diff -crB --new-file audio_common/audio_common/audio_common_msgs/msg/AudioData.msg audio_common_patched/audio_common/audio_common_msgs/msg/AudioData.msg
*** audio_common/audio_common/audio_common_msgs/msg/AudioData.msg	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/msg/AudioData.msg	2018-08-23 12:11:47.924784000 +0200
***************
*** 0 ****
--- 1 ----
+ uint8[] data
diff -crB --new-file audio_common/audio_common/audio_common_msgs/msg/AudioDataStampedRaw.msg audio_common_patched/audio_common/audio_common_msgs/msg/AudioDataStampedRaw.msg
*** audio_common/audio_common/audio_common_msgs/msg/AudioDataStampedRaw.msg	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/msg/AudioDataStampedRaw.msg	2018-08-23 10:52:59.683665000 +0200
***************
*** 0 ****
--- 1,2 ----
+ std_msgs/Header header
+ uint8[] data
diff -crB --new-file audio_common/audio_common/audio_common_msgs/package.xml audio_common_patched/audio_common/audio_common_msgs/package.xml
*** audio_common/audio_common/audio_common_msgs/package.xml	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_common_msgs/package.xml	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,19 ----
+ <package>
+    <name>audio_common_msgs</name>
+    <version>0.3.3</version>
+    <description>
+       Messages for transmitting audio via ROS
+    </description>
+    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
+    <author>Nate Koenig</author>
+    <license>BSD</license>
+    <url type="website">http://ros.org/wiki/audio_common_msgs</url>
+    <url type="repository">https://github.com/ros-drivers/audio_common</url>
+    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
+ 
+    <buildtool_depend>catkin</buildtool_depend>
+ 
+    <build_depend>message_generation</build_depend>
+ 
+    <run_depend>message_runtime</run_depend>
+ </package>
diff -crB --new-file audio_common/audio_common/audio_play/CHANGELOG.rst audio_common_patched/audio_common/audio_play/CHANGELOG.rst
*** audio_common/audio_common/audio_play/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/CHANGELOG.rst	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,121 ----
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ Changelog for package audio_play
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ 
+ 0.3.3 (2018-05-22)
+ ------------------
+ 
+ 0.3.2 (2018-05-02)
+ ------------------
+ * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
+   * [sound_play] add option to select audio device to play
+   * [sound_play] reformat README to markdown; add usage to set device via rosparam
+   * audio_capture: add option for selecting device to use
+   * audio_play: add option to select device for playing audio
+   * add device argument to launch files
+   Conflicts:
+   audio_capture/launch/capture.launch
+   audio_capture/launch/capture_to_file.launch
+   audio_capture/src/audio_capture.cpp
+   audio_play/launch/play.launch
+   sound_play/scripts/soundplay_node.py
+ * Merge pull request `#101 <https://github.com/ros-drivers/audio_common/issues/101>`_ from EndPointCorp/audio_play_dont_pause_pipeline
+   audio_play: Fix mp3 clip overlap by never pausing the pipeline
+ * audio_play: Don't pause the pipeline
+   This prevents glitches when playing short mp3 clips.
+ * Merge pull request `#90 <https://github.com/ros-drivers/audio_common/issues/90>`_ from prarobo/master
+   Error checking code and improvements to launch files
+ * Merge pull request `#1 <https://github.com/ros-drivers/audio_common/issues/1>`_ from prarobo/fixes
+   Error checking code and improvements to launch files
+ * Added parameters to launch files
+ * Contributors: Austin, Matt Vollrath, Prasanna Kannappan, Yuki Furuta, prarobo
+ 
+ 0.3.1 (2016-08-28)
+ ------------------
+ * Update to new gstreamer rosdeps
+ * #70 can launch these in different namespaces with different microphones, and both are operating.
+ * Add changelogs
+ * Changed message level to warning
+ * Fixed problem that CMake uses gstreamer-0.1 instead of gstreamer-1.0
+ * Fixed underflow.
+   Before the sink buffer underflows the pipeline is paused. When data is received again the pipeline is set to playing again.
+ * Added gstreamer 1.0 dependecies
+ * Ported to gstreamer 1.0
+   package.xml dependencies still missing
+ * Change audio sink to autoaudiosink
+ * Update maintainer email
+ * Contributors: Benny, Hans Gaiser, Lucas Walter, trainman419
+ 
+ 0.2.11 (2016-02-16)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.10 (2016-01-21)
+ -------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.9 (2015-12-02)
+ ------------------
+ * Add changelogs
+ * Contributors: trainman419
+ 
+ 0.2.8 (2015-10-02)
+ ------------------
+ * Changed message level to warning
+ * Fixed underflow.
+   Before the sink buffer underflows the pipeline is paused. When data is received again the pipeline is set to playing again.
+ * Change audio sink to autoaudiosink
+ * Update maintainer email
+ * Contributors: Benny, Hans Gaiser, trainman419
+ 
+ 0.2.7 (2014-07-25)
+ ------------------
+ 
+ 0.2.6 (2014-02-26)
+ ------------------
+ * audio_capture and play _require\_ gstreamer, it's not optional
+ * Contributors: v4hn
+ 
+ 0.2.5 (2014-01-23)
+ ------------------
+ * "0.2.5"
+ * Contributors: trainman419
+ 
+ 0.2.4 (2013-09-10)
+ ------------------
+ 
+ 0.2.3 (2013-07-15)
+ ------------------
+ * Fix dependencies and install rules.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.2 (2013-04-10)
+ ------------------
+ 
+ 0.2.1 (2013-04-08 13:59)
+ ------------------------
+ 
+ 0.2.0 (2013-04-08 13:49)
+ ------------------------
+ * Finish catkinizing audio_common.
+ * Catkinize audio_play.
+ * Fix typo in package.xml
+ * Versions and more URLs.
+ * Convert manifests to package.xml
+ * Ditch old makefiles.
+ * Updates manifest
+ * Updated manifests for rodep2
+ * oneiric build fixes, bump version to 0.1.6
+ * Removed another duplicate thread::thread
+ * Added a rosdep.yaml file
+ * Fixed to use audio_common_msgs
+ * Added ability to use different festival voices
+ * Updated documentation
+ * Update to audio_play
+ * Fixed ignore files
+ * Added hgignore files
+ * Audio_capture and audio_play working
+ * Making separate audio_capture and audio_play packages
+ * Contributors: Austin Hendrix, Brian Gerkey, Nate Koenig, nkoenig
diff -crB --new-file audio_common/audio_common/audio_play/CMakeLists.txt audio_common_patched/audio_common/audio_play/CMakeLists.txt
*** audio_common/audio_common/audio_play/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/CMakeLists.txt	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,24 ----
+ cmake_minimum_required(VERSION 2.8.3)
+ 
+ project(audio_play)
+ 
+ find_package(catkin REQUIRED COMPONENTS roscpp audio_common_msgs)
+ 
+ find_package(PkgConfig)
+ pkg_check_modules(GST1.0 gstreamer-1.0 REQUIRED)
+ 
+ find_package(Boost REQUIRED COMPONENTS thread)
+ 
+ include_directories(${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${GST1.0_INCLUDE_DIRS})
+ 
+ catkin_package()
+ 
+ add_executable(audio_play src/audio_play.cpp)
+ target_link_libraries(audio_play ${catkin_LIBRARIES} ${GST1.0_LIBRARIES} ${Boost_LIBRARIES}) 
+ add_dependencies(audio_play ${catkin_EXPORTED_TARGETS})
+ 
+ install(TARGETS audio_play 
+    DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
+ 
+ install(DIRECTORY launch
+    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
diff -crB --new-file audio_common/audio_common/audio_play/.gitignore audio_common_patched/audio_common/audio_play/.gitignore
*** audio_common/audio_common/audio_play/.gitignore	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/.gitignore	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1 ----
+ build
diff -crB --new-file audio_common/audio_common/audio_play/launch/play.launch audio_common_patched/audio_common/audio_play/launch/play.launch
*** audio_common/audio_common/audio_play/launch/play.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/launch/play.launch	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,10 ----
+ <launch>
+   <arg name="ns" default="audio"/>
+   <arg name="dst" default="alsasink"/>
+ 
+   <group ns="$(arg ns)">
+   <node name="audio_play" pkg="audio_play" type="audio_play" output="screen">
+     <param name="dst" value="$(arg dst)"/>
+   </node>
+   </group>
+ </launch>
diff -crB --new-file audio_common/audio_common/audio_play/mainpage.dox audio_common_patched/audio_common/audio_play/mainpage.dox
*** audio_common/audio_common/audio_play/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/mainpage.dox	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,22 ----
+ /**
+ \mainpage
+ \htmlinclude manifest.html
+ 
+ \b audio_play is a package that listens to a node that produces audio_msgs, and plays them through a connected speaker.
+ 
+ 
+ \section codeapi Code API
+ 
+ <!--
+ Provide links to specific auto-generated API documentation within your
+ package that is of particular interest to a reader. Doxygen will
+ document pretty much every part of your code, so do your best here to
+ point the reader to the actual API.
+ 
+ If your codebase is fairly large or has different sets of APIs, you
+ should use the doxygen 'group' tag to keep these APIs together. For
+ example, the roscpp documentation has 'libros' group.
+ -->
+ 
+ 
+ */
diff -crB --new-file audio_common/audio_common/audio_play/package.xml audio_common_patched/audio_common/audio_play/package.xml
*** audio_common/audio_common/audio_play/package.xml	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/package.xml	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,30 ----
+ <package>
+    <name>audio_play</name>
+    <version>0.3.3</version>
+    <description>
+       Outputs audio to a speaker from a source node.
+    </description>
+    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
+    <author>Nate Koenig</author>
+    <license>BSD</license>
+    <url type="website">http://ros.org/wiki/audio_play</url>
+    <url type="repository">https://github.com/ros-drivers/audio_common</url>
+    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
+ 
+    <buildtool_depend>catkin</buildtool_depend>
+ 
+    <build_depend>roscpp</build_depend>
+    <build_depend>audio_common_msgs</build_depend>
+    <build_depend>libgstreamer1.0-dev</build_depend>
+    <build_depend>libgstreamer-plugins-base1.0-dev</build_depend>
+ 
+    <run_depend>roscpp</run_depend>
+    <run_depend>audio_common_msgs</run_depend>
+    <run_depend>gstreamer1.0</run_depend>
+    <run_depend>gstreamer1.0-plugins-base</run_depend>
+    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
+    <run_depend>gstreamer1.0-plugins-good</run_depend>
+ 
+ </package>
+ 
+ 
diff -crB --new-file audio_common/audio_common/audio_play/src/audio_play.cpp audio_common_patched/audio_common/audio_play/src/audio_play.cpp
*** audio_common/audio_common/audio_play/src/audio_play.cpp	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/audio_play/src/audio_play.cpp	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,134 ----
+ #include <gst/gst.h>
+ #include <gst/app/gstappsrc.h>
+ #include <ros/ros.h>
+ #include <boost/thread.hpp>
+ 
+ #include "audio_common_msgs/AudioData.h"
+ 
+ namespace audio_transport
+ {
+   class RosGstPlay
+   {
+     public:
+       RosGstPlay()
+       {
+         GstPad *audiopad;
+ 
+         std::string dst_type;
+         std::string device;
+ 
+         // The destination of the audio
+         ros::param::param<std::string>("~dst", dst_type, "alsasink");
+         ros::param::param<std::string>("~device", device, std::string());
+ 
+         _sub = _nh.subscribe("audio", 10, &RosGstPlay::onAudio, this);
+ 
+         _loop = g_main_loop_new(NULL, false);
+ 
+         _pipeline = gst_pipeline_new("app_pipeline");
+         _source = gst_element_factory_make("appsrc", "app_source");
+         g_object_set(G_OBJECT(_source), "do-timestamp", TRUE, NULL);
+         gst_bin_add( GST_BIN(_pipeline), _source);
+ 
+         //_playbin = gst_element_factory_make("playbin2", "uri_play");
+         //g_object_set( G_OBJECT(_playbin), "uri", "file:///home/test/test.mp3", NULL);
+         if (dst_type == "alsasink")
+         {
+           _decoder = gst_element_factory_make("decodebin", "decoder");
+           g_signal_connect(_decoder, "pad-added", G_CALLBACK(cb_newpad),this);
+           gst_bin_add( GST_BIN(_pipeline), _decoder);
+           gst_element_link(_source, _decoder);
+ 
+           _audio = gst_bin_new("audiobin");
+           _convert = gst_element_factory_make("audioconvert", "convert");
+           audiopad = gst_element_get_static_pad(_convert, "sink");
+           _sink = gst_element_factory_make("autoaudiosink", "sink");
+           if (!device.empty()) {
+             g_object_set(G_OBJECT(_sink), "device", device.c_str(), NULL);
+           }
+           gst_bin_add_many( GST_BIN(_audio), _convert, _sink, NULL);
+           gst_element_link(_convert, _sink);
+           gst_element_add_pad(_audio, gst_ghost_pad_new("sink", audiopad));
+           gst_object_unref(audiopad);
+ 
+           gst_bin_add(GST_BIN(_pipeline), _audio);
+         }
+         else
+         {
+           _sink = gst_element_factory_make("filesink", "sink");
+           g_object_set( G_OBJECT(_sink), "location", dst_type.c_str(), NULL);
+           gst_bin_add(GST_BIN(_pipeline), _sink);
+           gst_element_link(_source, _sink);
+         }
+ 
+         gst_element_set_state(GST_ELEMENT(_pipeline), GST_STATE_PLAYING);
+         //gst_element_set_state(GST_ELEMENT(_playbin), GST_STATE_PLAYING);
+ 
+         _gst_thread = boost::thread( boost::bind(g_main_loop_run, _loop) );
+       }
+ 
+     private:
+ 
+       void onAudio(const audio_common_msgs::AudioDataConstPtr &msg)
+       {
+         GstBuffer *buffer = gst_buffer_new_and_alloc(msg->data.size());
+         gst_buffer_fill(buffer, 0, &msg->data[0], msg->data.size());
+         GstFlowReturn ret;
+ 
+         g_signal_emit_by_name(_source, "push-buffer", buffer, &ret);
+       }
+ 
+      static void cb_newpad (GstElement *decodebin, GstPad *pad, 
+                              gpointer data)
+       {
+         RosGstPlay *client = reinterpret_cast<RosGstPlay*>(data);
+ 
+         GstCaps *caps;
+         GstStructure *str;
+         GstPad *audiopad;
+ 
+         /* only link once */
+         audiopad = gst_element_get_static_pad (client->_audio, "sink");
+         if (GST_PAD_IS_LINKED (audiopad)) 
+         {
+           g_object_unref (audiopad);
+           return;
+         }
+ 
+         /* check media type */
+         caps = gst_pad_query_caps (pad, NULL);
+         str = gst_caps_get_structure (caps, 0);
+         if (!g_strrstr (gst_structure_get_name (str), "audio")) {
+           gst_caps_unref (caps);
+           gst_object_unref (audiopad);
+           return;
+         }
+ 
+         gst_caps_unref (caps);
+ 
+         /* link'n'play */
+         gst_pad_link (pad, audiopad);
+ 
+         g_object_unref (audiopad);
+       }
+ 
+       ros::NodeHandle _nh;
+       ros::Subscriber _sub;
+       boost::thread _gst_thread;
+ 
+       GstElement *_pipeline, *_source, *_sink, *_decoder, *_convert, *_audio;
+       GstElement *_playbin;
+       GMainLoop *_loop;
+   };
+ }
+ 
+ 
+ int main (int argc, char **argv)
+ {
+   ros::init(argc, argv, "audio_play");
+   gst_init(&argc, &argv);
+ 
+   audio_transport::RosGstPlay client;
+ 
+   ros::spin();
+ }
diff -crB --new-file audio_common/audio_common/CHANGELOG.rst audio_common_patched/audio_common/CHANGELOG.rst
*** audio_common/audio_common/CHANGELOG.rst	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,67 ****
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Changelog for package audio_common
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- 0.3.3 (2018-05-22)
- ------------------
- 
- 0.3.2 (2018-05-02)
- ------------------
- 
- 0.3.1 (2016-08-28)
- ------------------
- * Add changelogs
- * Update maintainer email
- * Contributors: trainman419
- 
- 0.2.11 (2016-02-16)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.10 (2016-01-21)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.9 (2015-12-02)
- ------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.8 (2015-10-02)
- ------------------
- * Update maintainer email
- * Contributors: trainman419
- 
- 0.2.7 (2014-07-25)
- ------------------
- 
- 0.2.6 (2014-02-26)
- ------------------
- 
- 0.2.5 (2014-01-23)
- ------------------
- * "0.2.5"
- * Contributors: trainman419
- 
- 0.2.4 (2013-09-10)
- ------------------
- 
- 0.2.3 (2013-07-15)
- ------------------
- 
- 0.2.2 (2013-04-10)
- ------------------
- 
- 0.2.1 (2013-04-08 13:59)
- ------------------------
- * Fix metapackage for REP 127.
- * Contributors: Austin Hendrix
- 
- 0.2.0 (2013-04-08 13:49)
- ------------------------
- * Versions and more URLs.
- * Convert stack.xml to metapackage package.xml
- * Start catkinizing.
- * Contributors: Austin Hendrix
--- 0 ----
diff -crB --new-file audio_common/audio_common/CMakeLists.txt audio_common_patched/audio_common/CMakeLists.txt
*** audio_common/audio_common/CMakeLists.txt	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,4 ****
- cmake_minimum_required(VERSION 2.8.3)
- project(audio_common)
- find_package(catkin REQUIRED)
- catkin_metapackage()
--- 0 ----
diff -crB --new-file audio_common/audio_common/.git/config audio_common_patched/audio_common/.git/config
*** audio_common/audio_common/.git/config	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/config	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1,11 ----
+ [core]
+ 	repositoryformatversion = 0
+ 	filemode = true
+ 	bare = false
+ 	logallrefupdates = true
+ [remote "origin"]
+ 	url = https://github.com/ros-drivers/audio_common.git
+ 	fetch = +refs/heads/*:refs/remotes/origin/*
+ [branch "master"]
+ 	remote = origin
+ 	merge = refs/heads/master
diff -crB --new-file audio_common/audio_common/.git/description audio_common_patched/audio_common/.git/description
*** audio_common/audio_common/.git/description	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/description	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1 ----
+ Unnamed repository; edit this file 'description' to name the repository.
diff -crB --new-file audio_common/audio_common/.git/HEAD audio_common_patched/audio_common/.git/HEAD
*** audio_common/audio_common/.git/HEAD	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/HEAD	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1 ----
+ ref: refs/heads/master
diff -crB --new-file audio_common/audio_common/.git/hooks/applypatch-msg.sample audio_common_patched/audio_common/.git/hooks/applypatch-msg.sample
*** audio_common/audio_common/.git/hooks/applypatch-msg.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/applypatch-msg.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,15 ----
+ #!/bin/sh
+ #
+ # An example hook script to check the commit log message taken by
+ # applypatch from an e-mail message.
+ #
+ # The hook should exit with non-zero status after issuing an
+ # appropriate message if it wants to stop the commit.  The hook is
+ # allowed to edit the commit message file.
+ #
+ # To enable this hook, rename this file to "applypatch-msg".
+ 
+ . git-sh-setup
+ commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+ test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+ :
diff -crB --new-file audio_common/audio_common/.git/hooks/commit-msg.sample audio_common_patched/audio_common/.git/hooks/commit-msg.sample
*** audio_common/audio_common/.git/hooks/commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/commit-msg.sample	2018-08-23 10:52:14.508501935 +0200
***************
*** 0 ****
--- 1,24 ----
+ #!/bin/sh
+ #
+ # An example hook script to check the commit log message.
+ # Called by "git commit" with one argument, the name of the file
+ # that has the commit message.  The hook should exit with non-zero
+ # status after issuing an appropriate message if it wants to stop the
+ # commit.  The hook is allowed to edit the commit message file.
+ #
+ # To enable this hook, rename this file to "commit-msg".
+ 
+ # Uncomment the below to add a Signed-off-by line to the message.
+ # Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+ # hook is more suited to it.
+ #
+ # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+ # grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+ 
+ # This example catches duplicate Signed-off-by lines.
+ 
+ test "" = "$(grep '^Signed-off-by: ' "$1" |
+ 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+ 	echo >&2 Duplicate Signed-off-by lines.
+ 	exit 1
+ }
diff -crB --new-file audio_common/audio_common/.git/hooks/post-update.sample audio_common_patched/audio_common/.git/hooks/post-update.sample
*** audio_common/audio_common/.git/hooks/post-update.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/post-update.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,8 ----
+ #!/bin/sh
+ #
+ # An example hook script to prepare a packed repository for use over
+ # dumb transports.
+ #
+ # To enable this hook, rename this file to "post-update".
+ 
+ exec git update-server-info
diff -crB --new-file audio_common/audio_common/.git/hooks/pre-applypatch.sample audio_common_patched/audio_common/.git/hooks/pre-applypatch.sample
*** audio_common/audio_common/.git/hooks/pre-applypatch.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/pre-applypatch.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,14 ----
+ #!/bin/sh
+ #
+ # An example hook script to verify what is about to be committed
+ # by applypatch from an e-mail message.
+ #
+ # The hook should exit with non-zero status after issuing an
+ # appropriate message if it wants to stop the commit.
+ #
+ # To enable this hook, rename this file to "pre-applypatch".
+ 
+ . git-sh-setup
+ precommit="$(git rev-parse --git-path hooks/pre-commit)"
+ test -x "$precommit" && exec "$precommit" ${1+"$@"}
+ :
diff -crB --new-file audio_common/audio_common/.git/hooks/pre-commit.sample audio_common_patched/audio_common/.git/hooks/pre-commit.sample
*** audio_common/audio_common/.git/hooks/pre-commit.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/pre-commit.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,49 ----
+ #!/bin/sh
+ #
+ # An example hook script to verify what is about to be committed.
+ # Called by "git commit" with no arguments.  The hook should
+ # exit with non-zero status after issuing an appropriate message if
+ # it wants to stop the commit.
+ #
+ # To enable this hook, rename this file to "pre-commit".
+ 
+ if git rev-parse --verify HEAD >/dev/null 2>&1
+ then
+ 	against=HEAD
+ else
+ 	# Initial commit: diff against an empty tree object
+ 	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
+ fi
+ 
+ # If you want to allow non-ASCII filenames set this variable to true.
+ allownonascii=$(git config --bool hooks.allownonascii)
+ 
+ # Redirect output to stderr.
+ exec 1>&2
+ 
+ # Cross platform projects tend to avoid non-ASCII filenames; prevent
+ # them from being added to the repository. We exploit the fact that the
+ # printable range starts at the space character and ends with tilde.
+ if [ "$allownonascii" != "true" ] &&
+ 	# Note that the use of brackets around a tr range is ok here, (it's
+ 	# even required, for portability to Solaris 10's /usr/bin/tr), since
+ 	# the square bracket bytes happen to fall in the designated range.
+ 	test $(git diff --cached --name-only --diff-filter=A -z $against |
+ 	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+ then
+ 	cat <<\EOF
+ Error: Attempt to add a non-ASCII file name.
+ 
+ This can cause problems if you want to work with people on other platforms.
+ 
+ To be portable it is advisable to rename the file.
+ 
+ If you know what you are doing you can disable this check using:
+ 
+   git config hooks.allownonascii true
+ EOF
+ 	exit 1
+ fi
+ 
+ # If there are whitespace errors, print the offending file names and fail.
+ exec git diff-index --check --cached $against --
diff -crB --new-file audio_common/audio_common/.git/hooks/prepare-commit-msg.sample audio_common_patched/audio_common/.git/hooks/prepare-commit-msg.sample
*** audio_common/audio_common/.git/hooks/prepare-commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/prepare-commit-msg.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,36 ----
+ #!/bin/sh
+ #
+ # An example hook script to prepare the commit log message.
+ # Called by "git commit" with the name of the file that has the
+ # commit message, followed by the description of the commit
+ # message's source.  The hook's purpose is to edit the commit
+ # message file.  If the hook fails with a non-zero status,
+ # the commit is aborted.
+ #
+ # To enable this hook, rename this file to "prepare-commit-msg".
+ 
+ # This hook includes three examples.  The first comments out the
+ # "Conflicts:" part of a merge commit.
+ #
+ # The second includes the output of "git diff --name-status -r"
+ # into the message, just before the "git status" output.  It is
+ # commented because it doesn't cope with --amend or with squashed
+ # commits.
+ #
+ # The third example adds a Signed-off-by line to the message, that can
+ # still be edited.  This is rarely a good idea.
+ 
+ case "$2,$3" in
+   merge,)
+     /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
+ 
+ # ,|template,)
+ #   /usr/bin/perl -i.bak -pe '
+ #      print "\n" . `git diff --cached --name-status -r`
+ #	 if /^#/ && $first++ == 0' "$1" ;;
+ 
+   *) ;;
+ esac
+ 
+ # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+ # grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
diff -crB --new-file audio_common/audio_common/.git/hooks/pre-push.sample audio_common_patched/audio_common/.git/hooks/pre-push.sample
*** audio_common/audio_common/.git/hooks/pre-push.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/pre-push.sample	2018-08-23 10:52:14.508501935 +0200
***************
*** 0 ****
--- 1,53 ----
+ #!/bin/sh
+ 
+ # An example hook script to verify what is about to be pushed.  Called by "git
+ # push" after it has checked the remote status, but before anything has been
+ # pushed.  If this script exits with a non-zero status nothing will be pushed.
+ #
+ # This hook is called with the following parameters:
+ #
+ # $1 -- Name of the remote to which the push is being done
+ # $2 -- URL to which the push is being done
+ #
+ # If pushing without using a named remote those arguments will be equal.
+ #
+ # Information about the commits which are being pushed is supplied as lines to
+ # the standard input in the form:
+ #
+ #   <local ref> <local sha1> <remote ref> <remote sha1>
+ #
+ # This sample shows how to prevent push of commits where the log message starts
+ # with "WIP" (work in progress).
+ 
+ remote="$1"
+ url="$2"
+ 
+ z40=0000000000000000000000000000000000000000
+ 
+ while read local_ref local_sha remote_ref remote_sha
+ do
+ 	if [ "$local_sha" = $z40 ]
+ 	then
+ 		# Handle delete
+ 		:
+ 	else
+ 		if [ "$remote_sha" = $z40 ]
+ 		then
+ 			# New branch, examine all commits
+ 			range="$local_sha"
+ 		else
+ 			# Update to existing branch, examine new commits
+ 			range="$remote_sha..$local_sha"
+ 		fi
+ 
+ 		# Check for WIP commit
+ 		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
+ 		if [ -n "$commit" ]
+ 		then
+ 			echo >&2 "Found WIP commit in $local_ref, not pushing"
+ 			exit 1
+ 		fi
+ 	fi
+ done
+ 
+ exit 0
diff -crB --new-file audio_common/audio_common/.git/hooks/pre-rebase.sample audio_common_patched/audio_common/.git/hooks/pre-rebase.sample
*** audio_common/audio_common/.git/hooks/pre-rebase.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/pre-rebase.sample	2018-08-23 10:52:14.508501935 +0200
***************
*** 0 ****
--- 1,169 ----
+ #!/bin/sh
+ #
+ # Copyright (c) 2006, 2008 Junio C Hamano
+ #
+ # The "pre-rebase" hook is run just before "git rebase" starts doing
+ # its job, and can prevent the command from running by exiting with
+ # non-zero status.
+ #
+ # The hook is called with the following parameters:
+ #
+ # $1 -- the upstream the series was forked from.
+ # $2 -- the branch being rebased (or empty when rebasing the current branch).
+ #
+ # This sample shows how to prevent topic branches that are already
+ # merged to 'next' branch from getting rebased, because allowing it
+ # would result in rebasing already published history.
+ 
+ publish=next
+ basebranch="$1"
+ if test "$#" = 2
+ then
+ 	topic="refs/heads/$2"
+ else
+ 	topic=`git symbolic-ref HEAD` ||
+ 	exit 0 ;# we do not interrupt rebasing detached HEAD
+ fi
+ 
+ case "$topic" in
+ refs/heads/??/*)
+ 	;;
+ *)
+ 	exit 0 ;# we do not interrupt others.
+ 	;;
+ esac
+ 
+ # Now we are dealing with a topic branch being rebased
+ # on top of master.  Is it OK to rebase it?
+ 
+ # Does the topic really exist?
+ git show-ref -q "$topic" || {
+ 	echo >&2 "No such branch $topic"
+ 	exit 1
+ }
+ 
+ # Is topic fully merged to master?
+ not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+ if test -z "$not_in_master"
+ then
+ 	echo >&2 "$topic is fully merged to master; better remove it."
+ 	exit 1 ;# we could allow it, but there is no point.
+ fi
+ 
+ # Is topic ever merged to next?  If so you should not be rebasing it.
+ only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+ only_next_2=`git rev-list ^master           ${publish} | sort`
+ if test "$only_next_1" = "$only_next_2"
+ then
+ 	not_in_topic=`git rev-list "^$topic" master`
+ 	if test -z "$not_in_topic"
+ 	then
+ 		echo >&2 "$topic is already up-to-date with master"
+ 		exit 1 ;# we could allow it, but there is no point.
+ 	else
+ 		exit 0
+ 	fi
+ else
+ 	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+ 	/usr/bin/perl -e '
+ 		my $topic = $ARGV[0];
+ 		my $msg = "* $topic has commits already merged to public branch:\n";
+ 		my (%not_in_next) = map {
+ 			/^([0-9a-f]+) /;
+ 			($1 => 1);
+ 		} split(/\n/, $ARGV[1]);
+ 		for my $elem (map {
+ 				/^([0-9a-f]+) (.*)$/;
+ 				[$1 => $2];
+ 			} split(/\n/, $ARGV[2])) {
+ 			if (!exists $not_in_next{$elem->[0]}) {
+ 				if ($msg) {
+ 					print STDERR $msg;
+ 					undef $msg;
+ 				}
+ 				print STDERR " $elem->[1]\n";
+ 			}
+ 		}
+ 	' "$topic" "$not_in_next" "$not_in_master"
+ 	exit 1
+ fi
+ 
+ <<\DOC_END
+ 
+ This sample hook safeguards topic branches that have been
+ published from being rewound.
+ 
+ The workflow assumed here is:
+ 
+  * Once a topic branch forks from "master", "master" is never
+    merged into it again (either directly or indirectly).
+ 
+  * Once a topic branch is fully cooked and merged into "master",
+    it is deleted.  If you need to build on top of it to correct
+    earlier mistakes, a new topic branch is created by forking at
+    the tip of the "master".  This is not strictly necessary, but
+    it makes it easier to keep your history simple.
+ 
+  * Whenever you need to test or publish your changes to topic
+    branches, merge them into "next" branch.
+ 
+ The script, being an example, hardcodes the publish branch name
+ to be "next", but it is trivial to make it configurable via
+ $GIT_DIR/config mechanism.
+ 
+ With this workflow, you would want to know:
+ 
+ (1) ... if a topic branch has ever been merged to "next".  Young
+     topic branches can have stupid mistakes you would rather
+     clean up before publishing, and things that have not been
+     merged into other branches can be easily rebased without
+     affecting other people.  But once it is published, you would
+     not want to rewind it.
+ 
+ (2) ... if a topic branch has been fully merged to "master".
+     Then you can delete it.  More importantly, you should not
+     build on top of it -- other people may already want to
+     change things related to the topic as patches against your
+     "master", so if you need further changes, it is better to
+     fork the topic (perhaps with the same name) afresh from the
+     tip of "master".
+ 
+ Let's look at this example:
+ 
+ 		   o---o---o---o---o---o---o---o---o---o "next"
+ 		  /       /           /           /
+ 		 /   a---a---b A     /           /
+ 		/   /               /           /
+ 	       /   /   c---c---c---c B         /
+ 	      /   /   /             \         /
+ 	     /   /   /   b---b C     \       /
+ 	    /   /   /   /             \     /
+     ---o---o---o---o---o---o---o---o---o---o---o "master"
+ 
+ 
+ A, B and C are topic branches.
+ 
+  * A has one fix since it was merged up to "next".
+ 
+  * B has finished.  It has been fully merged up to "master" and "next",
+    and is ready to be deleted.
+ 
+  * C has not merged to "next" at all.
+ 
+ We would want to allow C to be rebased, refuse A, and encourage
+ B to be deleted.
+ 
+ To compute (1):
+ 
+ 	git rev-list ^master ^topic next
+ 	git rev-list ^master        next
+ 
+ 	if these match, topic has not merged in next at all.
+ 
+ To compute (2):
+ 
+ 	git rev-list master..topic
+ 
+ 	if this is empty, it is fully merged to "master".
+ 
+ DOC_END
diff -crB --new-file audio_common/audio_common/.git/hooks/update.sample audio_common_patched/audio_common/.git/hooks/update.sample
*** audio_common/audio_common/.git/hooks/update.sample	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/hooks/update.sample	2018-08-23 10:52:14.512501861 +0200
***************
*** 0 ****
--- 1,128 ----
+ #!/bin/sh
+ #
+ # An example hook script to block unannotated tags from entering.
+ # Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+ #
+ # To enable this hook, rename this file to "update".
+ #
+ # Config
+ # ------
+ # hooks.allowunannotated
+ #   This boolean sets whether unannotated tags will be allowed into the
+ #   repository.  By default they won't be.
+ # hooks.allowdeletetag
+ #   This boolean sets whether deleting tags will be allowed in the
+ #   repository.  By default they won't be.
+ # hooks.allowmodifytag
+ #   This boolean sets whether a tag may be modified after creation. By default
+ #   it won't be.
+ # hooks.allowdeletebranch
+ #   This boolean sets whether deleting branches will be allowed in the
+ #   repository.  By default they won't be.
+ # hooks.denycreatebranch
+ #   This boolean sets whether remotely creating branches will be denied
+ #   in the repository.  By default this is allowed.
+ #
+ 
+ # --- Command line
+ refname="$1"
+ oldrev="$2"
+ newrev="$3"
+ 
+ # --- Safety check
+ if [ -z "$GIT_DIR" ]; then
+ 	echo "Don't run this script from the command line." >&2
+ 	echo " (if you want, you could supply GIT_DIR then run" >&2
+ 	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+ 	exit 1
+ fi
+ 
+ if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+ 	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+ 	exit 1
+ fi
+ 
+ # --- Config
+ allowunannotated=$(git config --bool hooks.allowunannotated)
+ allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
+ denycreatebranch=$(git config --bool hooks.denycreatebranch)
+ allowdeletetag=$(git config --bool hooks.allowdeletetag)
+ allowmodifytag=$(git config --bool hooks.allowmodifytag)
+ 
+ # check for no description
+ projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+ case "$projectdesc" in
+ "Unnamed repository"* | "")
+ 	echo "*** Project description file hasn't been set" >&2
+ 	exit 1
+ 	;;
+ esac
+ 
+ # --- Check types
+ # if $newrev is 0000...0000, it's a commit to delete a ref.
+ zero="0000000000000000000000000000000000000000"
+ if [ "$newrev" = "$zero" ]; then
+ 	newrev_type=delete
+ else
+ 	newrev_type=$(git cat-file -t $newrev)
+ fi
+ 
+ case "$refname","$newrev_type" in
+ 	refs/tags/*,commit)
+ 		# un-annotated tag
+ 		short_refname=${refname##refs/tags/}
+ 		if [ "$allowunannotated" != "true" ]; then
+ 			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+ 			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	refs/tags/*,delete)
+ 		# delete tag
+ 		if [ "$allowdeletetag" != "true" ]; then
+ 			echo "*** Deleting a tag is not allowed in this repository" >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	refs/tags/*,tag)
+ 		# annotated tag
+ 		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+ 		then
+ 			echo "*** Tag '$refname' already exists." >&2
+ 			echo "*** Modifying a tag is not allowed in this repository." >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	refs/heads/*,commit)
+ 		# branch
+ 		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+ 			echo "*** Creating a branch is not allowed in this repository" >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	refs/heads/*,delete)
+ 		# delete branch
+ 		if [ "$allowdeletebranch" != "true" ]; then
+ 			echo "*** Deleting a branch is not allowed in this repository" >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	refs/remotes/*,commit)
+ 		# tracking branch
+ 		;;
+ 	refs/remotes/*,delete)
+ 		# delete tracking branch
+ 		if [ "$allowdeletebranch" != "true" ]; then
+ 			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+ 			exit 1
+ 		fi
+ 		;;
+ 	*)
+ 		# Anything else (is there anything else?)
+ 		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+ 		exit 1
+ 		;;
+ esac
+ 
+ # --- Finished
+ exit 0
Binary files audio_common/audio_common/.git/index and audio_common_patched/audio_common/.git/index differ
diff -crB --new-file audio_common/audio_common/.git/info/exclude audio_common_patched/audio_common/.git/info/exclude
*** audio_common/audio_common/.git/info/exclude	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/info/exclude	2018-08-23 10:52:14.508501935 +0200
***************
*** 0 ****
--- 1,6 ----
+ # git ls-files --others --exclude-from=.git/info/exclude
+ # Lines that start with '#' are comments.
+ # For a project mostly in C, the following would be a good set of
+ # exclude patterns (uncomment them if you want to use them):
+ # *.[oa]
+ # *~
diff -crB --new-file audio_common/audio_common/.git/logs/HEAD audio_common_patched/audio_common/.git/logs/HEAD
*** audio_common/audio_common/.git/logs/HEAD	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/logs/HEAD	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1 ----
+ 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535014336 +0200	clone: from https://github.com/ros-drivers/audio_common.git
diff -crB --new-file audio_common/audio_common/.git/logs/refs/heads/master audio_common_patched/audio_common/.git/logs/refs/heads/master
*** audio_common/audio_common/.git/logs/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/logs/refs/heads/master	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1 ----
+ 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535014336 +0200	clone: from https://github.com/ros-drivers/audio_common.git
diff -crB --new-file audio_common/audio_common/.git/logs/refs/remotes/origin/HEAD audio_common_patched/audio_common/.git/logs/refs/remotes/origin/HEAD
*** audio_common/audio_common/.git/logs/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/logs/refs/remotes/origin/HEAD	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1 ----
+ 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535014336 +0200	clone: from https://github.com/ros-drivers/audio_common.git
Binary files audio_common/audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.idx and audio_common_patched/audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.idx differ
Binary files audio_common/audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.pack and audio_common_patched/audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.pack differ
diff -crB --new-file audio_common/audio_common/.git/packed-refs audio_common_patched/audio_common/.git/packed-refs
*** audio_common/audio_common/.git/packed-refs	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/packed-refs	2018-08-23 10:52:16.544464214 +0200
***************
*** 0 ****
--- 1,37 ----
+ # pack-refs with: peeled fully-peeled 
+ f207408361c16da322ed0ebce73e304aeeb0b3bd refs/remotes/origin/groovy-devel
+ 5001fde42d54cc68b4907f4ab64536b07f1d1f5c refs/remotes/origin/hydro-devel
+ e6a5eda3ec13b27e57e4b73931e04f559eb80d62 refs/remotes/origin/indigo-devel
+ e2c2b058220581e1b7fb81142ec8d36193f7e07f refs/remotes/origin/master
+ a4adacab381276d22dcafe788cd5f6fc5e7d3cf8 refs/remotes/origin/sound_play
+ c1349f2d99bc662106a1049d2191b5e2e8842697 refs/tags/0.2.0
+ 6a06826f01724d25373fde07a85d1f9ae66b878a refs/tags/0.2.1
+ bad594726a8786f49ba0b121ad5fa44a26207db8 refs/tags/0.2.10
+ f2e04adb831aa45d0706cac7862743cbb430dd3d refs/tags/0.2.11
+ 8035148c69d1555a062bb4a331bcae2da5232093 refs/tags/0.2.12
+ e6a5eda3ec13b27e57e4b73931e04f559eb80d62 refs/tags/0.2.13
+ 0266461bd2c5253bfbaea4793838372bd8eb1cb4 refs/tags/0.2.2
+ 2c96a456770f1e5994e2c3103178d8ebc14382d2 refs/tags/0.2.3
+ 824df59d18cabe147a11d92c4565b5acab8de4f0 refs/tags/0.2.4
+ c46a655f322e9e8a5ef586d7e14e2e7b61d4e0c1 refs/tags/0.2.5
+ 423274dcacfee9eebb2faf1cf057ef77d9ea12bf refs/tags/0.2.6
+ 259cb3c98dcd22d5f0a14ebf034e5abb0119c35a refs/tags/0.2.7
+ 8a8d95c322d317aa111e9c25177bbaf37b559bdb refs/tags/0.2.8
+ 3407fbb4f39512d82b254ef34cdf9535700e87e6 refs/tags/0.2.9
+ eaf8b2f98417bb279a36d115d19cf96d0fc018ed refs/tags/0.3.0
+ 1931af14cabf009c6d2b61a556c70f1c63a4b0d5 refs/tags/0.3.1
+ ced2d652fac38ff9bf35cc15944bb8ba9ea32f90 refs/tags/0.3.2
+ 681512eafb2fbfa79a1a52be3f21ffd1a71ea620 refs/tags/0.3.3
+ ae410eb8922a9e45799281ad35225ed546c7f2cc refs/tags/audio_common-0.1.0
+ c04500e7851f357f1284f4dd0821aefa7a0f87cd refs/tags/audio_common-0.1.1
+ 99deb59c7e708d077cd126bbf292e41895d166fd refs/tags/audio_common-0.1.2
+ 9aff2c61a9d717f038dd45c6df9400f3c9b67d44 refs/tags/audio_common-0.1.3
+ 2e86dbfae29c2e241c84cf19de41c52fee30ff63 refs/tags/audio_common-0.1.4
+ f588ed83ef7e0de80407cdd291ffd605bcaff721 refs/tags/audio_common-0.1.5
+ b4c77e7c04f9025d0ceb4302e578a5028f1ae458 refs/tags/audio_common-0.1.6
+ 681213334ccb0ff09a6ae0c274e3f211da944fc7 refs/tags/audio_common-0.1.8
+ 55d249c8a78bf9709334ae723e4f130bbda702f8 refs/tags/audio_common-0.1.9
+ 78a4f6d02481bdbe0f85d620336660d3cdb5b495 refs/tags/electric
+ 177d8ee409898d343b5ecc836296479f5647fa16 refs/tags/fuerte
+ ce0a56f28c1cc25424a3be78014bb8ed13f5f962 refs/tags/groovy
+ be8843dba471b6f87fd32ac379dde14439ed3504 refs/tags/unstable
diff -crB --new-file audio_common/audio_common/.git/refs/heads/master audio_common_patched/audio_common/.git/refs/heads/master
*** audio_common/audio_common/.git/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/refs/heads/master	2018-08-23 10:52:16.548464140 +0200
***************
*** 0 ****
--- 1 ----
+ e2c2b058220581e1b7fb81142ec8d36193f7e07f
diff -crB --new-file audio_common/audio_common/.git/refs/remotes/origin/HEAD audio_common_patched/audio_common/.git/refs/remotes/origin/HEAD
*** audio_common/audio_common/.git/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.git/refs/remotes/origin/HEAD	2018-08-23 10:52:16.544464214 +0200
***************
*** 0 ****
--- 1 ----
+ ref: refs/remotes/origin/master
diff -crB --new-file audio_common/audio_common/.gitignore audio_common_patched/audio_common/.gitignore
*** audio_common/audio_common/.gitignore	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/.gitignore	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1 ----
+ *.pyc
diff -crB --new-file audio_common/audio_common/package.xml audio_common_patched/audio_common/package.xml
*** audio_common/audio_common/package.xml	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common/package.xml	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,24 ****
- <package>
-    <name>audio_common</name>
-    <version>0.3.3</version>
-    <description>
-       Common code for working with audio in ROS
-    </description>
-    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
-    <author>Blaise Gassend</author>
-    <license>BSD</license>  
-    <url type="website">http://ros.org/wiki/audio_common</url>
-    <url type="repository">https://github.com/ros-drivers/audio_common</url>
-    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
- 
-    <buildtool_depend>catkin</buildtool_depend>
- 
-    <run_depend>audio_capture</run_depend>
-    <run_depend>audio_common_msgs</run_depend>
-    <run_depend>audio_play</run_depend>
-    <run_depend>sound_play</run_depend>
- 
-    <export>
-       <metapackage/>
-    </export>
- </package>
--- 0 ----
diff -crB --new-file audio_common/audio_common/README.md audio_common_patched/audio_common/README.md
*** audio_common/audio_common/README.md	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/README.md	2018-08-23 10:52:16.592463325 +0200
***************
*** 0 ****
--- 1,27 ----
+ # ROS audio\_common Package
+ 
+ This repository contains the ROS audio\_common package.
+ 
+ For user documentation, please refer to the [ROS Wiki page for audio\_common](http://wiki.ros.org/audio_common)
+ 
+ # Support
+ 
+ Please ask support questions on [ROS Answers](http://answers.ros.org/questions/).
+ 
+ # Building from source
+ 
+ On ROS Indigo or Jade, the `indigo-devel` branch is recommended.
+ 
+ On ROS Kinetic, the `master` branch is recommended.
+ 
+ # Development, Branch and Release Policy
+ 
+ This package is not under active development, but is accepting pull requests for bug fixes and new features. (Development may be done for serious bug fixes; pending maintainer time).
+ 
+ The `sound_play`, `groovy-devel` and `hydro-devel` branches are from previous ROS releases and are frozen; no new pull requests will be accepted on these branches.
+ 
+ The `indigo-devel` branch is the stable branch; only bug fixes are accepted on this branch. Periodic releases are done from `indigo-devel` into ROS Indigo and ROS Jade, with version numbers in the 0.2.x range.
+ 
+ The `master` branch is currently considered the development branch, and is released into ROS Kinetic with version numbers in the 0.3.x range. `master` is accepting new, non-breaking features and bug fixes.
+ 
+ Large, breaking changes such as changes to dependencies or the package API will be considered, but they will probably be staged into a development branch for release into the next major release of ROS (ROS L)
diff -crB --new-file audio_common/audio_common/sound_play/action/SoundRequest.action audio_common_patched/audio_common/sound_play/action/SoundRequest.action
*** audio_common/audio_common/sound_play/action/SoundRequest.action	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/action/SoundRequest.action	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,7 ----
+ SoundRequest sound_request
+ ---
+ bool playing
+ time stamp
+ ---
+ bool playing
+ time stamp
\ No newline at end of file
diff -crB --new-file audio_common/audio_common/sound_play/CHANGELOG.rst audio_common_patched/audio_common/sound_play/CHANGELOG.rst
*** audio_common/audio_common/sound_play/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/CHANGELOG.rst	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,245 ----
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ Changelog for package sound_play
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ 
+ 0.3.3 (2018-05-22)
+ ------------------
+ * Fix gstreamer errors. Fixes `#108 <https://github.com/ros-drivers/audio_common/issues/108>`_
+ * Contributors: trainman419
+ 
+ 0.3.2 (2018-05-02)
+ ------------------
+ * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
+   * [sound_play] add option to select audio device to play
+   * [sound_play] reformat README to markdown; add usage to set device via rosparam
+   * audio_capture: add option for selecting device to use
+   * audio_play: add option to select device for playing audio
+   * add device argument to launch files
+   Conflicts:
+   audio_capture/launch/capture.launch
+   audio_capture/launch/capture_to_file.launch
+   audio_capture/src/audio_capture.cpp
+   audio_play/launch/play.launch
+   sound_play/scripts/soundplay_node.py
+ * Merge pull request `#95 <https://github.com/ros-drivers/audio_common/issues/95>`_ from yujinrobot/volume_check
+   [sound_play] volume check for cached sounds
+ * [sound_play] checks if sound's Gst instance's volume has changed and resets it
+ * Contributors: Austin, Naveed Usmani, Yuki Furuta
+ 
+ 0.3.1 (2016-08-28)
+ ------------------
+ * Update to new gstreamer rosdeps
+ * Update sound_play to gstreamer 1.0
+ * remove chance of uninitialised variable being called in a subscriber callback.
+ * Add changelogs
+ * Issue: The error checks for missing publisher/action client in sendMsg were inverted.
+   The non-blocking brach tested the action client while the blocking branch
+   tested the publisher.
+   Fix: Inverted the blocking boolean for both branchs.
+ * sound_play: Fix build with -DCATKIN_ENABLE_TESTING=OFF.
+   https://bugs.gentoo.org/show_bug.cgi?id=567466
+ * [soundplay_node] fix resources not being released on dict cleanup
+   This was resulting in the number of sink inputs reaching the maximum threshold,
+   (32 on ubuntu 14.04 with pulseaudio 4.0) after which no more sounds could be
+   played by the node. It would only happen if the rate of sounds being played was
+   slower than the dictionary cleanup.
+ * depend on actionlib.
+ * Introduce unit test to ensure soundclient is started correctly.
+ * Example of using the explicit blocking parameter to override the class setting.
+ * SoundClient can also explicitly specify whether or not to block while playing the sound.
+   Each play/repeat/say/... method can take an option blocking=True|False argument (using **kwargs), which over-rides the class-wide setting.
+ * Merge pull request #62 from felixduvallet/set_queue_size
+   Set queue_size in soundplay_node Publisher
+ * do both in same script.
+ * Added script showing the various blocking/non-blocking ways of using SoundClient.
+ * removed trailing whitespace only
+ * loginfo -> logdebug.
+ * Slightly more condensed version of thresholding.
+ * Enable blocking calls inside libsoundplay's SoundClient.
+   This makes use of the actionlib interface provided by soundplay_node, by ensuring SoundClient receives a response before returning.
+   Turn this on by: SoundClient(blocking=true).
+ * Use new-style python classes (inherits from object).
+ * removed trailing whitespace.
+ * Set the volume in each of the sound_play actionlib tests.
+   This makes the script actually play the sounds it requests.
+ * Specify queue size explicitly.
+   Removed warning message printed each time soundplay_node was started.
+ * remove trailing whitespace only.
+ * Change wiki urls
+ * Fix test target name collision. Fixes #49
+ * sound_play: cpp header conforms to the style guide
+ * sound_play: update scripts to allow volume to be set
+ * sound_play: updated tests to include volume changes
+ * sound_play: add ability to specify volume at which to play sounds
+   Also changed error to warning as per todo
+ * sound_play: fix indentation and comment inconsistencies
+ * sound_play: remove some raw prints cluttering output
+ * sound_play: added queue_size to SoundClient init
+   Should prevent warning being displayed whenever the client is created.
+   Fixes issue #43
+ * add simple-actionlib functionality to sound_play
+ * sound_play: Added functions to play files relative to a package path
+ * Update maintainer email
+ * Contributors: Alexis Ballier, Austin, Daniel Stonier, David V. Lu, Felix Duvallet, Matthias Nieuwenhuisen, Michal Staniaszek, Neowizard, aginika, trainman419
+ 
+ 0.2.11 (2016-02-16)
+ -------------------
+ * Add changelogs
+ * Fix bug in say.py. Fixes `#72 <https://github.com/ros-drivers/audio_common/issues/72>`_
+ * Contributors: trainman419
+ 
+ 0.2.10 (2016-01-21)
+ -------------------
+ * Add changelogs
+ * Issue: The error checks for missing publisher/action client in sendMsg were inverted.
+   The non-blocking brach tested the action client while the blocking branch
+   tested the publisher.
+   Fix: Inverted the blocking boolean for both branchs.
+ * sound_play: Fix build with -DCATKIN_ENABLE_TESTING=OFF.
+   https://bugs.gentoo.org/show_bug.cgi?id=567466
+ * Contributors: Alexis Ballier, Neowizard, trainman419
+ 
+ 0.2.9 (2015-12-02)
+ ------------------
+ * Add changelogs
+ * [soundplay_node] fix resources not being released on dict cleanup
+   This was resulting in the number of sink inputs reaching the maximum threshold,
+   (32 on ubuntu 14.04 with pulseaudio 4.0) after which no more sounds could be
+   played by the node. It would only happen if the rate of sounds being played was
+   slower than the dictionary cleanup.
+ * depend on actionlib.
+ * Introduce unit test to ensure soundclient is started correctly.
+ * Example of using the explicit blocking parameter to override the class setting.
+ * SoundClient can also explicitly specify whether or not to block while playing the sound.
+   Each play/repeat/say/... method can take an option blocking=True|False argument (using **kwargs), which over-rides the class-wide setting.
+   Conflicts:
+   sound_play/src/sound_play/libsoundplay.py
+ * do both in same script.
+ * Added script showing the various blocking/non-blocking ways of using SoundClient.
+ * removed trailing whitespace only
+   Conflicts:
+   sound_play/scripts/say.py
+ * loginfo -> logdebug.
+ * Enable blocking calls inside libsoundplay's SoundClient.
+   This makes use of the actionlib interface provided by soundplay_node, by ensuring SoundClient receives a response before returning.
+   Turn this on by: SoundClient(blocking=true).
+   Conflicts:
+   sound_play/src/sound_play/libsoundplay.py
+ * Use new-style python classes (inherits from object).
+   Conflicts:
+   sound_play/src/sound_play/libsoundplay.py
+ * removed trailing whitespace.
+   Conflicts:
+   sound_play/src/sound_play/libsoundplay.py
+ * Revert "Set the volume in each of the sound_play actionlib tests."
+   This reverts commit 55ab08c882809fc6d21affb849a7dac9f1901867.
+   Indigo-devel does not have the volume API
+ * Set the volume in each of the sound_play actionlib tests.
+   This makes the script actually play the sounds it requests.
+ * Specify queue size explicitly.
+   Removed warning message printed each time soundplay_node was started.
+ * remove trailing whitespace only.
+ * Fix wiki links
+ * Contributors: David V. Lu, Felix Duvallet, Michal Staniaszek, trainman419
+ 
+ 0.2.8 (2015-10-02)
+ ------------------
+ * Fix test target name collision. Fixes `#49 <https://github.com/ros-drivers/audio_common/issues/49>`_
+ * sound_play: remove some raw prints cluttering output
+ * sound_play: added queue_size to SoundClient init
+   Should prevent warning being displayed whenever the client is created.
+   Fixes issue `#43 <https://github.com/ros-drivers/audio_common/issues/43>`_
+ * add simple-actionlib functionality to sound_play
+ * sound_play: Added functions to play files relative to a package path
+ * Update maintainer email
+ * Contributors: Matthias Nieuwenhuisen, Michal Staniaszek, aginika, trainman419
+ 
+ 0.2.7 (2014-07-25)
+ ------------------
+ 
+ 0.2.6 (2014-02-26)
+ ------------------
+ * Fix path resolution in python soundplay lib.
+ * now importing roslib. closes `#33 <https://github.com/ros-drivers/audio_common/issues/33>`_
+ * Contributors: Piyush Khandelwal, trainman419
+ 
+ 0.2.5 (2014-01-23)
+ ------------------
+ * "0.2.5"
+ * Install sounds. Fixes `#29 <https://github.com/ros-drivers/audio_common/issues/29>`_.
+ * install sound_play.h and export include folder
+ * Contributors: ahendrix, trainman419, v4hn
+ 
+ 0.2.4 (2013-09-10)
+ ------------------
+ * Fix cmake ordering.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.3 (2013-07-15)
+ ------------------
+ * Fix python.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.2 (2013-04-10)
+ ------------------
+ * Actually add proper dependency on message generation.
+ * Reorder CMakeLists.txt.
+ * Contributors: Austin Hendrix
+ 
+ 0.2.1 (2013-04-08 13:59)
+ ------------------------
+ 
+ 0.2.0 (2013-04-08 13:49)
+ ------------------------
+ * Finish catkinizing audio_common.
+ * Start catkinizing sound_play.
+ * Fix typo in package.xml
+ * Versions and more URLs.
+ * Convert manifests to package.xml
+ * Ditch old makefiles.
+ * Use festival default voice from libsoundplay.
+ * Set myself as the maintainer.
+ * Fix filehandle leak and add debug statements.
+ * Updates manifest
+ * Updated manifests for rodep2
+ * Fixed sound_play
+ * Added test wave
+ * Cleaned up the test script
+ * Added default voice to say command
+ * Updated the gstreamer rosdeps
+ * Removed comment
+ * Added diagnostic_msgs to sound_play
+ * Added a rosdep.yaml file
+ * Added ability to use different festival voices
+ * Added exit(1) when import of pygame fails. This makes the error message easier to notice.
+ * Added Ubuntu platform tags to manifest
+ * Added a link to the troubleshooting wiki page in the diagnostic message as requested by `#4070 <https://github.com/ros-drivers/audio_common/issues/4070>`_.
+ * Took out the deprecated API.
+ * Sound play now publishes header timestamp in message. `#3822 <https://github.com/ros-drivers/audio_common/issues/3822>`_
+ * Cleaned up temp file generation when doing text to speach. Now uses the tempfile module.
+ * Adding missing export of headers for sound_play C++ API
+ * Changing node name for sound play diagnostics, `#3599 <https://github.com/ros-drivers/audio_common/issues/3599>`_
+ * Added test.launch to run sound server and a test client.
+ * Remove use of deprecated rosbuild macros
+ * Replaced review tag with standardized message
+ * Updated review status
+ * Added a launch file to start soundplay_node.py
+ * Made the sound_play client libraries be more explicit about what to do when the node is not running.
+ * Updated manifest description
+ * Updated copyright year
+ * fixed XML typo
+ * updated package description
+ * Added a copyright message.
+ * Removed debugging message from sound_play node.
+ * Added tests for new sound_play python API and fixed a few bugs.
+ * Fixed missing self arguments in sound_play libsoundplay.py
+ * Upgraded the python sound_play API
+ * Converted non-camelCase methods to camelCase in sound_play C++ API
+ * Changed Lock to RLock to fix `#2801 <https://github.com/ros-drivers/audio_common/issues/2801>`_
+ * Made the deprecation of SoundHandle into a warning.
+ * Added debug messages
+ * Updated soundplay_node to publish diagnostics and increased the number of active channels.
+ * Added diagnostic_msgs dependency to sound_play
+ * sound_play: Renamed SoundHandle to SoundClient. Added Sound-centric C++ API. Changed byte to int8 in msg file. Updated documentation.
+ * migration part 1
+ * Contributors: Austin Hendrix, Nate Koenig, blaise, blaisegassend, eitan, gerkey, kwc, nkoenig, watts, wheeler
diff -crB --new-file audio_common/audio_common/sound_play/CMakeLists.txt audio_common_patched/audio_common/sound_play/CMakeLists.txt
*** audio_common/audio_common/sound_play/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/CMakeLists.txt	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,44 ----
+ cmake_minimum_required(VERSION 2.8.3)
+ 
+ project(sound_play)
+ 
+ find_package(catkin REQUIRED COMPONENTS message_generation roscpp actionlib_msgs)
+ 
+ add_action_files(DIRECTORY action FILES SoundRequest.action)
+ add_message_files(DIRECTORY msg FILES SoundRequest.msg)
+ 
+ include_directories(include ${catkin_INCLUDE_DIRS})
+ 
+ catkin_python_setup()
+ 
+ generate_messages(DEPENDENCIES actionlib_msgs)
+ 
+ catkin_package(CATKIN_DEPENDS message_runtime actionlib_msgs
+                INCLUDE_DIRS include)
+ 
+ if(CATKIN_ENABLE_TESTING)
+     catkin_add_nosetests(scripts/test)
+ 
+     add_subdirectory(test)
+ endif()
+ 
+ install(PROGRAMS
+    scripts/playbuiltin.py
+    scripts/play.py
+    scripts/say.py
+    scripts/shutup.py
+    scripts/soundplay_node.py
+    scripts/test.py
+    scripts/test_actionlib_client.py
+       DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
+ 
+ install(FILES
+    soundplay_node.launch
+    test.launch
+       DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
+ 
+ install(DIRECTORY include/${PROJECT_NAME}/
+         DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})
+ 
+ install(DIRECTORY sounds
+         DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
diff -crB --new-file audio_common/audio_common/sound_play/include/sound_play/sound_play.h audio_common_patched/audio_common/sound_play/include/sound_play/sound_play.h
*** audio_common/audio_common/sound_play/include/sound_play/sound_play.h	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/include/sound_play/sound_play.h	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,410 ----
+ /*
+  ***********************************************************
+  * Software License Agreement (BSD License)
+  *
+  *  Copyright (c) 2009, Willow Garage, Inc.
+  *  All rights reserved.
+  *
+  *  Redistribution and use in source and binary forms, with or without
+  *  modification, are permitted provided that the following conditions
+  *  are met:
+  *
+  *   * Redistributions of source code must retain the above copyright
+  *     notice, this list of conditions and the following disclaimer.
+  *   * Redistributions in binary form must reproduce the above
+  *     copyright notice, this list of conditions and the following
+  *     disclaimer in the documentation and/or other materials provided
+  *     with the distribution.
+  *   * Neither the name of the Willow Garage nor the names of its
+  *     contributors may be used to endorse or promote products derived
+  *     from this software without specific prior written permission.
+  *
+  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+  *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+  *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+  *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+  *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+  *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+  *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+  *  POSSIBILITY OF SUCH DAMAGE.
+  ***********************************************************
+  */
+ 
+ #ifndef __SOUND_PLAY__SOUND_PLAY__H__
+ #define __SOUND_PLAY__SOUND_PLAY__H__
+ 
+ #include <string>
+ #include <ros/ros.h>
+ #include <ros/node_handle.h>
+ #include <sound_play/SoundRequest.h>
+ #include <boost/thread.hpp>
+ 
+ namespace sound_play
+ {
+ 
+ /** \brief Class that publishes messages to the sound_play node.
+  *
+  * This class is a helper class for communicating with the sound_play node
+  * via the \ref sound_play::SoundRequest message. It has two ways of being used:
+  *
+  * - It can create Sound classes that represent a particular sound which
+  *   can be played, repeated or stopped.
+  *
+  * - It provides methods for each way in which the sound_play::SoundRequest
+  *   message can be invoked.
+  */
+ 
+ class SoundClient
+ {
+ public:
+   class Sound
+   {
+     friend class SoundClient;
+   private:
+     int snd_;
+     float vol_;
+     std::string arg_;
+     std::string arg2_;
+     SoundClient *client_;
+ 
+     Sound(SoundClient *sc, int snd, const std::string &arg, const std::string arg2 = std::string(), const float vol = 1.0f)
+     {
+       client_ = sc;
+       snd_ = snd;
+       arg_ = arg;
+       arg2_ = arg2;
+       vol_ = vol;
+     }
+ 
+   public:
+     /** \brief Play the Sound.
+      *
+      * This method causes the Sound to be played once.
+      */
+     void play()
+     {
+       client_->sendMsg(snd_, SoundRequest::PLAY_ONCE, arg_, arg2_, vol_);
+     }
+ 
+     /** \brief Play the Sound repeatedly.
+      *
+      * This method causes the Sound to be played repeatedly until stop() is
+      * called.
+      */
+     void repeat()
+     {
+       client_->sendMsg(snd_, SoundRequest::PLAY_START, arg_, arg2_, vol_);
+     }
+ 
+     /** \brief Stop Sound playback.
+      *
+      * This method causes the Sound to stop playing.
+      */
+     void stop()
+     {
+       client_->sendMsg(snd_, SoundRequest::PLAY_STOP, arg_, arg2_, vol_);
+     }
+   };
+ 
+   /** \brief Create a SoundClient that publishes on the given topic
+    *
+    * Creates a SoundClient that publishes to the given topic relative to the
+    * given NodeHandle.
+    *
+    * \param nh Node handle to use when creating the topic.
+    *
+    * \param topic Topic to publish to.
+    */
+   SoundClient(ros::NodeHandle &nh, const std::string &topic)
+   {
+     init(nh, topic);
+   }
+ 
+   /** \brief Create a SoundClient with the default topic
+    *
+    * Creates a SoundClient that publishes to "robotsound".
+    */
+   SoundClient()
+   {
+     init(ros::NodeHandle(), "robotsound");
+   }
+ 
+   /** \brief Create a voice Sound.
+    *
+    * Creates a Sound corresponding to saying the indicated text.
+    *
+    * \param s Text to say
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   Sound voiceSound(const std::string &s, float volume = 1.0f)
+   {
+     return Sound(this, SoundRequest::SAY, s, "", volume);
+   }
+ 
+   /** \brief Create a wave Sound.
+    *
+    * Creates a Sound corresponding to indicated file.
+    *
+    * \param s File to play. Should be an absolute path that exists on the
+    * machine running the sound_play node.
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   Sound waveSound(const std::string &s, float volume = 1.0f)
+   {
+     return Sound(this, SoundRequest::PLAY_FILE, s, "", volume);
+   }
+ 
+   /** \brief Create a wave Sound from a package.
+    *
+    * Creates a Sound corresponding to indicated file.
+    *
+    * \param p Package containing the sound file.
+    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
+    * on the computer on which the sound_play node is running
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   Sound waveSoundFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
+   {
+     return Sound(this, SoundRequest::PLAY_FILE, s, p, volume);
+   }
+ 
+   /** \brief Create a builtin Sound.
+    *
+    * Creates a Sound corresponding to indicated builtin wave.
+    *
+    * \param id Identifier of the sound to play.
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   Sound builtinSound(int id, float volume = 1.0f)
+   {
+     return Sound(this, id, "", "", volume);
+   }
+ 
+   /** \brief Say a string
+    *
+    * Send a string to be said by the sound_node. The vocalization can be
+    * stopped using stopSaying or stopAll.
+    *
+    * \param s String to say
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void say(const std::string &s, const std::string &voice="voice_kal_diphone", float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_ONCE, s, voice, volume);
+   }
+ 
+   /** \brief Say a string repeatedly
+    *
+    * The string is said repeatedly until stopSaying or stopAll is used.
+    *
+    * \param s String to say repeatedly
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void repeat(const std::string &s, float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_START, s, "", volume);
+   }
+ 
+   /** \brief Stop saying a string
+    *
+    * Stops saying a string that was previously started by say or repeat. The
+    * argument indicates which string to stop saying.
+    *
+    * \param s Same string as in the say or repeat command
+    */
+   void stopSaying(const std::string &s)
+   {
+     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_STOP, s, "");
+   }
+ 
+   /** \brief Plays a WAV or OGG file
+    *
+    * Plays a WAV or OGG file once. The playback can be stopped by stopWave or
+    * stopAll.
+    *
+    * \param s Filename of the WAV or OGG file. Must be an absolute path valid
+    * on the computer on which the sound_play node is running
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void playWave(const std::string &s, float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_ONCE, s, "", volume);
+   }
+ 
+   /** \brief Plays a WAV or OGG file repeatedly
+    *
+    * Plays a WAV or OGG file repeatedly until stopWave or stopAll is used.
+    *
+    * \param s Filename of the WAV or OGG file. Must be an absolute path valid
+    * on the computer on which the sound_play node is running.
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void startWave(const std::string &s, float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_START, s, "", volume);
+   }
+ 
+   /** \brief Stop playing a WAV or OGG file
+    *
+    * Stops playing a file that was previously started by playWave or
+    * startWave.
+    *
+    * \param s Same string as in the playWave or startWave command
+    */
+   void stopWave(const std::string &s)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_STOP, s);
+   }
+ 
+   /** \brief Plays a WAV or OGG file from a package
+    *
+    * Plays a WAV or OGG file once. The playback can be stopped by stopWaveFromPkg or
+    * stopAll.
+    *
+    * \param p Package name containing the sound file.
+    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
+    * on the computer on which the sound_play node is running
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void playWaveFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_ONCE, s, p, volume);
+   }
+ 
+   /** \brief Plays a WAV or OGG file repeatedly
+    *
+    * Plays a WAV or OGG file repeatedly until stopWaveFromPkg or stopAll is used.
+    *
+    * \param p Package name containing the sound file.
+    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
+    * on the computer on which the sound_play node is running
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void startWaveFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_START, s, p, volume);
+   }
+ 
+   /** \brief Stop playing a WAV or OGG file
+    *
+    * Stops playing a file that was previously started by playWaveFromPkg or
+    * startWaveFromPkg.
+    *
+    * \param p Package name containing the sound file.
+    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
+    * on the computer on which the sound_play node is running
+    */
+   void stopWaveFromPkg(const std::string &p, const std::string &s)
+   {
+     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_STOP, s, p);
+   }
+ 
+   /** \brief Play a buildin sound
+    *
+    * Starts playing one of the built-in sounds. built-ing sounds are documented
+    * in \ref SoundRequest.msg. Playback can be stopped by stopAll.
+    *
+    * \param sound Identifier of the sound to play.
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void play(int sound, float volume = 1.0f)
+   {
+     sendMsg(sound, SoundRequest::PLAY_ONCE, "", "", volume);
+   }
+ 
+   /** \brief Play a buildin sound repeatedly
+    *
+    * Starts playing one of the built-in sounds repeatedly until stop or stopAll 
+    * is used. Built-in sounds are documented in \ref SoundRequest.msg.
+    *
+    * \param sound Identifier of the sound to play.
+    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
+    */
+   void start(int sound, float volume = 1.0f)
+   {
+     sendMsg(sound, SoundRequest::PLAY_START, "", "", volume); 
+   }
+ 
+   /** \brief Stop playing a built-in sound
+    *
+    * Stops playing a built-in sound started with play or start.
+    *
+    * \param sound Same sound that was used to start playback.
+    */
+   void stop(int sound)
+   {
+     sendMsg(sound, SoundRequest::PLAY_STOP);
+   }
+ 
+   /** \brief Stop all currently playing sounds
+    *
+    * This method stops all speech, wave file, and built-in sound playback.
+    */
+   void stopAll()
+   {
+     stop(SoundRequest::ALL);
+   }
+ 
+   /** \brief Turns warning messages on or off.
+    *
+    * If a message is sent when no node is subscribed to the topic, a
+    * warning message is printed. This method can be used to enable or
+    * disable warnings.
+    *
+    * \param state True to turn off messages, false to turn them on.
+    */
+   void setQuiet(bool state)
+   {
+     quiet_ = state;
+   }
+ 
+ private:
+   void init(ros::NodeHandle nh, const std::string &topic)
+   {
+     nh_ = nh;
+     pub_ = nh.advertise<sound_play::SoundRequest>(topic, 5);
+     quiet_ = false;
+   }
+ 
+   void sendMsg(int snd, int cmd, const std::string &s = "", const std::string &arg2 = "", const float &vol = 1.0f)
+   {
+     boost::mutex::scoped_lock lock(mutex_);
+ 
+     if (!nh_.ok())
+       return;
+ 
+     SoundRequest msg;
+     msg.sound = snd;
+     msg.command = cmd;
+     msg.arg = s;
+     msg.arg2 = arg2;
+ 
+     // ensure volume is in the correct range
+     if (vol < 0)
+       msg.volume = 0;
+     else if (vol > 1.0)
+       msg.volume = 1.0f;
+     else
+       msg.volume = vol;
+ 
+     pub_.publish(msg);
+ 
+     if (pub_.getNumSubscribers() == 0 && !quiet_)
+       ROS_WARN("Sound command issued, but no node is subscribed to the topic. Perhaps you forgot to run soundplay_node.py");
+   }
+ 
+   bool quiet_;
+   ros::NodeHandle nh_;
+   ros::Publisher pub_;
+   boost::mutex mutex_;
+ };
+ 
+ typedef SoundClient::Sound Sound;
+ 
+ };
+ 
+ #endif
diff -crB --new-file audio_common/audio_common/sound_play/mainpage.dox audio_common_patched/audio_common/sound_play/mainpage.dox
*** audio_common/audio_common/sound_play/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/mainpage.dox	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,23 ----
+ /**
+ 
+ \mainpage
+ \htmlinclude manifest.html
+ 
+ The \b sound_play package provides a way to say strings,
+ play WAV or OGG files and to play builtin sounds. Documentation for the
+ package can be found here at http://www.ros.org/wiki/sound_play 
+ 
+ Multiple sounds can be played concurrently (up to 4 currently because of
+ limitations in pygame).
+ 
+ Python and C++ client classes are provide for ease of use:
+ 
+ - sound_play::SoundClient and sound_play::SoundClient::Sound for C++
+ - libsoundplay::SoundClient and libsoundplay::SoundClient::Sound for Python
+ 
+ Example uses are in:
+ 
+ - test.cpp
+ - test.py
+ 
+ */
diff -crB --new-file audio_common/audio_common/sound_play/msg/SoundRequest.msg audio_common_patched/audio_common/sound_play/msg/SoundRequest.msg
*** audio_common/audio_common/sound_play/msg/SoundRequest.msg	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/msg/SoundRequest.msg	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,30 ----
+ # IMPORTANT: You should never have to generate this message yourself.
+ # Use the sound_play::SoundClient C++ helper or the
+ # sound_play.libsoundplay.SoundClient Python helper.
+ 
+ # Sounds
+ int8 BACKINGUP = 1
+ int8 NEEDS_UNPLUGGING = 2
+ int8 NEEDS_PLUGGING = 3
+ int8 NEEDS_UNPLUGGING_BADLY = 4
+ int8 NEEDS_PLUGGING_BADLY = 5
+ 
+ # Sound identifiers that have special meaning
+ int8 ALL = -1 # Only legal with PLAY_STOP
+ int8 PLAY_FILE = -2
+ int8 SAY = -3
+ 
+ int8 sound # Selects which sound to play (see above)
+ 
+ # Commands
+ int8 PLAY_STOP = 0 # Stop this sound from playing
+ int8 PLAY_ONCE = 1 # Play the sound once
+ int8 PLAY_START = 2 # Play the sound in a loop until a stop request occurs
+ 
+ int8 command # Indicates what to do with the sound
+ 
+ # Volume at which to play the sound, with 0 as mute and 1.0 as 100%.
+ float32 volume
+ 
+ string arg # file name or text to say
+ string arg2 # other arguments
diff -crB --new-file audio_common/audio_common/sound_play/package.xml audio_common_patched/audio_common/sound_play/package.xml
*** audio_common/audio_common/sound_play/package.xml	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/package.xml	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,43 ----
+ <package>
+    <name>sound_play</name>
+    <version>0.3.3</version>
+    <description>
+       sound_play provides a ROS node that translates commands on a ROS topic (<tt>robotsound</tt>) into sounds. The node supports built-in sounds, playing OGG/WAV files, and doing speech synthesis via festival. C++ and Python bindings allow this node to be used without understanding the details of the message format, allowing faster development and resilience to message format changes.
+    </description>
+    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
+    <author>Blaise Gassend</author>
+    <license>BSD</license>
+    <url type="website">http://ros.org/wiki/sound_play</url>
+    <url type="repository">https://github.com/ros-drivers/audio_common</url>
+    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
+ 
+    <buildtool_depend>catkin</buildtool_depend>
+ 
+    <build_depend>roscpp</build_depend>
+    <build_depend>roslib</build_depend>
+    <build_depend>actionlib_msgs</build_depend>
+    <build_depend>actionlib</build_depend>
+    <build_depend>audio_common_msgs</build_depend>
+    <build_depend>diagnostic_msgs</build_depend>
+    <build_depend>message_generation</build_depend>
+ 
+    <run_depend>roscpp</run_depend>
+    <run_depend>roslib</run_depend>
+    <run_depend>actionlib_msgs</run_depend>
+    <run_depend>audio_common_msgs</run_depend>
+    <run_depend>diagnostic_msgs</run_depend>
+ 
+    <run_depend>python-gi</run_depend>
+    <run_depend>gstreamer1.0</run_depend>
+    <run_depend>gstreamer1.0-plugins-base</run_depend>
+    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
+    <run_depend>gstreamer1.0-plugins-good</run_depend>
+ 
+    <run_depend>rospy</run_depend>
+    <run_depend>festival</run_depend>
+    <run_depend>message_runtime</run_depend>
+ 
+    <export>
+       <cpp cflags="-I${prefix}/include -I${prefix}/msg/cpp" />
+    </export>
+ </package>
diff -crB --new-file audio_common/audio_common/sound_play/README.md audio_common_patched/audio_common/sound_play/README.md
*** audio_common/audio_common/sound_play/README.md	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/README.md	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,67 ----
+ sound_play
+ =========
+ 
+ ## Dependencies
+ 
+ - python-pygame
+ - festival
+ - festvox-don
+ - alsa-base
+ - alsa-tools
+ 
+ ## Checking that the speaker/sound card is recognized by the kernel
+ 
+ `cat /proc/asound/cards`
+ 
+ Your card should be in the list. Make note of the number in front of the
+ card, it will be used to tell alsa where to play sound from.
+ 
+ If your sound device does not show up, your kernel may not support it, or
+ the module may not be loaded. For usb speakers, you may want to try:
+ 
+ `modprobe snd-usb-audio`
+ 
+ (not sure if this list is exhaustive)
+ 
+ ## Telling alsa which sound card/speaker to use
+ 
+ Run (replace 75 with the number of the sound device to use):
+ 
+ `asoundconf set-default-card 75`
+ 
+ This will create .asoundrc.asoundconf in your home directory.
+ To make alsa use these settings, add the following line to `~/.asoundrc`
+ 
+ `include ".asoundrc.asoundconf"`
+ 
+ To set this default to all users, copy this to the system-wide alsa
+ configuration file:
+ 
+ `mv ~/.asoundrc.asoundconf /etc/asound.conf`
+ 
+ ## Getting started
+ 
+ Start the sound play node, and have a look at the scripts in the scripts
+ directory that exercise the node's functionality. 
+ 
+ ## Specify Device via ROS Param
+ 
+ Besides setting default device as system wide settings, you can also specify audio device via `rosparam`:
+ 
+ ``` xml
+ <launch>
+   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py">
+     <param name="device" value="hw:1,0" />
+   </node>
+ </launch>
+ ```
+ 
+ or simply run: `rosrun sound_play soundplay_node.py _device:="hw:1,0"`
+ 
+ In the launch file above, `~device` parameter is set to `hw:1,0`, which tells `soundplay_node` to use audio device No. `0` connected to audio card No.`1`.
+ To find card/device number which you want to use, execute:
+ 
+ ``` bash
+ sudo aplay -l
+ ```
+ 
diff -crB --new-file audio_common/audio_common/sound_play/scripts/playbuiltin.py audio_common_patched/audio_common/sound_play/scripts/playbuiltin.py
*** audio_common/audio_common/sound_play/scripts/playbuiltin.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/playbuiltin.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,65 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ import sys
+ 
+ if __name__ == '__main__':
+     if len(sys.argv) < 2 or len(sys.argv) > 3 or sys.argv[1] == '--help':
+         print 'Usage: %s <sound_id> [volume]'%sys.argv[0]
+         print
+         print 'Plays one of the built-in sounds based on its integer ID. Look at the sound_play/SoundRequest message definition for IDs.\n The (optional) volume parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
+         exit(1)
+ 
+     # Import here so that usage is fast.
+     import rospy
+     from sound_play.msg import SoundRequest
+     from sound_play.libsoundplay import SoundClient
+     
+     rospy.init_node('play', anonymous = True)
+     
+     soundhandle = SoundClient()
+     rospy.sleep(1)
+     
+     num = int(sys.argv[1])
+     volume = float(sys.argv[2]) if len(sys.argv) == 3 else 1.0
+ 
+     print 'Playing sound %i.'%num
+ 
+     soundhandle.play(num, volume)
+ 
+     rospy.sleep(1)
diff -crB --new-file audio_common/audio_common/sound_play/scripts/playpackage.py audio_common_patched/audio_common/sound_play/scripts/playpackage.py
*** audio_common/audio_common/sound_play/scripts/playpackage.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/playpackage.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,62 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Matthias Nieuwenhuisen, Blaise Gassend
+ 
+ 
+ import sys
+ 
+ if __name__ == '__main__':
+     if len(sys.argv) < 3 or len(sys.argv) > 4 or sys.argv[1] == '--help':
+         print 'Usage: %s package sound_to_play.(ogg|wav) [volume]'%sys.argv[0]
+         print
+         print 'Plays an .OGG or .WAV file. The path to the file should be relative to the package, and be valid on the computer on which sound_play is running. \n The (optional) volume parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
+         exit(1)
+     
+     # Import after printing usage for speed.
+     import rospy
+     from sound_play.msg import SoundRequest
+     from sound_play.libsoundplay import SoundClient
+ 
+     rospy.init_node('play', anonymous = True)
+     soundhandle = SoundClient()
+ 
+     volume = float(sys.argv[3]) if len(sys.argv) == 4 else 1.0
+     
+     rospy.sleep(1)
+     print 'Playing "%s" from pkg "%s".'%(sys.argv[2], sys.argv[1])
+     soundhandle.playWaveFromPkg(sys.argv[1], sys.argv[2], volume)
+     rospy.sleep(1)
diff -crB --new-file audio_common/audio_common/sound_play/scripts/play.py audio_common_patched/audio_common/sound_play/scripts/play.py
*** audio_common/audio_common/sound_play/scripts/play.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/play.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,63 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ 
+ import sys
+ 
+ if __name__ == '__main__':
+     if len(sys.argv) < 2 or len(sys.argv) > 3 or sys.argv[1] == '--help':
+         print 'Usage: %s sound_to_play.(ogg|wav) [volume]'%sys.argv[0]
+         print
+         print 'Plays an .OGG or .WAV file. The path to the file should be absolute, and be valid on the computer on which sound_play is running.\n The (optional) second parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
+         exit(1)
+ 
+     # Import after printing usage for speed.
+     import rospy
+     from sound_play.msg import SoundRequest
+     from sound_play.libsoundplay import SoundClient
+ 
+     rospy.init_node('play', anonymous = True)
+     soundhandle = SoundClient()
+ 
+     rospy.sleep(1)
+     print 'Playing "%s".'%sys.argv[1]
+ 
+     volume = float(sys.argv[2]) if len(sys.argv) == 3 else 1.0
+         
+     soundhandle.playWave(sys.argv[1], volume)
+     rospy.sleep(1)
diff -crB --new-file audio_common/audio_common/sound_play/scripts/say.py audio_common_patched/audio_common/sound_play/scripts/say.py
*** audio_common/audio_common/sound_play/scripts/say.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/say.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,83 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ 
+ import sys
+ 
+ if __name__ == '__main__':
+     if len(sys.argv) > 1 and sys.argv[1] == '--help':
+         print 'Usage: %s \'String to say.\''%sys.argv[0]
+         print '       %s < file_to_say.txt'%sys.argv[0]
+         print
+         print 'Says a string. For a string on the command line, you must use quotes as'
+         print 'appropriate. For a string on standard input, the command will wait for'
+         print 'EOF before saying anything.'
+         exit(-1)
+ 
+     # Import after printing usage for speed.
+     import rospy
+     from sound_play.msg import SoundRequest
+     from sound_play.libsoundplay import SoundClient
+ 
+     if len(sys.argv) == 1:
+         print 'Awaiting something to say on standard input.'
+ 
+     # Ordered this way to minimize wait time.
+     rospy.init_node('say', anonymous = True)
+     soundhandle = SoundClient()
+     rospy.sleep(1)
+ 
+     voice = 'voice_kal_diphone'
+     volume = 1.0
+ 
+     if len(sys.argv) == 1:
+         s = sys.stdin.read()
+     else:
+         s = sys.argv[1]
+ 
+         if len(sys.argv) > 2:
+             voice = sys.argv[2]
+         if len(sys.argv) > 3:
+             volume = float(sys.argv[3])
+ 
+     print 'Saying: %s' % s
+     print 'Voice: %s' % voice
+     print 'Volume: %s' % volume
+ 
+     soundhandle.say(s, voice, volume)
+     rospy.sleep(1)
diff -crB --new-file audio_common/audio_common/sound_play/scripts/shutup.py audio_common_patched/audio_common/sound_play/scripts/shutup.py
*** audio_common/audio_common/sound_play/scripts/shutup.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/shutup.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,59 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ import rospy
+ from sound_play.msg import SoundRequest
+ from sound_play.libsoundplay import SoundClient
+ 
+ if __name__ == '__main__':
+     rospy.init_node('shutup', anonymous = True)
+     
+     soundhandle = SoundClient()
+     rospy.sleep(0.5) # let ROS get started...
+ 
+     print "Sending stopAll commande every 100 ms."
+     print "Note: This will not prevent a node that is continuing to issue commands"
+     print "from producing sound."
+     print "Press Ctrl+C to exit."
+ 
+     while not rospy.is_shutdown():
+         soundhandle.stopAll()
+         try:
+             rospy.sleep(.1)
+         except:
+             pass
diff -crB --new-file audio_common/audio_common/sound_play/scripts/soundclient_example.py audio_common_patched/audio_common/sound_play/scripts/soundclient_example.py
*** audio_common/audio_common/sound_play/scripts/soundclient_example.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/soundclient_example.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,91 ----
+ #!/usr/bin/env python
+ 
+ """
+ Simple example showing how to use the SoundClient provided by libsoundplay,
+ in blocking, non-blocking, and explicit usage.
+ """
+ 
+ import rospy
+ from sound_play.libsoundplay import SoundClient
+ from sound_play.msg import SoundRequest
+ 
+ 
+ def play_explicit():
+     rospy.loginfo('Example: SoundClient play methods can take in an explicit'
+                   ' blocking parameter')
+     soundhandle = SoundClient()  # blocking = False by default
+     rospy.sleep(0.5)  # Ensure publisher connection is successful.
+ 
+     sound_beep = soundhandle.waveSound("say-beep.wav", volume=0.5)
+     # Play the same sound twice, once blocking and once not. The first call is
+     # blocking (explicitly specified).
+     sound_beep.play(blocking=True)
+     # This call is not blocking (uses the SoundClient's setting).
+     sound_beep.play()
+     rospy.sleep(0.5)  # Let sound complete.
+ 
+     # Play a blocking sound.
+     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING, blocking=True)
+ 
+     # Create a new SoundClient where the default behavior *is* to block.
+     soundhandle = SoundClient(blocking=True)
+     soundhandle.say('Say-ing stuff while block-ing')
+     soundhandle.say('Say-ing stuff without block-ing', blocking=False)
+     rospy.sleep(1)
+ 
+ 
+ def play_blocking():
+     """
+     Play various sounds, blocking until each is completed before going to the
+     next.
+     """
+     rospy.loginfo('Example: Playing sounds in *blocking* mode.')
+     soundhandle = SoundClient(blocking=True)
+ 
+     rospy.loginfo('Playing say-beep at full volume.')
+     soundhandle.playWave('say-beep.wav')
+ 
+     rospy.loginfo('Playing say-beep at volume 0.3.')
+     soundhandle.playWave('say-beep.wav', volume=0.3)
+ 
+     rospy.loginfo('Playing sound for NEEDS_PLUGGING.')
+     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
+ 
+     rospy.loginfo('Speaking some long string.')
+     soundhandle.say('It was the best of times, it was the worst of times.')
+ 
+ 
+ def play_nonblocking():
+     """
+     Play the same sounds with manual pauses between them.
+     """
+     rospy.loginfo('Example: Playing sounds in *non-blocking* mode.')
+     # NOTE: you must sleep at the beginning to let the SoundClient publisher
+     # establish a connection to the soundplay_node.
+     soundhandle = SoundClient(blocking=False)
+     rospy.sleep(1)
+ 
+     # In the non-blocking version you need to sleep between calls.
+     rospy.loginfo('Playing say-beep at full volume.')
+     soundhandle.playWave('say-beep.wav')
+     rospy.sleep(1)
+ 
+     rospy.loginfo('Playing say-beep at volume 0.3.')
+     soundhandle.playWave('say-beep.wav', volume=0.3)
+     rospy.sleep(1)
+ 
+     rospy.loginfo('Playing sound for NEEDS_PLUGGING.')
+     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
+     rospy.sleep(1)
+ 
+     rospy.loginfo('Speaking some long string.')
+     soundhandle.say('It was the best of times, it was the worst of times.')
+     # Note we will return before the string has finished playing.
+ 
+ 
+ if __name__ == '__main__':
+     rospy.init_node('soundclient_example', anonymous=False)
+     play_explicit()
+     play_blocking()
+     play_nonblocking()
+     rospy.loginfo('Finished')
diff -crB --new-file audio_common/audio_common/sound_play/scripts/soundplay_node.py audio_common_patched/audio_common/sound_play/scripts/soundplay_node.py
*** audio_common/audio_common/sound_play/scripts/soundplay_node.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/soundplay_node.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,468 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ import roslib
+ import rospy
+ import threading
+ import os
+ import logging
+ import sys
+ import traceback
+ import tempfile
+ from diagnostic_msgs.msg import DiagnosticStatus, KeyValue, DiagnosticArray
+ from sound_play.msg import SoundRequest, SoundRequestAction, SoundRequestResult, SoundRequestFeedback
+ import actionlib
+ 
+ try:
+     import gi
+     gi.require_version('Gst', '1.0')
+     from gi.repository import Gst as Gst
+ except:
+     str="""
+ **************************************************************
+ Error opening pygst. Is gstreamer installed?
+ **************************************************************
+ """
+     rospy.logfatal(str)
+     print str
+     exit(1)
+ 
+ def sleep(t):
+     try:
+         rospy.sleep(t)
+     except:
+         pass
+ 
+ 
+ class soundtype:
+     STOPPED = 0
+     LOOPING = 1
+     COUNTING = 2
+ 
+     def __init__(self, file, device, volume = 1.0):
+         self.lock = threading.RLock()
+         self.state = self.STOPPED
+         self.sound = Gst.ElementFactory.make("playbin",None)
+         if self.sound is None:
+             raise Exception("Could not create sound player")
+ 
+         if device:
+             self.sink = Gst.ElementFactory.make("alsasink", "sink")
+             self.sink.set_property("device", device)
+             self.sound.set_property("audio-sink", self.sink)
+ 
+         if (":" in file):
+             uri = file
+         elif os.path.isfile(file):
+             uri = "file://" + os.path.abspath(file)
+         else:
+           rospy.logerr('Error: URI is invalid: %s'%file)
+ 
+         self.uri = uri
+         self.volume = volume
+         self.sound.set_property('uri', uri)
+         self.sound.set_property("volume",volume)
+         self.staleness = 1
+         self.file = file
+ 
+         self.bus = self.sound.get_bus()
+         self.bus.add_signal_watch()
+         self.bus.connect("message", self.on_stream_end)
+ 
+     def on_stream_end(self, bus, message):
+         if message.type == Gst.MessageType.EOS:
+             self.state = self.STOPPED
+ 
+     def __del__(self):
+         # stop our GST object so that it gets garbage-collected
+         self.stop()
+ 
+     def update(self):
+         self.bus.poll(Gst.MessageType.ERROR, 10)
+ 
+     def loop(self):
+         self.lock.acquire()
+         try:
+             self.staleness = 0
+             if self.state == self.COUNTING:
+                 self.stop()
+ 
+             if self.state == self.STOPPED:
+               self.sound.seek_simple(Gst.Format.TIME, Gst.SeekFlags.FLUSH, 0)
+               self.sound.set_state(Gst.State.PLAYING)
+             self.state = self.LOOPING
+         finally:
+             self.lock.release()
+ 
+     def stop(self):
+         if self.state != self.STOPPED:
+             self.lock.acquire()
+             try:
+                 self.sound.set_state(Gst.State.NULL)
+                 self.state = self.STOPPED
+             finally:
+                 self.lock.release()
+ 
+     def single(self):
+         self.lock.acquire()
+         try:
+             rospy.logdebug("Playing %s"%self.uri)
+             self.staleness = 0
+             if self.state == self.LOOPING:
+                 self.stop()
+ 
+             self.sound.seek_simple(Gst.Format.TIME, Gst.SeekFlags.FLUSH, 0)
+             self.sound.set_state(Gst.State.PLAYING)
+             self.state = self.COUNTING
+         finally:
+             self.lock.release()
+ 
+     def command(self, cmd):
+          if cmd == SoundRequest.PLAY_STOP:
+              self.stop()
+          elif cmd == SoundRequest.PLAY_ONCE:
+              self.single()
+          elif cmd == SoundRequest.PLAY_START:
+              self.loop()
+ 
+     def get_staleness(self):
+         self.lock.acquire()
+         position = 0
+         duration = 0
+         try:
+             position = self.sound.query_position(Gst.Format.TIME)[0]
+             duration = self.sound.query_duration(Gst.Format.TIME)[0]
+         except Exception, e:
+             position = 0
+             duration = 0
+         finally:
+             self.lock.release()
+ 
+         if position != duration:
+             self.staleness = 0
+         else:
+             self.staleness = self.staleness + 1
+         return self.staleness
+ 
+     def get_playing(self):
+         return self.state == self.COUNTING
+ 
+ class soundplay:
+     _feedback = SoundRequestFeedback()
+     _result   = SoundRequestResult()
+ 
+     def stopdict(self,dict):
+         for sound in dict.values():
+             sound.stop()
+ 
+     def stopall(self):
+         self.stopdict(self.builtinsounds)
+         self.stopdict(self.filesounds)
+         self.stopdict(self.voicesounds)
+ 
+     def select_sound(self, data):
+         if data.sound == SoundRequest.PLAY_FILE:
+             if not data.arg2:
+                 if not data.arg in self.filesounds.keys():
+                     rospy.logdebug('command for uncached wave: "%s"'%data.arg)
+                     try:
+                         self.filesounds[data.arg] = soundtype(data.arg, self.device, data.volume)
+                     except:
+                         rospy.logerr('Error setting up to play "%s". Does this file exist on the machine on which sound_play is running?'%data.arg)
+                         return
+                 else:
+                     rospy.logdebug('command for cached wave: "%s"'%data.arg)
+                     if self.filesounds[data.arg].sound.get_property('volume') != data.volume:
+                         rospy.logdebug('volume for cached wave has changed, resetting volume')
+                         self.filesounds[data.arg].sound.set_property('volume', data.volume)
+                 sound = self.filesounds[data.arg]
+             else:
+                 absfilename = os.path.join(roslib.packages.get_pkg_dir(data.arg2), data.arg)
+                 if not absfilename in self.filesounds.keys():
+                     rospy.logdebug('command for uncached wave: "%s"'%absfilename)
+                     try:
+                         self.filesounds[absfilename] = soundtype(absfilename, self.device, data.volume)
+                     except:
+                         rospy.logerr('Error setting up to play "%s" from package "%s". Does this file exist on the machine on which sound_play is running?'%(data.arg, data.arg2))
+                         return
+                 else:
+                     rospy.logdebug('command for cached wave: "%s"'%absfilename)
+                     if self.filesounds[absfilename].sound.get_property('volume') != data.volume:
+                         rospy.logdebug('volume for cached wave has changed, resetting volume')
+                         self.filesounds[absfilename].sound.set_property('volume', data.volume)
+                 sound = self.filesounds[absfilename]
+         elif data.sound == SoundRequest.SAY:
+             print data
+             if not data.arg in self.voicesounds.keys():
+                 rospy.logdebug('command for uncached text: "%s"' % data.arg)
+                 txtfile = tempfile.NamedTemporaryFile(prefix='sound_play', suffix='.txt')
+                 (wavfile,wavfilename) = tempfile.mkstemp(prefix='sound_play', suffix='.wav')
+                 txtfilename=txtfile.name
+                 os.close(wavfile)
+                 voice = data.arg2
+                 try:
+                     txtfile.write(data.arg.decode('UTF-8').encode('ISO-8859-15'))
+                     txtfile.flush()
+                     os.system("text2wave -eval '("+voice+")' "+txtfilename+" -o "+wavfilename)
+                     try:
+                         if os.stat(wavfilename).st_size == 0:
+                             raise OSError # So we hit the same catch block
+                     except OSError:
+                         rospy.logerr('Sound synthesis failed. Is festival installed? Is a festival voice installed? Try running "rosdep satisfy sound_play|sh". Refer to http://wiki.ros.org/sound_play/Troubleshooting')
+                         return
+                     self.voicesounds[data.arg] = soundtype(wavfilename, self.device, data.volume)
+                 finally:
+                     txtfile.close()
+             else:
+                 rospy.logdebug('command for cached text: "%s"'%data.arg)
+                 if self.voicesounds[data.arg].sound.get_property('volume') != data.volume:
+                     rospy.logdebug('volume for cached text has changed, resetting volume')
+                     self.voicesounds[data.arg].sound.set_property('volume', data.volume)
+             sound = self.voicesounds[data.arg]
+         else:
+             rospy.logdebug('command for builtin wave: %i'%data.sound)
+             if data.sound not in self.builtinsounds or (data.sound in self.builtinsounds and data.volume != self.builtinsounds[data.sound].volume):
+                 params = self.builtinsoundparams[data.sound]
+                 volume = data.volume
+                 if params[1] != 1: # use the second param as a scaling for the input volume
+                     volume = (volume + params[1])/2
+                 self.builtinsounds[data.sound] = soundtype(params[0], self.device, volume)
+             sound = self.builtinsounds[data.sound]
+         if sound.staleness != 0 and data.command != SoundRequest.PLAY_STOP:
+             # This sound isn't counted in active_sounds
+             rospy.logdebug("activating %i %s"%(data.sound,data.arg))
+             self.active_sounds = self.active_sounds + 1
+             sound.staleness = 0
+             #                    if self.active_sounds > self.num_channels:
+             #                        mixer.set_num_channels(self.active_sounds)
+             #                        self.num_channels = self.active_sounds
+         return sound
+ 
+     def callback(self,data):
+         if not self.initialized:
+             return
+         self.mutex.acquire()
+         # Force only one sound at a time
+         self.stopall()
+         try:
+             if data.sound == SoundRequest.ALL and data.command == SoundRequest.PLAY_STOP:
+                 self.stopall()
+             else:
+                 sound = self.select_sound(data)
+                 sound.command(data.command)
+         except Exception, e:
+             rospy.logerr('Exception in callback: %s'%str(e))
+             rospy.loginfo(traceback.format_exc())
+         finally:
+             self.mutex.release()
+             rospy.logdebug("done callback")
+ 
+     # Purge sounds that haven't been played in a while.
+     def cleanupdict(self, dict):
+         purgelist = []
+         for (key,sound) in dict.iteritems():
+             try:
+                 staleness = sound.get_staleness()
+             except Exception, e:
+                 rospy.logerr('Exception in cleanupdict for sound (%s): %s'%(str(key),str(e)))
+                 staleness = 100 # Something is wrong. Let's purge and try again.
+             #print "%s %i"%(key, staleness)
+             if staleness >= 10:
+                 purgelist.append(key)
+             if staleness == 0: # Sound is playing
+                 self.active_sounds = self.active_sounds + 1
+         for key in purgelist:
+            rospy.logdebug('Purging %s from cache'%key)
+            dict[key].stop() # clean up resources
+            del dict[key]
+ 
+     def cleanup(self):
+         self.mutex.acquire()
+         try:
+             self.active_sounds = 0
+             self.cleanupdict(self.filesounds)
+             self.cleanupdict(self.voicesounds)
+             self.cleanupdict(self.builtinsounds)
+         except:
+             rospy.loginfo('Exception in cleanup: %s'%sys.exc_info()[0])
+         finally:
+             self.mutex.release()
+ 
+     def diagnostics(self, state):
+         try:
+             da = DiagnosticArray()
+             ds = DiagnosticStatus()
+             ds.name = rospy.get_caller_id().lstrip('/') + ": Node State"
+             if state == 0:
+                 ds.level = DiagnosticStatus.OK
+                 ds.message = "%i sounds playing"%self.active_sounds
+                 ds.values.append(KeyValue("Active sounds", str(self.active_sounds)))
+                 ds.values.append(KeyValue("Allocated sound channels", str(self.num_channels)))
+                 ds.values.append(KeyValue("Buffered builtin sounds", str(len(self.builtinsounds))))
+                 ds.values.append(KeyValue("Buffered wave sounds", str(len(self.filesounds))))
+                 ds.values.append(KeyValue("Buffered voice sounds", str(len(self.voicesounds))))
+             elif state == 1:
+                 ds.level = DiagnosticStatus.WARN
+                 ds.message = "Sound device not open yet."
+             else:
+                 ds.level = DiagnosticStatus.ERROR
+                 ds.message = "Can't open sound device. See http://wiki.ros.org/sound_play/Troubleshooting"
+             da.status.append(ds)
+             da.header.stamp = rospy.get_rostime()
+             self.diagnostic_pub.publish(da)
+         except Exception, e:
+             rospy.loginfo('Exception in diagnostics: %s'%str(e))
+ 
+     def execute_cb(self, data):
+         data = data.sound_request
+         if not self.initialized:
+             return
+         self.mutex.acquire()
+         # Force only one sound at a time
+         self.stopall()
+         try:
+             if data.sound == SoundRequest.ALL and data.command == SoundRequest.PLAY_STOP:
+                 self.stopall()
+             else:
+                 sound = self.select_sound(data)
+                 sound.command(data.command)
+ 
+                 r = rospy.Rate(1)
+                 start_time = rospy.get_rostime()
+                 success = True
+                 while sound.get_playing():
+                     sound.update()
+                     if self._as.is_preempt_requested():
+                         rospy.loginfo('sound_play action: Preempted')
+                         sound.stop()
+                         self._as.set_preempted()
+                         success = False
+                         break
+ 
+                     self._feedback.playing = sound.get_playing()
+                     self._feedback.stamp = rospy.get_rostime() - start_time
+                     self._as.publish_feedback(self._feedback)
+                     r.sleep()
+ 
+                 if success:
+                     self._result.playing = self._feedback.playing
+                     self._result.stamp = self._feedback.stamp
+                     rospy.loginfo('sound_play action: Succeeded')
+                     self._as.set_succeeded(self._result)
+ 
+         except Exception, e:
+             rospy.logerr('Exception in actionlib callback: %s'%str(e))
+             rospy.loginfo(traceback.format_exc())
+         finally:
+             self.mutex.release()
+             rospy.logdebug("done actionlib callback")
+ 
+     def __init__(self):
+         Gst.init(None)
+         rospy.init_node('sound_play')
+         self.device = rospy.get_param("~device", str())
+         self.diagnostic_pub = rospy.Publisher("/diagnostics", DiagnosticArray, queue_size=1)
+         rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
+ 
+         self.builtinsoundparams = {
+                 SoundRequest.BACKINGUP              : (os.path.join(rootdir, 'BACKINGUP.ogg'), 0.1),
+                 SoundRequest.NEEDS_UNPLUGGING       : (os.path.join(rootdir, 'NEEDS_UNPLUGGING.ogg'), 1),
+                 SoundRequest.NEEDS_PLUGGING         : (os.path.join(rootdir, 'NEEDS_PLUGGING.ogg'), 1),
+                 SoundRequest.NEEDS_UNPLUGGING_BADLY : (os.path.join(rootdir, 'NEEDS_UNPLUGGING_BADLY.ogg'), 1),
+                 SoundRequest.NEEDS_PLUGGING_BADLY   : (os.path.join(rootdir, 'NEEDS_PLUGGING_BADLY.ogg'), 1),
+                 }
+ 
+         self.no_error = True
+         self.initialized = False
+         self.active_sounds = 0
+ 
+         self.mutex = threading.Lock()
+         sub = rospy.Subscriber("robotsound", SoundRequest, self.callback)
+         self._as = actionlib.SimpleActionServer('sound_play', SoundRequestAction, execute_cb=self.execute_cb, auto_start = False)
+         self._as.start()
+ 
+         self.mutex.acquire()
+         self.sleep(0.5) # For ros startup race condition
+         self.diagnostics(1)
+ 
+         while not rospy.is_shutdown():
+             while not rospy.is_shutdown():
+                 self.init_vars()
+                 self.no_error = True
+                 self.initialized = True
+                 self.mutex.release()
+                 try:
+                     self.idle_loop()
+                     # Returns after inactive period to test device availability
+                     #print "Exiting idle"
+                 except:
+                     rospy.loginfo('Exception in idle_loop: %s'%sys.exc_info()[0])
+                 finally:
+                     self.mutex.acquire()
+ 
+             self.diagnostics(2)
+         self.mutex.release()
+ 
+     def init_vars(self):
+         self.num_channels = 10
+         self.builtinsounds = {}
+         self.filesounds = {}
+         self.voicesounds = {}
+         self.hotlist = []
+         if not self.initialized:
+             rospy.loginfo('sound_play node is ready to play sound')
+ 
+     def sleep(self, duration):
+         try:
+             rospy.sleep(duration)
+         except rospy.exceptions.ROSInterruptException:
+             pass
+ 
+     def idle_loop(self):
+         self.last_activity_time = rospy.get_time()
+         while (rospy.get_time() - self.last_activity_time < 10 or
+                  len(self.builtinsounds) + len(self.voicesounds) + len(self.filesounds) > 0) \
+                 and not rospy.is_shutdown():
+             #print "idle_loop"
+             self.diagnostics(0)
+             self.sleep(1)
+             self.cleanup()
+         #print "idle_exiting"
+ 
+ if __name__ == '__main__':
+     soundplay()
diff -crB --new-file audio_common/audio_common/sound_play/scripts/test/test_sound_client.py audio_common_patched/audio_common/sound_play/scripts/test/test_sound_client.py
*** audio_common/audio_common/sound_play/scripts/test/test_sound_client.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/test/test_sound_client.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,17 ----
+ #!/usr/bin/env python
+ 
+ import unittest
+ 
+ import rospy
+ import rostest
+ from sound_play.libsoundplay import SoundClient
+ 
+ class TestCase(unittest.TestCase):
+     def test_soundclient_constructor(self):
+         s = SoundClient()
+         self.assertIsNotNone(s)
+ 
+ if __name__ == '__main__':
+     rostest.rosrun('sound_play', 'test_sound_client', TestCase)
+ 
+ __author__ = 'Felix Duvallet'
diff -crB --new-file audio_common/audio_common/sound_play/scripts/test_actionlib_client.py audio_common_patched/audio_common/sound_play/scripts/test_actionlib_client.py
*** audio_common/audio_common/sound_play/scripts/test_actionlib_client.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/test_actionlib_client.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,64 ----
+ #! /usr/bin/env python
+ 
+ import roslib; roslib.load_manifest('sound_play')
+ import rospy
+ import actionlib
+ from sound_play.msg import SoundRequest, SoundRequestAction, SoundRequestGoal
+ 
+ import os
+ 
+ def sound_play_client(volume=1.0):
+     client = actionlib.SimpleActionClient('sound_play', SoundRequestAction)
+ 
+     client.wait_for_server()
+ 
+     print "Need Unplugging"
+     goal = SoundRequestGoal()
+     goal.sound_request.sound = SoundRequest.NEEDS_UNPLUGGING
+     goal.sound_request.command = SoundRequest.PLAY_ONCE
+     goal.sound_request.volume = volume
+ 
+     client.send_goal(goal)
+     client.wait_for_result()
+     print client.get_result()
+     print "End Need Unplugging"
+     print
+ 
+     print "Need Plugging"
+     goal = SoundRequestGoal()
+     goal.sound_request.sound = SoundRequest.NEEDS_PLUGGING
+     goal.sound_request.command = SoundRequest.PLAY_ONCE
+     goal.sound_request.volume = volume
+     client.send_goal(goal)
+     client.wait_for_result()
+     print client.get_result()
+     print "End Need Plugging"
+     print
+ 
+     print "Say"
+     goal = SoundRequestGoal()
+     goal.sound_request.sound = SoundRequest.SAY
+     goal.sound_request.command = SoundRequest.PLAY_ONCE
+     goal.sound_request.arg = "Testing the actionlib interface A P I"
+     goal.sound_request.volume = volume
+     client.send_goal(goal)
+     client.wait_for_result()
+     print client.get_result()
+     print "End Say"
+     print
+ 
+     print "Wav"
+     goal = SoundRequestGoal()
+     goal.sound_request.sound = SoundRequest.PLAY_FILE
+     goal.sound_request.command = SoundRequest.PLAY_ONCE
+     goal.sound_request.arg = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds') + "/say-beep.wav"
+     goal.sound_request.volume = volume
+     client.send_goal(goal)
+     client.wait_for_result()
+     print client.get_result()
+     print "End wav"
+     print
+ 
+ if __name__ == '__main__':
+     rospy.init_node('soundplay_client_test')
+     sound_play_client()
diff -crB --new-file audio_common/audio_common/sound_play/scripts/test.py audio_common_patched/audio_common/sound_play/scripts/test.py
*** audio_common/audio_common/sound_play/scripts/test.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/scripts/test.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,129 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ import rospy, os, sys
+ from sound_play.msg import SoundRequest
+ 
+ from sound_play.libsoundplay import SoundClient
+ 
+ def sleep(t):
+     try:
+         rospy.sleep(t)
+     except:
+         pass
+ 
+ if __name__ == '__main__':
+     rospy.init_node('soundplay_test', anonymous = True)
+     soundhandle = SoundClient()
+ 
+     rospy.sleep(1)
+     
+     soundhandle.stopAll()
+ 
+     print "This script will run continuously until you hit CTRL+C, testing various sound_node sound types."
+ 
+     print
+     #print 'Try to play wave files that do not exist.'
+     #soundhandle.playWave('17')
+     #soundhandle.playWave('dummy')
+         
+     # print 'say'
+     # soundhandle.say('Hello world!')
+     # sleep(3)
+        
+     print 'wave'
+     soundhandle.playWave('say-beep.wav')
+     sleep(2)
+     
+     print 'quiet wave'
+     soundhandle.playWave('say-beep.wav', 0.3)
+     sleep(2)
+         
+     print 'plugging'
+     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
+     sleep(2)
+ 
+     print 'quiet plugging'
+     soundhandle.play(SoundRequest.NEEDS_PLUGGING, 0.3)
+     sleep(2)
+ 
+     print 'unplugging'
+     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING)
+     sleep(2)
+ 
+     print 'plugging badly'
+     soundhandle.play(SoundRequest.NEEDS_PLUGGING_BADLY)
+     sleep(2)
+ 
+     print 'unplugging badly'
+     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING_BADLY)
+     sleep(2)
+ 
+     s1 = soundhandle.builtinSound(SoundRequest.NEEDS_UNPLUGGING_BADLY)
+     s2 = soundhandle.waveSound("say-beep.wav")
+     s3 = soundhandle.voiceSound("Testing the new A P I")
+     s4 = soundhandle.builtinSound(SoundRequest.NEEDS_UNPLUGGING_BADLY, 0.3)
+     s5 = soundhandle.waveSound("say-beep.wav", 0.3)
+     s6 = soundhandle.voiceSound("Testing the new A P I", 0.3)
+ 
+     print "New API start voice"
+     s3.repeat()
+     sleep(3)
+ 
+     print "New API start voice quiet"
+     s6.play()
+     sleep(3)
+     
+     print "New API wave"
+     s2.repeat()
+     sleep(2)
+ 
+     print "New API wave quiet"
+     s5.play()
+     sleep(2)
+ 
+     print "New API builtin"
+     s1.play()
+     sleep(2)
+ 
+     print "New API builtin quiet"
+     s4.play()
+     sleep(2)
+ 
+     print "New API stop"
+     s3.stop()
diff -crB --new-file audio_common/audio_common/sound_play/setup.py audio_common_patched/audio_common/sound_play/setup.py
*** audio_common/audio_common/sound_play/setup.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/setup.py	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,11 ----
+ #!/usr/bin/env python
+ 
+ from distutils.core import setup
+ from catkin_pkg.python_setup import generate_distutils_setup
+ 
+ d = generate_distutils_setup(
+       packages=['sound_play'],
+       package_dir={'': 'src'}
+       )
+ 
+ setup(**d)
diff -crB --new-file audio_common/audio_common/sound_play/soundplay_node.launch audio_common_patched/audio_common/sound_play/soundplay_node.launch
*** audio_common/audio_common/sound_play/soundplay_node.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/soundplay_node.launch	2018-08-23 10:52:16.596463250 +0200
***************
*** 0 ****
--- 1,11 ----
+ <!-- 
+ This launch file starts soundplay_node.py, which is the node that plays
+ sounds based on messages on the robotsound topic.  
+ -->
+ 
+ <launch>
+   <arg name="device" default="" />
+   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py">
+     <param name="device" value="$(arg device)" />
+   </node>
+ </launch>
Binary files audio_common/audio_common/sound_play/sounds/BACKINGUP.ogg and audio_common_patched/audio_common/sound_play/sounds/BACKINGUP.ogg differ
Binary files audio_common/audio_common/sound_play/sounds/NEEDS_PLUGGING_BADLY.ogg and audio_common_patched/audio_common/sound_play/sounds/NEEDS_PLUGGING_BADLY.ogg differ
Binary files audio_common/audio_common/sound_play/sounds/NEEDS_PLUGGING.ogg and audio_common_patched/audio_common/sound_play/sounds/NEEDS_PLUGGING.ogg differ
Binary files audio_common/audio_common/sound_play/sounds/NEEDS_UNPLUGGING_BADLY.ogg and audio_common_patched/audio_common/sound_play/sounds/NEEDS_UNPLUGGING_BADLY.ogg differ
Binary files audio_common/audio_common/sound_play/sounds/NEEDS_UNPLUGGING.ogg and audio_common_patched/audio_common/sound_play/sounds/NEEDS_UNPLUGGING.ogg differ
Binary files audio_common/audio_common/sound_play/sounds/say-beep.wav and audio_common_patched/audio_common/sound_play/sounds/say-beep.wav differ
diff -crB --new-file audio_common/audio_common/sound_play/src/sound_play/__init__.py audio_common_patched/audio_common/sound_play/src/sound_play/__init__.py
*** audio_common/audio_common/sound_play/src/sound_play/__init__.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/src/sound_play/__init__.py	2018-08-23 10:52:16.600463176 +0200
***************
*** 0 ****
--- 1,33 ----
+ # Software License Agreement (BSD License)
+ #
+ # Copyright (c) 2013, Willow Garage, Inc.
+ # All rights reserved.
+ #
+ # Redistribution and use in source and binary forms, with or without
+ # modification, are permitted provided that the following conditions
+ # are met:
+ #
+ #  * Redistributions of source code must retain the above copyright
+ #    notice, this list of conditions and the following disclaimer.
+ #  * Redistributions in binary form must reproduce the above
+ #    copyright notice, this list of conditions and the following
+ #    disclaimer in the documentation and/or other materials provided
+ #    with the distribution.
+ #  * Neither the name of Willow Garage, Inc. nor the names of its
+ #    contributors may be used to endorse or promote products derived
+ #    from this software without specific prior written permission.
+ #
+ # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ # FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ # COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ # INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ # BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ # ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ # POSSIBILITY OF SUCH DAMAGE.
+ 
+ import libsoundplay as libsoundplay
diff -crB --new-file audio_common/audio_common/sound_play/src/sound_play/libsoundplay.py audio_common_patched/audio_common/sound_play/src/sound_play/libsoundplay.py
*** audio_common/audio_common/sound_play/src/sound_play/libsoundplay.py	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/src/sound_play/libsoundplay.py	2018-08-23 10:52:16.600463176 +0200
***************
*** 0 ****
--- 1,346 ----
+ #!/usr/bin/env python
+ 
+ #***********************************************************
+ #* Software License Agreement (BSD License)
+ #*
+ #*  Copyright (c) 2009, Willow Garage, Inc.
+ #*  All rights reserved.
+ #*
+ #*  Redistribution and use in source and binary forms, with or without
+ #*  modification, are permitted provided that the following conditions
+ #*  are met:
+ #*
+ #*   * Redistributions of source code must retain the above copyright
+ #*     notice, this list of conditions and the following disclaimer.
+ #*   * Redistributions in binary form must reproduce the above
+ #*     copyright notice, this list of conditions and the following
+ #*     disclaimer in the documentation and/or other materials provided
+ #*     with the distribution.
+ #*   * Neither the name of the Willow Garage nor the names of its
+ #*     contributors may be used to endorse or promote products derived
+ #*     from this software without specific prior written permission.
+ #*
+ #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ #*  POSSIBILITY OF SUCH DAMAGE.
+ #***********************************************************
+ 
+ # Author: Blaise Gassend
+ 
+ import rospy
+ import roslib
+ import actionlib
+ import os, sys
+ from sound_play.msg import SoundRequest
+ from sound_play.msg import SoundRequestGoal
+ from sound_play.msg import SoundRequestAction
+ 
+ ## \brief Class that publishes messages to the sound_play node.
+ ##
+ ## This class is a helper class for communicating with the sound_play node
+ ## via the \ref sound_play.SoundRequest message. It has two ways of being used:
+ ##
+ ## - It can create Sound classes that represent a particular sound which
+ ##   can be played, repeated or stopped.
+ ##
+ ## - It provides methods for each way in which the sound_play.SoundRequest
+ ##   message can be invoked.
+ 
+ class Sound(object):
+     def __init__(self, client, snd, arg, volume=1.0):
+         self.client = client
+         self.snd = snd
+         self.arg = arg
+         self.vol = volume
+ 
+ ## \brief Play the Sound.
+ ##
+ ## This method causes the Sound to be played once.
+ 
+     def play(self, **kwargs):
+         self.client.sendMsg(self.snd, SoundRequest.PLAY_ONCE, self.arg,
+                             vol=self.vol, **kwargs)
+ 
+ ## \brief Play the Sound repeatedly.
+ ##
+ ## This method causes the Sound to be played repeatedly until stop() is
+ ## called.
+ 
+     def repeat(self, **kwargs):
+        self.client.sendMsg(self.snd, SoundRequest.PLAY_START, self.arg,
+                            vol=self.vol, **kwargs)
+ 
+ ## \brief Stop Sound playback.
+ ##
+ ## This method causes the Sound to stop playing.
+ 
+     def stop(self):
+         self.client.sendMsg(self.snd, SoundRequest.PLAY_STOP, self.arg)
+ 
+ ## This class is a helper class for communicating with the sound_play node
+ ## via the \ref sound_play.SoundRequest message. There is a one-to-one mapping
+ ## between methods and invocations of the \ref sound_play.SoundRequest message.
+ 
+ class SoundClient(object):
+ 
+     def __init__(self, blocking=False):
+         """
+ 
+         The SoundClient can send SoundRequests in two modes: non-blocking mode
+         (by publishing a message to the soundplay_node directly) which will
+         return as soon as the sound request has been sent, or blocking mode (by
+         using the actionlib interface) which will wait until the sound has
+         finished playing completely.
+ 
+         The blocking parameter here is the standard behavior, but can be
+         over-ridden.  Each say/play/start/repeat method can take in an optional
+         `blocking=True|False` argument that will over-ride the class-wide
+         behavior. See soundclient_example.py for an example of this behavior.
+ 
+         :param blocking: Used as the default behavior unless over-ridden,
+         (default = false)
+         """
+ 
+         self._blocking = blocking
+ 
+         # NOTE: only one of these will be used at once, but we need to create
+         # both the publisher and actionlib client here.
+         self.actionclient = actionlib.SimpleActionClient(
+             'sound_play', SoundRequestAction)
+         self.pub = rospy.Publisher('robotsound', SoundRequest, queue_size=5)
+ 
+ ## \brief Create a voice Sound.
+ ##
+ ## Creates a Sound corresponding to saying the indicated text.
+ ##
+ ## \param s Text to say
+ 
+     def voiceSound(self, s, volume=1.0):
+         return Sound(self, SoundRequest.SAY, s, volume=volume)
+ 
+ ## \brief Create a wave Sound.
+ ##
+ ## Creates a Sound corresponding to indicated file.
+ ##
+ ## \param s File to play. Should be an absolute path that exists on the
+ ## machine running the sound_play node.
+     def waveSound(self, sound, volume=1.0):
+         if sound[0] != "/":
+           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
+           sound = rootdir + "/" + sound
+         return Sound(self, SoundRequest.PLAY_FILE, sound, volume=volume)
+ 
+ ## \brief Create a builtin Sound.
+ ##
+ ## Creates a Sound corresponding to indicated builtin wave.
+ ##
+ ## \param id Identifier of the sound to play.
+ 
+     def builtinSound(self, id, volume=1.0):
+         return Sound(self, id, "", volume)
+ 
+ ## \brief Say a string
+ ##
+ ## Send a string to be said by the sound_node. The vocalization can be
+ ## stopped using stopSaying or stopAll.
+ ##
+ ## \param text String to say
+ 
+     def say(self,text, voice='', volume=1.0, **kwargs):
+         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_ONCE, text, voice,
+                      volume, **kwargs)
+ 
+ ## \brief Say a string repeatedly
+ ##
+ ## The string is said repeatedly until stopSaying or stopAll is used.
+ ##
+ ## \param text String to say repeatedly
+ 
+     def repeat(self,text, volume=1.0, **kwargs):
+         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_START, text,
+                      vol=volume, **kwargs)
+ 
+ ## \brief Stop saying a string
+ ##
+ ## Stops saying a string that was previously started by say or repeat. The
+ ## argument indicates which string to stop saying.
+ ##
+ ## \param text Same string as in the say or repeat command
+ 
+     def stopSaying(self,text):
+         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_STOP, text)
+ 
+ ## \brief Plays a WAV or OGG file
+ ##
+ ## Plays a WAV or OGG file once. The playback can be stopped by stopWave or
+ ## stopAll.
+ ##
+ ## \param sound Filename of the WAV or OGG file. Must be an absolute path valid
+ ## on the computer on which the sound_play node is running
+ 
+     def playWave(self, sound, volume=1.0, **kwargs):
+         if sound[0] != "/":
+           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
+           sound = rootdir + "/" + sound
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_ONCE, sound,
+                      vol=volume, **kwargs)
+ 
+ ## \brief Plays a WAV or OGG file repeatedly
+ ##
+ ## Plays a WAV or OGG file repeatedly until stopWave or stopAll is used.
+ ##
+ ## \param sound Filename of the WAV or OGG file. Must be an absolute path valid
+ ## on the computer on which the sound_play node is running.
+ 
+     def startWave(self, sound, volume=1.0, **kwargs):
+         if sound[0] != "/":
+           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
+           sound = rootdir + "/" + sound
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_START, sound,
+                      vol=volume, **kwargs)
+ 
+ ##  \brief Stop playing a WAV or OGG file
+ ##
+ ## Stops playing a file that was previously started by playWave or
+ ## startWave.
+ ##
+ ## \param sound Same string as in the playWave or startWave command
+ 
+     def stopWave(self,sound):
+         if sound[0] != "/":
+           rootdir = os.path.join(roslib.package.get_pkg_dir('sound_play'),'sounds')
+           sound = rootdir + "/" + sound
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_STOP, sound)
+ 
+ ## \brief Plays a WAV or OGG file
+ ##
+ ## Plays a WAV or OGG file once. The playback can be stopped by stopWaveFromPkg or
+ ## stopAll.
+ ##
+ ## \param package Package name containing the sound file.
+ ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
+ ## on the computer on which the sound_play node is running
+ 
+     def playWaveFromPkg(self, package, sound, volume=1.0, **kwargs):
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_ONCE, sound, package,
+                      volume, **kwargs)
+ 
+ ## \brief Plays a WAV or OGG file repeatedly
+ ##
+ ## Plays a WAV or OGG file repeatedly until stopWaveFromPkg or stopAll is used.
+ ##
+ ## \param package Package name containing the sound file.
+ ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
+ ## on the computer on which the sound_play node is running
+ 
+     def startWaveFromPkg(self, package, sound, volume=1.0, **kwargs):
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_START, sound,
+                      package, volume, **kwargs)
+ 
+ ##  \brief Stop playing a WAV or OGG file
+ ##
+ ## Stops playing a file that was previously started by playWaveFromPkg or
+ ## startWaveFromPkg.
+ ##
+ ## \param package Package name containing the sound file.
+ ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
+ ## on the computer on which the sound_play node is running
+ 
+     def stopWaveFromPkg(self,sound, package):
+         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_STOP, sound, package)
+ 
+ ## \brief Play a buildin sound
+ ##
+ ## Starts playing one of the built-in sounds. built-ing sounds are documented
+ ## in \ref SoundRequest.msg. Playback can be stopped by stopall.
+ ##
+ ## \param sound Identifier of the sound to play.
+ 
+     def play(self,sound, volume=1.0, **kwargs):
+         self.sendMsg(sound, SoundRequest.PLAY_ONCE, "", vol=volume, **kwargs)
+ 
+ ## \brief Play a buildin sound repeatedly
+ ##
+ ## Starts playing one of the built-in sounds repeatedly until stop or
+ ## stopall is used. Built-in sounds are documented in \ref SoundRequest.msg.
+ ##
+ ## \param sound Identifier of the sound to play.
+ 
+     def start(self,sound, volume=1.0, **kwargs):
+         self.sendMsg(sound, SoundRequest.PLAY_START, "", vol=volume, **kwargs)
+ 
+ ## \brief Stop playing a built-in sound
+ ##
+ ## Stops playing a built-in sound started with play or start.
+ ##
+ ## \param sound Same sound that was used to start playback
+ 
+     def stop(self,sound):
+         self.sendMsg(sound, SoundRequest.PLAY_STOP, "")
+ 
+ ## \brief Stop all currently playing sounds
+ ##
+ ## This method stops all speech, wave file, and built-in sound playback.
+ 
+     def stopAll(self):
+         self.stop(SoundRequest.ALL)
+ 
+     def sendMsg(self, snd, cmd, s, arg2="", vol=1.0, **kwargs):
+         """
+         Internal method that publishes the sound request, either directly as a
+         SoundRequest to the soundplay_node or through the actionlib interface
+         (which blocks until the sound has finished playing).
+ 
+         The blocking behavior is nominally the class-wide setting unless it has
+         been explicitly specified in the play call.
+         """
+ 
+         # Use the passed-in argument if it exists, otherwise fall back to the
+         # class-wide setting.
+         blocking = kwargs.get('blocking', self._blocking)
+ 
+         msg = SoundRequest()
+         msg.sound = snd
+         # Threshold volume between 0 and 1.
+         msg.volume = max(0, min(1, vol))
+         msg.command = cmd
+         msg.arg = s
+         msg.arg2 = arg2
+ 
+         rospy.logdebug('Sending sound request with volume = {}'
+                        ' and blocking = {}'.format(msg.volume, blocking))
+ 
+         # Defensive check for the existence of the correct communicator.
+         if not blocking and not self.pub:
+             rospy.logerr('Publisher for SoundRequest must exist')
+             return
+         if blocking and not self.actionclient:
+             rospy.logerr('Action client for SoundRequest does not exist.')
+             return
+ 
+         if not blocking:  # Publish message directly and return immediately
+             self.pub.publish(msg)
+             if self.pub.get_num_connections() < 1:
+                 rospy.logwarn("Sound command issued, but no node is subscribed"
+                               " to the topic. Perhaps you forgot to run"
+                               " soundplay_node.py?")
+         else:  # Block until result comes back.
+             assert self.actionclient, 'Actionclient must exist'
+             rospy.logdebug('Sending action client sound request [blocking]')
+             self.actionclient.wait_for_server()
+             goal = SoundRequestGoal()
+             goal.sound_request = msg
+             self.actionclient.send_goal(goal)
+             self.actionclient.wait_for_result()
+             rospy.logdebug('sound request response received')
+ 
+         return
diff -crB --new-file audio_common/audio_common/sound_play/test/CMakeLists.txt audio_common_patched/audio_common/sound_play/test/CMakeLists.txt
*** audio_common/audio_common/sound_play/test/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/test/CMakeLists.txt	2018-08-23 10:52:16.600463176 +0200
***************
*** 0 ****
--- 1,4 ----
+ add_executable(test_sound_play test.cpp)
+ target_link_libraries(test_sound_play ${catkin_LIBRARIES})
+ add_dependencies(test_sound_play sound_play_gencpp)
+ set_target_properties(test_sound_play PROPERTIES OUTPUT_NAME test)
diff -crB --new-file audio_common/audio_common/sound_play/test/test.cpp audio_common_patched/audio_common/sound_play/test/test.cpp
*** audio_common/audio_common/sound_play/test/test.cpp	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/test/test.cpp	2018-08-23 10:52:16.600463176 +0200
***************
*** 0 ****
--- 1,147 ----
+ /*********************************************************************
+ * Software License Agreement (BSD License)
+ *
+ *  Copyright (c) 2009, Willow Garage, Inc.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of the Willow Garage nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *  POSSIBILITY OF SUCH DAMAGE.
+ *********************************************************************/
+ 
+ #include <sound_play/sound_play.h>
+ #include <unistd.h>
+ 
+ void sleepok(int t, ros::NodeHandle &nh)
+ {
+   if (nh.ok())
+       sleep(t);
+ }
+ 
+ int main(int argc, char **argv)
+ {
+   ros::init(argc, argv, "sound_play_test");
+ 
+   ros::NodeHandle nh;
+   sound_play::SoundClient sc;
+   sound_play::SoundClient quiet_sc;
+ 
+   sleepok(1, nh);
+   
+   while(nh.ok())
+   {
+     sc.say("Hello world!");
+     sleepok(2, nh);
+     quiet_sc.say("Hello world!");
+     sleepok(2, nh);
+ 
+     const char *str1 = "I am annoying.";
+     sc.repeat(str1);
+     sleepok(4, nh);
+     sc.stopSaying(str1);
+     quiet_sc.repeat(str1);
+     sleepok(4, nh);
+     quiet_sc.stopSaying(str1);
+ 
+     sc.playWave("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
+     sleepok(2, nh);
+     quiet_sc.playWave("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
+     sleepok(2, nh);
+ 
+     const char *str2 = "/usr/share/xemacs21/xemacs-packages/etc/sounds/piano-beep.wav";
+     sc.startWave(str2);
+     sleepok(4, nh);
+     sc.stopWave(str2);
+     quiet_sc.startWave(str2);
+     sleepok(4, nh);
+     quiet_sc.stopWave(str2);
+ 
+     sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
+     sleepok(2, nh);
+     quiet_sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
+     sleepok(2, nh);
+ 
+     sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
+     sleepok(2, nh);
+     quiet_sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
+     sleepok(2, nh);
+ 
+     sc.start(sound_play::SoundRequest::BACKINGUP);
+     sleepok(4, nh);
+     sc.stop(sound_play::SoundRequest::BACKINGUP);
+     quiet_sc.start(sound_play::SoundRequest::BACKINGUP);
+     sleepok(4, nh);
+     quiet_sc.stop(sound_play::SoundRequest::BACKINGUP);
+ 
+     sleepok(2, nh);
+     sound_play::Sound s1 = sc.waveSound("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
+     s1.repeat();
+     sleepok(1, nh);
+     s1.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s2 = quiet_sc.waveSound("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
+     s2.repeat();
+     sleepok(1, nh);
+     s2.stop();
+ 		
+     sleepok(2, nh);
+     sound_play::Sound s3 = sc.voiceSound("This is a really long sentence that will get cut off.");
+     s3.play();
+     sleepok(1, nh);
+     s3.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s4 = quiet_sc.voiceSound("This is a really long sentence that will get cut off.");
+     s4.play();
+     sleepok(1, nh);
+     s4.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s5 = sc.builtinSound(sound_play::SoundRequest::NEEDS_UNPLUGGING_BADLY);
+     s5.play();
+     sleepok(1, nh);
+     s5.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s6 = quiet_sc.builtinSound(sound_play::SoundRequest::NEEDS_UNPLUGGING_BADLY);
+     s6.play();
+     sleepok(1, nh);
+     s6.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s7 = sc.waveSoundFromPkg("sound_play", "sounds/BACKINGUP.ogg");
+     s7.play();
+     sleepok(1, nh);
+     s7.stop();
+ 
+     sleepok(2, nh);
+     sound_play::Sound s8 = quiet_sc.waveSoundFromPkg("sound_play", "sounds/BACKINGUP.ogg");
+     s8.play();
+     sleepok(1, nh);
+     s8.stop();
+   }
+ }
diff -crB --new-file audio_common/audio_common/sound_play/test.launch audio_common_patched/audio_common/sound_play/test.launch
*** audio_common/audio_common/sound_play/test.launch	1970-01-01 01:00:00.000000000 +0100
--- audio_common_patched/audio_common/sound_play/test.launch	2018-08-23 10:52:16.600463176 +0200
***************
*** 0 ****
--- 1,9 ----
+ <!-- 
+ This launch file runs the sound_play node and a test script that excersises
+ most of its functionality.
+ -->
+ 
+ <launch>
+   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py"/>
+   <node name="sound_test" pkg="sound_play" type="test.py"/>
+ </launch>
diff -crB --new-file audio_common/audio_common_msgs/CHANGELOG.rst audio_common_patched/audio_common_msgs/CHANGELOG.rst
*** audio_common/audio_common_msgs/CHANGELOG.rst	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,68 ****
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Changelog for package audio_common_msgs
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- 0.3.3 (2018-05-22)
- ------------------
- 
- 0.3.2 (2018-05-02)
- ------------------
- 
- 0.3.1 (2016-08-28)
- ------------------
- * Add changelogs
- * Update maintainer email
- * Contributors: trainman419
- 
- 0.2.11 (2016-02-16)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.10 (2016-01-21)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.9 (2015-12-02)
- ------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.8 (2015-10-02)
- ------------------
- * Update maintainer email
- * Contributors: trainman419
- 
- 0.2.7 (2014-07-25)
- ------------------
- 
- 0.2.6 (2014-02-26)
- ------------------
- 
- 0.2.5 (2014-01-23)
- ------------------
- * "0.2.5"
- * Contributors: trainman419
- 
- 0.2.4 (2013-09-10)
- ------------------
- 
- 0.2.3 (2013-07-15)
- ------------------
- 
- 0.2.2 (2013-04-10)
- ------------------
- 
- 0.2.1 (2013-04-08 13:59)
- ------------------------
- 
- 0.2.0 (2013-04-08 13:49)
- ------------------------
- * Catkinize audio_common_msgs.
- * Versions and more URLs.
- * Convert manifests to package.xml
- * Ditch old makefiles.
- * Fixed audio_msgs names to audio_common_msgs
- * Renamed audio_msgs to audio_common_msgs
- * Contributors: Austin Hendrix, Nate Koenig
--- 0 ----
diff -crB --new-file audio_common/audio_common_msgs/CMakeLists.txt audio_common_patched/audio_common_msgs/CMakeLists.txt
*** audio_common/audio_common_msgs/CMakeLists.txt	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,9 ****
- cmake_minimum_required(VERSION 2.8.3)
- 
- project(audio_common_msgs)
- 
- find_package(catkin REQUIRED COMPONENTS message_generation)
- add_message_files(DIRECTORY msg FILES AudioData.msg)
- generate_messages()
- 
- catkin_package(CATKIN_DEPENDS message_runtime)
--- 0 ----
diff -crB --new-file audio_common/audio_common_msgs/.gitignore audio_common_patched/audio_common_msgs/.gitignore
*** audio_common/audio_common_msgs/.gitignore	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/.gitignore	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- build
--- 0 ----
diff -crB --new-file audio_common/audio_common_msgs/mainpage.dox audio_common_patched/audio_common_msgs/mainpage.dox
*** audio_common/audio_common_msgs/mainpage.dox	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,11 ****
- /**
- \mainpage
- \htmlinclude manifest.html
- 
- \b audio_common_msgs contain messages for transimitting audio via ROS.
- 
- 
- \section codeapi Code API
- 
- 
- */
--- 0 ----
diff -crB --new-file audio_common/audio_common_msgs/msg/AudioData.msg audio_common_patched/audio_common_msgs/msg/AudioData.msg
*** audio_common/audio_common_msgs/msg/AudioData.msg	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/msg/AudioData.msg	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- uint8[] data
--- 0 ----
diff -crB --new-file audio_common/audio_common_msgs/package.xml audio_common_patched/audio_common_msgs/package.xml
*** audio_common/audio_common_msgs/package.xml	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_common_msgs/package.xml	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,19 ****
- <package>
-    <name>audio_common_msgs</name>
-    <version>0.3.3</version>
-    <description>
-       Messages for transmitting audio via ROS
-    </description>
-    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
-    <author>Nate Koenig</author>
-    <license>BSD</license>
-    <url type="website">http://ros.org/wiki/audio_common_msgs</url>
-    <url type="repository">https://github.com/ros-drivers/audio_common</url>
-    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
- 
-    <buildtool_depend>catkin</buildtool_depend>
- 
-    <build_depend>message_generation</build_depend>
- 
-    <run_depend>message_runtime</run_depend>
- </package>
--- 0 ----
diff -crB --new-file audio_common/audio_play/CHANGELOG.rst audio_common_patched/audio_play/CHANGELOG.rst
*** audio_common/audio_play/CHANGELOG.rst	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,121 ****
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Changelog for package audio_play
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- 0.3.3 (2018-05-22)
- ------------------
- 
- 0.3.2 (2018-05-02)
- ------------------
- * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
-   * [sound_play] add option to select audio device to play
-   * [sound_play] reformat README to markdown; add usage to set device via rosparam
-   * audio_capture: add option for selecting device to use
-   * audio_play: add option to select device for playing audio
-   * add device argument to launch files
-   Conflicts:
-   audio_capture/launch/capture.launch
-   audio_capture/launch/capture_to_file.launch
-   audio_capture/src/audio_capture.cpp
-   audio_play/launch/play.launch
-   sound_play/scripts/soundplay_node.py
- * Merge pull request `#101 <https://github.com/ros-drivers/audio_common/issues/101>`_ from EndPointCorp/audio_play_dont_pause_pipeline
-   audio_play: Fix mp3 clip overlap by never pausing the pipeline
- * audio_play: Don't pause the pipeline
-   This prevents glitches when playing short mp3 clips.
- * Merge pull request `#90 <https://github.com/ros-drivers/audio_common/issues/90>`_ from prarobo/master
-   Error checking code and improvements to launch files
- * Merge pull request `#1 <https://github.com/ros-drivers/audio_common/issues/1>`_ from prarobo/fixes
-   Error checking code and improvements to launch files
- * Added parameters to launch files
- * Contributors: Austin, Matt Vollrath, Prasanna Kannappan, Yuki Furuta, prarobo
- 
- 0.3.1 (2016-08-28)
- ------------------
- * Update to new gstreamer rosdeps
- * #70 can launch these in different namespaces with different microphones, and both are operating.
- * Add changelogs
- * Changed message level to warning
- * Fixed problem that CMake uses gstreamer-0.1 instead of gstreamer-1.0
- * Fixed underflow.
-   Before the sink buffer underflows the pipeline is paused. When data is received again the pipeline is set to playing again.
- * Added gstreamer 1.0 dependecies
- * Ported to gstreamer 1.0
-   package.xml dependencies still missing
- * Change audio sink to autoaudiosink
- * Update maintainer email
- * Contributors: Benny, Hans Gaiser, Lucas Walter, trainman419
- 
- 0.2.11 (2016-02-16)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.10 (2016-01-21)
- -------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.9 (2015-12-02)
- ------------------
- * Add changelogs
- * Contributors: trainman419
- 
- 0.2.8 (2015-10-02)
- ------------------
- * Changed message level to warning
- * Fixed underflow.
-   Before the sink buffer underflows the pipeline is paused. When data is received again the pipeline is set to playing again.
- * Change audio sink to autoaudiosink
- * Update maintainer email
- * Contributors: Benny, Hans Gaiser, trainman419
- 
- 0.2.7 (2014-07-25)
- ------------------
- 
- 0.2.6 (2014-02-26)
- ------------------
- * audio_capture and play _require\_ gstreamer, it's not optional
- * Contributors: v4hn
- 
- 0.2.5 (2014-01-23)
- ------------------
- * "0.2.5"
- * Contributors: trainman419
- 
- 0.2.4 (2013-09-10)
- ------------------
- 
- 0.2.3 (2013-07-15)
- ------------------
- * Fix dependencies and install rules.
- * Contributors: Austin Hendrix
- 
- 0.2.2 (2013-04-10)
- ------------------
- 
- 0.2.1 (2013-04-08 13:59)
- ------------------------
- 
- 0.2.0 (2013-04-08 13:49)
- ------------------------
- * Finish catkinizing audio_common.
- * Catkinize audio_play.
- * Fix typo in package.xml
- * Versions and more URLs.
- * Convert manifests to package.xml
- * Ditch old makefiles.
- * Updates manifest
- * Updated manifests for rodep2
- * oneiric build fixes, bump version to 0.1.6
- * Removed another duplicate thread::thread
- * Added a rosdep.yaml file
- * Fixed to use audio_common_msgs
- * Added ability to use different festival voices
- * Updated documentation
- * Update to audio_play
- * Fixed ignore files
- * Added hgignore files
- * Audio_capture and audio_play working
- * Making separate audio_capture and audio_play packages
- * Contributors: Austin Hendrix, Brian Gerkey, Nate Koenig, nkoenig
--- 0 ----
diff -crB --new-file audio_common/audio_play/CMakeLists.txt audio_common_patched/audio_play/CMakeLists.txt
*** audio_common/audio_play/CMakeLists.txt	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,24 ****
- cmake_minimum_required(VERSION 2.8.3)
- 
- project(audio_play)
- 
- find_package(catkin REQUIRED COMPONENTS roscpp audio_common_msgs)
- 
- find_package(PkgConfig)
- pkg_check_modules(GST1.0 gstreamer-1.0 REQUIRED)
- 
- find_package(Boost REQUIRED COMPONENTS thread)
- 
- include_directories(${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${GST1.0_INCLUDE_DIRS})
- 
- catkin_package()
- 
- add_executable(audio_play src/audio_play.cpp)
- target_link_libraries(audio_play ${catkin_LIBRARIES} ${GST1.0_LIBRARIES} ${Boost_LIBRARIES}) 
- add_dependencies(audio_play ${catkin_EXPORTED_TARGETS})
- 
- install(TARGETS audio_play 
-    DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
- 
- install(DIRECTORY launch
-    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
--- 0 ----
diff -crB --new-file audio_common/audio_play/.gitignore audio_common_patched/audio_play/.gitignore
*** audio_common/audio_play/.gitignore	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/.gitignore	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- build
--- 0 ----
diff -crB --new-file audio_common/audio_play/launch/play.launch audio_common_patched/audio_play/launch/play.launch
*** audio_common/audio_play/launch/play.launch	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/launch/play.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,10 ****
- <launch>
-   <arg name="ns" default="audio"/>
-   <arg name="dst" default="alsasink"/>
- 
-   <group ns="$(arg ns)">
-   <node name="audio_play" pkg="audio_play" type="audio_play" output="screen">
-     <param name="dst" value="$(arg dst)"/>
-   </node>
-   </group>
- </launch>
--- 0 ----
diff -crB --new-file audio_common/audio_play/mainpage.dox audio_common_patched/audio_play/mainpage.dox
*** audio_common/audio_play/mainpage.dox	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,22 ****
- /**
- \mainpage
- \htmlinclude manifest.html
- 
- \b audio_play is a package that listens to a node that produces audio_msgs, and plays them through a connected speaker.
- 
- 
- \section codeapi Code API
- 
- <!--
- Provide links to specific auto-generated API documentation within your
- package that is of particular interest to a reader. Doxygen will
- document pretty much every part of your code, so do your best here to
- point the reader to the actual API.
- 
- If your codebase is fairly large or has different sets of APIs, you
- should use the doxygen 'group' tag to keep these APIs together. For
- example, the roscpp documentation has 'libros' group.
- -->
- 
- 
- */
--- 0 ----
diff -crB --new-file audio_common/audio_play/package.xml audio_common_patched/audio_play/package.xml
*** audio_common/audio_play/package.xml	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/audio_play/package.xml	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,30 ****
- <package>
-    <name>audio_play</name>
-    <version>0.3.3</version>
-    <description>
-       Outputs audio to a speaker from a source node.
-    </description>
-    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
-    <author>Nate Koenig</author>
-    <license>BSD</license>
-    <url type="website">http://ros.org/wiki/audio_play</url>
-    <url type="repository">https://github.com/ros-drivers/audio_common</url>
-    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
- 
-    <buildtool_depend>catkin</buildtool_depend>
- 
-    <build_depend>roscpp</build_depend>
-    <build_depend>audio_common_msgs</build_depend>
-    <build_depend>libgstreamer1.0-dev</build_depend>
-    <build_depend>libgstreamer-plugins-base1.0-dev</build_depend>
- 
-    <run_depend>roscpp</run_depend>
-    <run_depend>audio_common_msgs</run_depend>
-    <run_depend>gstreamer1.0</run_depend>
-    <run_depend>gstreamer1.0-plugins-base</run_depend>
-    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
-    <run_depend>gstreamer1.0-plugins-good</run_depend>
- 
- </package>
- 
- 
--- 0 ----
diff -crB --new-file audio_common/audio_play/src/audio_play.cpp audio_common_patched/audio_play/src/audio_play.cpp
*** audio_common/audio_play/src/audio_play.cpp	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/audio_play/src/audio_play.cpp	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,134 ****
- #include <gst/gst.h>
- #include <gst/app/gstappsrc.h>
- #include <ros/ros.h>
- #include <boost/thread.hpp>
- 
- #include "audio_common_msgs/AudioData.h"
- 
- namespace audio_transport
- {
-   class RosGstPlay
-   {
-     public:
-       RosGstPlay()
-       {
-         GstPad *audiopad;
- 
-         std::string dst_type;
-         std::string device;
- 
-         // The destination of the audio
-         ros::param::param<std::string>("~dst", dst_type, "alsasink");
-         ros::param::param<std::string>("~device", device, std::string());
- 
-         _sub = _nh.subscribe("audio", 10, &RosGstPlay::onAudio, this);
- 
-         _loop = g_main_loop_new(NULL, false);
- 
-         _pipeline = gst_pipeline_new("app_pipeline");
-         _source = gst_element_factory_make("appsrc", "app_source");
-         g_object_set(G_OBJECT(_source), "do-timestamp", TRUE, NULL);
-         gst_bin_add( GST_BIN(_pipeline), _source);
- 
-         //_playbin = gst_element_factory_make("playbin2", "uri_play");
-         //g_object_set( G_OBJECT(_playbin), "uri", "file:///home/test/test.mp3", NULL);
-         if (dst_type == "alsasink")
-         {
-           _decoder = gst_element_factory_make("decodebin", "decoder");
-           g_signal_connect(_decoder, "pad-added", G_CALLBACK(cb_newpad),this);
-           gst_bin_add( GST_BIN(_pipeline), _decoder);
-           gst_element_link(_source, _decoder);
- 
-           _audio = gst_bin_new("audiobin");
-           _convert = gst_element_factory_make("audioconvert", "convert");
-           audiopad = gst_element_get_static_pad(_convert, "sink");
-           _sink = gst_element_factory_make("autoaudiosink", "sink");
-           if (!device.empty()) {
-             g_object_set(G_OBJECT(_sink), "device", device.c_str(), NULL);
-           }
-           gst_bin_add_many( GST_BIN(_audio), _convert, _sink, NULL);
-           gst_element_link(_convert, _sink);
-           gst_element_add_pad(_audio, gst_ghost_pad_new("sink", audiopad));
-           gst_object_unref(audiopad);
- 
-           gst_bin_add(GST_BIN(_pipeline), _audio);
-         }
-         else
-         {
-           _sink = gst_element_factory_make("filesink", "sink");
-           g_object_set( G_OBJECT(_sink), "location", dst_type.c_str(), NULL);
-           gst_bin_add(GST_BIN(_pipeline), _sink);
-           gst_element_link(_source, _sink);
-         }
- 
-         gst_element_set_state(GST_ELEMENT(_pipeline), GST_STATE_PLAYING);
-         //gst_element_set_state(GST_ELEMENT(_playbin), GST_STATE_PLAYING);
- 
-         _gst_thread = boost::thread( boost::bind(g_main_loop_run, _loop) );
-       }
- 
-     private:
- 
-       void onAudio(const audio_common_msgs::AudioDataConstPtr &msg)
-       {
-         GstBuffer *buffer = gst_buffer_new_and_alloc(msg->data.size());
-         gst_buffer_fill(buffer, 0, &msg->data[0], msg->data.size());
-         GstFlowReturn ret;
- 
-         g_signal_emit_by_name(_source, "push-buffer", buffer, &ret);
-       }
- 
-      static void cb_newpad (GstElement *decodebin, GstPad *pad, 
-                              gpointer data)
-       {
-         RosGstPlay *client = reinterpret_cast<RosGstPlay*>(data);
- 
-         GstCaps *caps;
-         GstStructure *str;
-         GstPad *audiopad;
- 
-         /* only link once */
-         audiopad = gst_element_get_static_pad (client->_audio, "sink");
-         if (GST_PAD_IS_LINKED (audiopad)) 
-         {
-           g_object_unref (audiopad);
-           return;
-         }
- 
-         /* check media type */
-         caps = gst_pad_query_caps (pad, NULL);
-         str = gst_caps_get_structure (caps, 0);
-         if (!g_strrstr (gst_structure_get_name (str), "audio")) {
-           gst_caps_unref (caps);
-           gst_object_unref (audiopad);
-           return;
-         }
- 
-         gst_caps_unref (caps);
- 
-         /* link'n'play */
-         gst_pad_link (pad, audiopad);
- 
-         g_object_unref (audiopad);
-       }
- 
-       ros::NodeHandle _nh;
-       ros::Subscriber _sub;
-       boost::thread _gst_thread;
- 
-       GstElement *_pipeline, *_source, *_sink, *_decoder, *_convert, *_audio;
-       GstElement *_playbin;
-       GMainLoop *_loop;
-   };
- }
- 
- 
- int main (int argc, char **argv)
- {
-   ros::init(argc, argv, "audio_play");
-   gst_init(&argc, &argv);
- 
-   audio_transport::RosGstPlay client;
- 
-   ros::spin();
- }
--- 0 ----
diff -crB --new-file audio_common/.git/config audio_common_patched/.git/config
*** audio_common/.git/config	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/config	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,11 ****
- [core]
- 	repositoryformatversion = 0
- 	filemode = true
- 	bare = false
- 	logallrefupdates = true
- [remote "origin"]
- 	url = https://github.com/ros-drivers/audio_common.git
- 	fetch = +refs/heads/*:refs/remotes/origin/*
- [branch "master"]
- 	remote = origin
- 	merge = refs/heads/master
--- 0 ----
diff -crB --new-file audio_common/.git/description audio_common_patched/.git/description
*** audio_common/.git/description	2018-08-23 14:09:47.648985084 +0200
--- audio_common_patched/.git/description	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- Unnamed repository; edit this file 'description' to name the repository.
--- 0 ----
diff -crB --new-file audio_common/.git/HEAD audio_common_patched/.git/HEAD
*** audio_common/.git/HEAD	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/HEAD	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- ref: refs/heads/master
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/applypatch-msg.sample audio_common_patched/.git/hooks/applypatch-msg.sample
*** audio_common/.git/hooks/applypatch-msg.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/applypatch-msg.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,15 ****
- #!/bin/sh
- #
- # An example hook script to check the commit log message taken by
- # applypatch from an e-mail message.
- #
- # The hook should exit with non-zero status after issuing an
- # appropriate message if it wants to stop the commit.  The hook is
- # allowed to edit the commit message file.
- #
- # To enable this hook, rename this file to "applypatch-msg".
- 
- . git-sh-setup
- commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
- test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
- :
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/commit-msg.sample audio_common_patched/.git/hooks/commit-msg.sample
*** audio_common/.git/hooks/commit-msg.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,24 ****
- #!/bin/sh
- #
- # An example hook script to check the commit log message.
- # Called by "git commit" with one argument, the name of the file
- # that has the commit message.  The hook should exit with non-zero
- # status after issuing an appropriate message if it wants to stop the
- # commit.  The hook is allowed to edit the commit message file.
- #
- # To enable this hook, rename this file to "commit-msg".
- 
- # Uncomment the below to add a Signed-off-by line to the message.
- # Doing this in a hook is a bad idea in general, but the prepare-commit-msg
- # hook is more suited to it.
- #
- # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
- # grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
- 
- # This example catches duplicate Signed-off-by lines.
- 
- test "" = "$(grep '^Signed-off-by: ' "$1" |
- 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
- 	echo >&2 Duplicate Signed-off-by lines.
- 	exit 1
- }
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/post-update.sample audio_common_patched/.git/hooks/post-update.sample
*** audio_common/.git/hooks/post-update.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/post-update.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,8 ****
- #!/bin/sh
- #
- # An example hook script to prepare a packed repository for use over
- # dumb transports.
- #
- # To enable this hook, rename this file to "post-update".
- 
- exec git update-server-info
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/pre-applypatch.sample audio_common_patched/.git/hooks/pre-applypatch.sample
*** audio_common/.git/hooks/pre-applypatch.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/pre-applypatch.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,14 ****
- #!/bin/sh
- #
- # An example hook script to verify what is about to be committed
- # by applypatch from an e-mail message.
- #
- # The hook should exit with non-zero status after issuing an
- # appropriate message if it wants to stop the commit.
- #
- # To enable this hook, rename this file to "pre-applypatch".
- 
- . git-sh-setup
- precommit="$(git rev-parse --git-path hooks/pre-commit)"
- test -x "$precommit" && exec "$precommit" ${1+"$@"}
- :
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/pre-commit.sample audio_common_patched/.git/hooks/pre-commit.sample
*** audio_common/.git/hooks/pre-commit.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/pre-commit.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,49 ****
- #!/bin/sh
- #
- # An example hook script to verify what is about to be committed.
- # Called by "git commit" with no arguments.  The hook should
- # exit with non-zero status after issuing an appropriate message if
- # it wants to stop the commit.
- #
- # To enable this hook, rename this file to "pre-commit".
- 
- if git rev-parse --verify HEAD >/dev/null 2>&1
- then
- 	against=HEAD
- else
- 	# Initial commit: diff against an empty tree object
- 	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
- fi
- 
- # If you want to allow non-ASCII filenames set this variable to true.
- allownonascii=$(git config --bool hooks.allownonascii)
- 
- # Redirect output to stderr.
- exec 1>&2
- 
- # Cross platform projects tend to avoid non-ASCII filenames; prevent
- # them from being added to the repository. We exploit the fact that the
- # printable range starts at the space character and ends with tilde.
- if [ "$allownonascii" != "true" ] &&
- 	# Note that the use of brackets around a tr range is ok here, (it's
- 	# even required, for portability to Solaris 10's /usr/bin/tr), since
- 	# the square bracket bytes happen to fall in the designated range.
- 	test $(git diff --cached --name-only --diff-filter=A -z $against |
- 	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
- then
- 	cat <<\EOF
- Error: Attempt to add a non-ASCII file name.
- 
- This can cause problems if you want to work with people on other platforms.
- 
- To be portable it is advisable to rename the file.
- 
- If you know what you are doing you can disable this check using:
- 
-   git config hooks.allownonascii true
- EOF
- 	exit 1
- fi
- 
- # If there are whitespace errors, print the offending file names and fail.
- exec git diff-index --check --cached $against --
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/prepare-commit-msg.sample audio_common_patched/.git/hooks/prepare-commit-msg.sample
*** audio_common/.git/hooks/prepare-commit-msg.sample	2018-08-23 14:09:47.648985084 +0200
--- audio_common_patched/.git/hooks/prepare-commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,36 ****
- #!/bin/sh
- #
- # An example hook script to prepare the commit log message.
- # Called by "git commit" with the name of the file that has the
- # commit message, followed by the description of the commit
- # message's source.  The hook's purpose is to edit the commit
- # message file.  If the hook fails with a non-zero status,
- # the commit is aborted.
- #
- # To enable this hook, rename this file to "prepare-commit-msg".
- 
- # This hook includes three examples.  The first comments out the
- # "Conflicts:" part of a merge commit.
- #
- # The second includes the output of "git diff --name-status -r"
- # into the message, just before the "git status" output.  It is
- # commented because it doesn't cope with --amend or with squashed
- # commits.
- #
- # The third example adds a Signed-off-by line to the message, that can
- # still be edited.  This is rarely a good idea.
- 
- case "$2,$3" in
-   merge,)
-     /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
- 
- # ,|template,)
- #   /usr/bin/perl -i.bak -pe '
- #      print "\n" . `git diff --cached --name-status -r`
- #	 if /^#/ && $first++ == 0' "$1" ;;
- 
-   *) ;;
- esac
- 
- # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
- # grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/pre-push.sample audio_common_patched/.git/hooks/pre-push.sample
*** audio_common/.git/hooks/pre-push.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/pre-push.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,53 ****
- #!/bin/sh
- 
- # An example hook script to verify what is about to be pushed.  Called by "git
- # push" after it has checked the remote status, but before anything has been
- # pushed.  If this script exits with a non-zero status nothing will be pushed.
- #
- # This hook is called with the following parameters:
- #
- # $1 -- Name of the remote to which the push is being done
- # $2 -- URL to which the push is being done
- #
- # If pushing without using a named remote those arguments will be equal.
- #
- # Information about the commits which are being pushed is supplied as lines to
- # the standard input in the form:
- #
- #   <local ref> <local sha1> <remote ref> <remote sha1>
- #
- # This sample shows how to prevent push of commits where the log message starts
- # with "WIP" (work in progress).
- 
- remote="$1"
- url="$2"
- 
- z40=0000000000000000000000000000000000000000
- 
- while read local_ref local_sha remote_ref remote_sha
- do
- 	if [ "$local_sha" = $z40 ]
- 	then
- 		# Handle delete
- 		:
- 	else
- 		if [ "$remote_sha" = $z40 ]
- 		then
- 			# New branch, examine all commits
- 			range="$local_sha"
- 		else
- 			# Update to existing branch, examine new commits
- 			range="$remote_sha..$local_sha"
- 		fi
- 
- 		# Check for WIP commit
- 		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
- 		if [ -n "$commit" ]
- 		then
- 			echo >&2 "Found WIP commit in $local_ref, not pushing"
- 			exit 1
- 		fi
- 	fi
- done
- 
- exit 0
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/pre-rebase.sample audio_common_patched/.git/hooks/pre-rebase.sample
*** audio_common/.git/hooks/pre-rebase.sample	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/hooks/pre-rebase.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,169 ****
- #!/bin/sh
- #
- # Copyright (c) 2006, 2008 Junio C Hamano
- #
- # The "pre-rebase" hook is run just before "git rebase" starts doing
- # its job, and can prevent the command from running by exiting with
- # non-zero status.
- #
- # The hook is called with the following parameters:
- #
- # $1 -- the upstream the series was forked from.
- # $2 -- the branch being rebased (or empty when rebasing the current branch).
- #
- # This sample shows how to prevent topic branches that are already
- # merged to 'next' branch from getting rebased, because allowing it
- # would result in rebasing already published history.
- 
- publish=next
- basebranch="$1"
- if test "$#" = 2
- then
- 	topic="refs/heads/$2"
- else
- 	topic=`git symbolic-ref HEAD` ||
- 	exit 0 ;# we do not interrupt rebasing detached HEAD
- fi
- 
- case "$topic" in
- refs/heads/??/*)
- 	;;
- *)
- 	exit 0 ;# we do not interrupt others.
- 	;;
- esac
- 
- # Now we are dealing with a topic branch being rebased
- # on top of master.  Is it OK to rebase it?
- 
- # Does the topic really exist?
- git show-ref -q "$topic" || {
- 	echo >&2 "No such branch $topic"
- 	exit 1
- }
- 
- # Is topic fully merged to master?
- not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
- if test -z "$not_in_master"
- then
- 	echo >&2 "$topic is fully merged to master; better remove it."
- 	exit 1 ;# we could allow it, but there is no point.
- fi
- 
- # Is topic ever merged to next?  If so you should not be rebasing it.
- only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
- only_next_2=`git rev-list ^master           ${publish} | sort`
- if test "$only_next_1" = "$only_next_2"
- then
- 	not_in_topic=`git rev-list "^$topic" master`
- 	if test -z "$not_in_topic"
- 	then
- 		echo >&2 "$topic is already up-to-date with master"
- 		exit 1 ;# we could allow it, but there is no point.
- 	else
- 		exit 0
- 	fi
- else
- 	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
- 	/usr/bin/perl -e '
- 		my $topic = $ARGV[0];
- 		my $msg = "* $topic has commits already merged to public branch:\n";
- 		my (%not_in_next) = map {
- 			/^([0-9a-f]+) /;
- 			($1 => 1);
- 		} split(/\n/, $ARGV[1]);
- 		for my $elem (map {
- 				/^([0-9a-f]+) (.*)$/;
- 				[$1 => $2];
- 			} split(/\n/, $ARGV[2])) {
- 			if (!exists $not_in_next{$elem->[0]}) {
- 				if ($msg) {
- 					print STDERR $msg;
- 					undef $msg;
- 				}
- 				print STDERR " $elem->[1]\n";
- 			}
- 		}
- 	' "$topic" "$not_in_next" "$not_in_master"
- 	exit 1
- fi
- 
- <<\DOC_END
- 
- This sample hook safeguards topic branches that have been
- published from being rewound.
- 
- The workflow assumed here is:
- 
-  * Once a topic branch forks from "master", "master" is never
-    merged into it again (either directly or indirectly).
- 
-  * Once a topic branch is fully cooked and merged into "master",
-    it is deleted.  If you need to build on top of it to correct
-    earlier mistakes, a new topic branch is created by forking at
-    the tip of the "master".  This is not strictly necessary, but
-    it makes it easier to keep your history simple.
- 
-  * Whenever you need to test or publish your changes to topic
-    branches, merge them into "next" branch.
- 
- The script, being an example, hardcodes the publish branch name
- to be "next", but it is trivial to make it configurable via
- $GIT_DIR/config mechanism.
- 
- With this workflow, you would want to know:
- 
- (1) ... if a topic branch has ever been merged to "next".  Young
-     topic branches can have stupid mistakes you would rather
-     clean up before publishing, and things that have not been
-     merged into other branches can be easily rebased without
-     affecting other people.  But once it is published, you would
-     not want to rewind it.
- 
- (2) ... if a topic branch has been fully merged to "master".
-     Then you can delete it.  More importantly, you should not
-     build on top of it -- other people may already want to
-     change things related to the topic as patches against your
-     "master", so if you need further changes, it is better to
-     fork the topic (perhaps with the same name) afresh from the
-     tip of "master".
- 
- Let's look at this example:
- 
- 		   o---o---o---o---o---o---o---o---o---o "next"
- 		  /       /           /           /
- 		 /   a---a---b A     /           /
- 		/   /               /           /
- 	       /   /   c---c---c---c B         /
- 	      /   /   /             \         /
- 	     /   /   /   b---b C     \       /
- 	    /   /   /   /             \     /
-     ---o---o---o---o---o---o---o---o---o---o---o "master"
- 
- 
- A, B and C are topic branches.
- 
-  * A has one fix since it was merged up to "next".
- 
-  * B has finished.  It has been fully merged up to "master" and "next",
-    and is ready to be deleted.
- 
-  * C has not merged to "next" at all.
- 
- We would want to allow C to be rebased, refuse A, and encourage
- B to be deleted.
- 
- To compute (1):
- 
- 	git rev-list ^master ^topic next
- 	git rev-list ^master        next
- 
- 	if these match, topic has not merged in next at all.
- 
- To compute (2):
- 
- 	git rev-list master..topic
- 
- 	if this is empty, it is fully merged to "master".
- 
- DOC_END
--- 0 ----
diff -crB --new-file audio_common/.git/hooks/update.sample audio_common_patched/.git/hooks/update.sample
*** audio_common/.git/hooks/update.sample	2018-08-23 14:09:47.648985084 +0200
--- audio_common_patched/.git/hooks/update.sample	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,128 ****
- #!/bin/sh
- #
- # An example hook script to block unannotated tags from entering.
- # Called by "git receive-pack" with arguments: refname sha1-old sha1-new
- #
- # To enable this hook, rename this file to "update".
- #
- # Config
- # ------
- # hooks.allowunannotated
- #   This boolean sets whether unannotated tags will be allowed into the
- #   repository.  By default they won't be.
- # hooks.allowdeletetag
- #   This boolean sets whether deleting tags will be allowed in the
- #   repository.  By default they won't be.
- # hooks.allowmodifytag
- #   This boolean sets whether a tag may be modified after creation. By default
- #   it won't be.
- # hooks.allowdeletebranch
- #   This boolean sets whether deleting branches will be allowed in the
- #   repository.  By default they won't be.
- # hooks.denycreatebranch
- #   This boolean sets whether remotely creating branches will be denied
- #   in the repository.  By default this is allowed.
- #
- 
- # --- Command line
- refname="$1"
- oldrev="$2"
- newrev="$3"
- 
- # --- Safety check
- if [ -z "$GIT_DIR" ]; then
- 	echo "Don't run this script from the command line." >&2
- 	echo " (if you want, you could supply GIT_DIR then run" >&2
- 	echo "  $0 <ref> <oldrev> <newrev>)" >&2
- 	exit 1
- fi
- 
- if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
- 	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
- 	exit 1
- fi
- 
- # --- Config
- allowunannotated=$(git config --bool hooks.allowunannotated)
- allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
- denycreatebranch=$(git config --bool hooks.denycreatebranch)
- allowdeletetag=$(git config --bool hooks.allowdeletetag)
- allowmodifytag=$(git config --bool hooks.allowmodifytag)
- 
- # check for no description
- projectdesc=$(sed -e '1q' "$GIT_DIR/description")
- case "$projectdesc" in
- "Unnamed repository"* | "")
- 	echo "*** Project description file hasn't been set" >&2
- 	exit 1
- 	;;
- esac
- 
- # --- Check types
- # if $newrev is 0000...0000, it's a commit to delete a ref.
- zero="0000000000000000000000000000000000000000"
- if [ "$newrev" = "$zero" ]; then
- 	newrev_type=delete
- else
- 	newrev_type=$(git cat-file -t $newrev)
- fi
- 
- case "$refname","$newrev_type" in
- 	refs/tags/*,commit)
- 		# un-annotated tag
- 		short_refname=${refname##refs/tags/}
- 		if [ "$allowunannotated" != "true" ]; then
- 			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
- 			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
- 			exit 1
- 		fi
- 		;;
- 	refs/tags/*,delete)
- 		# delete tag
- 		if [ "$allowdeletetag" != "true" ]; then
- 			echo "*** Deleting a tag is not allowed in this repository" >&2
- 			exit 1
- 		fi
- 		;;
- 	refs/tags/*,tag)
- 		# annotated tag
- 		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
- 		then
- 			echo "*** Tag '$refname' already exists." >&2
- 			echo "*** Modifying a tag is not allowed in this repository." >&2
- 			exit 1
- 		fi
- 		;;
- 	refs/heads/*,commit)
- 		# branch
- 		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
- 			echo "*** Creating a branch is not allowed in this repository" >&2
- 			exit 1
- 		fi
- 		;;
- 	refs/heads/*,delete)
- 		# delete branch
- 		if [ "$allowdeletebranch" != "true" ]; then
- 			echo "*** Deleting a branch is not allowed in this repository" >&2
- 			exit 1
- 		fi
- 		;;
- 	refs/remotes/*,commit)
- 		# tracking branch
- 		;;
- 	refs/remotes/*,delete)
- 		# delete tracking branch
- 		if [ "$allowdeletebranch" != "true" ]; then
- 			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
- 			exit 1
- 		fi
- 		;;
- 	*)
- 		# Anything else (is there anything else?)
- 		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
- 		exit 1
- 		;;
- esac
- 
- # --- Finished
- exit 0
--- 0 ----
Binary files audio_common/.git/index and audio_common_patched/.git/index differ
diff -crB --new-file audio_common/.git/info/exclude audio_common_patched/.git/info/exclude
*** audio_common/.git/info/exclude	2018-08-23 14:09:47.644985187 +0200
--- audio_common_patched/.git/info/exclude	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,6 ****
- # git ls-files --others --exclude-from=.git/info/exclude
- # Lines that start with '#' are comments.
- # For a project mostly in C, the following would be a good set of
- # exclude patterns (uncomment them if you want to use them):
- # *.[oa]
- # *~
--- 0 ----
diff -crB --new-file audio_common/.git/logs/HEAD audio_common_patched/.git/logs/HEAD
*** audio_common/.git/logs/HEAD	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/logs/HEAD	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535026190 +0200	clone: from https://github.com/ros-drivers/audio_common.git
--- 0 ----
diff -crB --new-file audio_common/.git/logs/refs/heads/master audio_common_patched/.git/logs/refs/heads/master
*** audio_common/.git/logs/refs/heads/master	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/logs/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535026190 +0200	clone: from https://github.com/ros-drivers/audio_common.git
--- 0 ----
diff -crB --new-file audio_common/.git/logs/refs/remotes/origin/HEAD audio_common_patched/.git/logs/refs/remotes/origin/HEAD
*** audio_common/.git/logs/refs/remotes/origin/HEAD	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/logs/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- 0000000000000000000000000000000000000000 e2c2b058220581e1b7fb81142ec8d36193f7e07f Patrick Koch <p.koch@tum.de> 1535026190 +0200	clone: from https://github.com/ros-drivers/audio_common.git
--- 0 ----
Binary files audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.idx and audio_common_patched/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.idx differ
Binary files audio_common/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.pack and audio_common_patched/.git/objects/pack/pack-1ff849ef2aa07b8478b30661a122ceb8eba5c7ad.pack differ
diff -crB --new-file audio_common/.git/packed-refs audio_common_patched/.git/packed-refs
*** audio_common/.git/packed-refs	2018-08-23 14:09:50.372915024 +0200
--- audio_common_patched/.git/packed-refs	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,37 ****
- # pack-refs with: peeled fully-peeled 
- f207408361c16da322ed0ebce73e304aeeb0b3bd refs/remotes/origin/groovy-devel
- 5001fde42d54cc68b4907f4ab64536b07f1d1f5c refs/remotes/origin/hydro-devel
- e6a5eda3ec13b27e57e4b73931e04f559eb80d62 refs/remotes/origin/indigo-devel
- e2c2b058220581e1b7fb81142ec8d36193f7e07f refs/remotes/origin/master
- a4adacab381276d22dcafe788cd5f6fc5e7d3cf8 refs/remotes/origin/sound_play
- c1349f2d99bc662106a1049d2191b5e2e8842697 refs/tags/0.2.0
- 6a06826f01724d25373fde07a85d1f9ae66b878a refs/tags/0.2.1
- bad594726a8786f49ba0b121ad5fa44a26207db8 refs/tags/0.2.10
- f2e04adb831aa45d0706cac7862743cbb430dd3d refs/tags/0.2.11
- 8035148c69d1555a062bb4a331bcae2da5232093 refs/tags/0.2.12
- e6a5eda3ec13b27e57e4b73931e04f559eb80d62 refs/tags/0.2.13
- 0266461bd2c5253bfbaea4793838372bd8eb1cb4 refs/tags/0.2.2
- 2c96a456770f1e5994e2c3103178d8ebc14382d2 refs/tags/0.2.3
- 824df59d18cabe147a11d92c4565b5acab8de4f0 refs/tags/0.2.4
- c46a655f322e9e8a5ef586d7e14e2e7b61d4e0c1 refs/tags/0.2.5
- 423274dcacfee9eebb2faf1cf057ef77d9ea12bf refs/tags/0.2.6
- 259cb3c98dcd22d5f0a14ebf034e5abb0119c35a refs/tags/0.2.7
- 8a8d95c322d317aa111e9c25177bbaf37b559bdb refs/tags/0.2.8
- 3407fbb4f39512d82b254ef34cdf9535700e87e6 refs/tags/0.2.9
- eaf8b2f98417bb279a36d115d19cf96d0fc018ed refs/tags/0.3.0
- 1931af14cabf009c6d2b61a556c70f1c63a4b0d5 refs/tags/0.3.1
- ced2d652fac38ff9bf35cc15944bb8ba9ea32f90 refs/tags/0.3.2
- 681512eafb2fbfa79a1a52be3f21ffd1a71ea620 refs/tags/0.3.3
- ae410eb8922a9e45799281ad35225ed546c7f2cc refs/tags/audio_common-0.1.0
- c04500e7851f357f1284f4dd0821aefa7a0f87cd refs/tags/audio_common-0.1.1
- 99deb59c7e708d077cd126bbf292e41895d166fd refs/tags/audio_common-0.1.2
- 9aff2c61a9d717f038dd45c6df9400f3c9b67d44 refs/tags/audio_common-0.1.3
- 2e86dbfae29c2e241c84cf19de41c52fee30ff63 refs/tags/audio_common-0.1.4
- f588ed83ef7e0de80407cdd291ffd605bcaff721 refs/tags/audio_common-0.1.5
- b4c77e7c04f9025d0ceb4302e578a5028f1ae458 refs/tags/audio_common-0.1.6
- 681213334ccb0ff09a6ae0c274e3f211da944fc7 refs/tags/audio_common-0.1.8
- 55d249c8a78bf9709334ae723e4f130bbda702f8 refs/tags/audio_common-0.1.9
- 78a4f6d02481bdbe0f85d620336660d3cdb5b495 refs/tags/electric
- 177d8ee409898d343b5ecc836296479f5647fa16 refs/tags/fuerte
- ce0a56f28c1cc25424a3be78014bb8ed13f5f962 refs/tags/groovy
- be8843dba471b6f87fd32ac379dde14439ed3504 refs/tags/unstable
--- 0 ----
diff -crB --new-file audio_common/.git/refs/heads/master audio_common_patched/.git/refs/heads/master
*** audio_common/.git/refs/heads/master	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- e2c2b058220581e1b7fb81142ec8d36193f7e07f
--- 0 ----
diff -crB --new-file audio_common/.git/refs/remotes/origin/HEAD audio_common_patched/.git/refs/remotes/origin/HEAD
*** audio_common/.git/refs/remotes/origin/HEAD	2018-08-23 14:09:50.376914922 +0200
--- audio_common_patched/.git/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- ref: refs/remotes/origin/master
--- 0 ----
diff -crB --new-file audio_common/.gitignore audio_common_patched/.gitignore
*** audio_common/.gitignore	2018-08-23 14:09:50.420913791 +0200
--- audio_common_patched/.gitignore	1970-01-01 01:00:00.000000000 +0100
***************
*** 1 ****
- *.pyc
--- 0 ----
diff -crB --new-file audio_common/README.md audio_common_patched/README.md
*** audio_common/README.md	2018-08-23 14:09:50.424913688 +0200
--- audio_common_patched/README.md	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,27 ****
- # ROS audio\_common Package
- 
- This repository contains the ROS audio\_common package.
- 
- For user documentation, please refer to the [ROS Wiki page for audio\_common](http://wiki.ros.org/audio_common)
- 
- # Support
- 
- Please ask support questions on [ROS Answers](http://answers.ros.org/questions/).
- 
- # Building from source
- 
- On ROS Indigo or Jade, the `indigo-devel` branch is recommended.
- 
- On ROS Kinetic, the `master` branch is recommended.
- 
- # Development, Branch and Release Policy
- 
- This package is not under active development, but is accepting pull requests for bug fixes and new features. (Development may be done for serious bug fixes; pending maintainer time).
- 
- The `sound_play`, `groovy-devel` and `hydro-devel` branches are from previous ROS releases and are frozen; no new pull requests will be accepted on these branches.
- 
- The `indigo-devel` branch is the stable branch; only bug fixes are accepted on this branch. Periodic releases are done from `indigo-devel` into ROS Indigo and ROS Jade, with version numbers in the 0.2.x range.
- 
- The `master` branch is currently considered the development branch, and is released into ROS Kinetic with version numbers in the 0.3.x range. `master` is accepting new, non-breaking features and bug fixes.
- 
- Large, breaking changes such as changes to dependencies or the package API will be considered, but they will probably be staged into a development branch for release into the next major release of ROS (ROS L)
--- 0 ----
diff -crB --new-file audio_common/sound_play/action/SoundRequest.action audio_common_patched/sound_play/action/SoundRequest.action
*** audio_common/sound_play/action/SoundRequest.action	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/action/SoundRequest.action	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,7 ****
- SoundRequest sound_request
- ---
- bool playing
- time stamp
- ---
- bool playing
- time stamp
\ No newline at end of file
--- 0 ----
diff -crB --new-file audio_common/sound_play/CHANGELOG.rst audio_common_patched/sound_play/CHANGELOG.rst
*** audio_common/sound_play/CHANGELOG.rst	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/CHANGELOG.rst	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,245 ****
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Changelog for package sound_play
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- 0.3.3 (2018-05-22)
- ------------------
- * Fix gstreamer errors. Fixes `#108 <https://github.com/ros-drivers/audio_common/issues/108>`_
- * Contributors: trainman419
- 
- 0.3.2 (2018-05-02)
- ------------------
- * [sound_play] add option to select audio device to play / record (`#87 <https://github.com/ros-drivers/audio_common/issues/87>`_)
-   * [sound_play] add option to select audio device to play
-   * [sound_play] reformat README to markdown; add usage to set device via rosparam
-   * audio_capture: add option for selecting device to use
-   * audio_play: add option to select device for playing audio
-   * add device argument to launch files
-   Conflicts:
-   audio_capture/launch/capture.launch
-   audio_capture/launch/capture_to_file.launch
-   audio_capture/src/audio_capture.cpp
-   audio_play/launch/play.launch
-   sound_play/scripts/soundplay_node.py
- * Merge pull request `#95 <https://github.com/ros-drivers/audio_common/issues/95>`_ from yujinrobot/volume_check
-   [sound_play] volume check for cached sounds
- * [sound_play] checks if sound's Gst instance's volume has changed and resets it
- * Contributors: Austin, Naveed Usmani, Yuki Furuta
- 
- 0.3.1 (2016-08-28)
- ------------------
- * Update to new gstreamer rosdeps
- * Update sound_play to gstreamer 1.0
- * remove chance of uninitialised variable being called in a subscriber callback.
- * Add changelogs
- * Issue: The error checks for missing publisher/action client in sendMsg were inverted.
-   The non-blocking brach tested the action client while the blocking branch
-   tested the publisher.
-   Fix: Inverted the blocking boolean for both branchs.
- * sound_play: Fix build with -DCATKIN_ENABLE_TESTING=OFF.
-   https://bugs.gentoo.org/show_bug.cgi?id=567466
- * [soundplay_node] fix resources not being released on dict cleanup
-   This was resulting in the number of sink inputs reaching the maximum threshold,
-   (32 on ubuntu 14.04 with pulseaudio 4.0) after which no more sounds could be
-   played by the node. It would only happen if the rate of sounds being played was
-   slower than the dictionary cleanup.
- * depend on actionlib.
- * Introduce unit test to ensure soundclient is started correctly.
- * Example of using the explicit blocking parameter to override the class setting.
- * SoundClient can also explicitly specify whether or not to block while playing the sound.
-   Each play/repeat/say/... method can take an option blocking=True|False argument (using **kwargs), which over-rides the class-wide setting.
- * Merge pull request #62 from felixduvallet/set_queue_size
-   Set queue_size in soundplay_node Publisher
- * do both in same script.
- * Added script showing the various blocking/non-blocking ways of using SoundClient.
- * removed trailing whitespace only
- * loginfo -> logdebug.
- * Slightly more condensed version of thresholding.
- * Enable blocking calls inside libsoundplay's SoundClient.
-   This makes use of the actionlib interface provided by soundplay_node, by ensuring SoundClient receives a response before returning.
-   Turn this on by: SoundClient(blocking=true).
- * Use new-style python classes (inherits from object).
- * removed trailing whitespace.
- * Set the volume in each of the sound_play actionlib tests.
-   This makes the script actually play the sounds it requests.
- * Specify queue size explicitly.
-   Removed warning message printed each time soundplay_node was started.
- * remove trailing whitespace only.
- * Change wiki urls
- * Fix test target name collision. Fixes #49
- * sound_play: cpp header conforms to the style guide
- * sound_play: update scripts to allow volume to be set
- * sound_play: updated tests to include volume changes
- * sound_play: add ability to specify volume at which to play sounds
-   Also changed error to warning as per todo
- * sound_play: fix indentation and comment inconsistencies
- * sound_play: remove some raw prints cluttering output
- * sound_play: added queue_size to SoundClient init
-   Should prevent warning being displayed whenever the client is created.
-   Fixes issue #43
- * add simple-actionlib functionality to sound_play
- * sound_play: Added functions to play files relative to a package path
- * Update maintainer email
- * Contributors: Alexis Ballier, Austin, Daniel Stonier, David V. Lu, Felix Duvallet, Matthias Nieuwenhuisen, Michal Staniaszek, Neowizard, aginika, trainman419
- 
- 0.2.11 (2016-02-16)
- -------------------
- * Add changelogs
- * Fix bug in say.py. Fixes `#72 <https://github.com/ros-drivers/audio_common/issues/72>`_
- * Contributors: trainman419
- 
- 0.2.10 (2016-01-21)
- -------------------
- * Add changelogs
- * Issue: The error checks for missing publisher/action client in sendMsg were inverted.
-   The non-blocking brach tested the action client while the blocking branch
-   tested the publisher.
-   Fix: Inverted the blocking boolean for both branchs.
- * sound_play: Fix build with -DCATKIN_ENABLE_TESTING=OFF.
-   https://bugs.gentoo.org/show_bug.cgi?id=567466
- * Contributors: Alexis Ballier, Neowizard, trainman419
- 
- 0.2.9 (2015-12-02)
- ------------------
- * Add changelogs
- * [soundplay_node] fix resources not being released on dict cleanup
-   This was resulting in the number of sink inputs reaching the maximum threshold,
-   (32 on ubuntu 14.04 with pulseaudio 4.0) after which no more sounds could be
-   played by the node. It would only happen if the rate of sounds being played was
-   slower than the dictionary cleanup.
- * depend on actionlib.
- * Introduce unit test to ensure soundclient is started correctly.
- * Example of using the explicit blocking parameter to override the class setting.
- * SoundClient can also explicitly specify whether or not to block while playing the sound.
-   Each play/repeat/say/... method can take an option blocking=True|False argument (using **kwargs), which over-rides the class-wide setting.
-   Conflicts:
-   sound_play/src/sound_play/libsoundplay.py
- * do both in same script.
- * Added script showing the various blocking/non-blocking ways of using SoundClient.
- * removed trailing whitespace only
-   Conflicts:
-   sound_play/scripts/say.py
- * loginfo -> logdebug.
- * Enable blocking calls inside libsoundplay's SoundClient.
-   This makes use of the actionlib interface provided by soundplay_node, by ensuring SoundClient receives a response before returning.
-   Turn this on by: SoundClient(blocking=true).
-   Conflicts:
-   sound_play/src/sound_play/libsoundplay.py
- * Use new-style python classes (inherits from object).
-   Conflicts:
-   sound_play/src/sound_play/libsoundplay.py
- * removed trailing whitespace.
-   Conflicts:
-   sound_play/src/sound_play/libsoundplay.py
- * Revert "Set the volume in each of the sound_play actionlib tests."
-   This reverts commit 55ab08c882809fc6d21affb849a7dac9f1901867.
-   Indigo-devel does not have the volume API
- * Set the volume in each of the sound_play actionlib tests.
-   This makes the script actually play the sounds it requests.
- * Specify queue size explicitly.
-   Removed warning message printed each time soundplay_node was started.
- * remove trailing whitespace only.
- * Fix wiki links
- * Contributors: David V. Lu, Felix Duvallet, Michal Staniaszek, trainman419
- 
- 0.2.8 (2015-10-02)
- ------------------
- * Fix test target name collision. Fixes `#49 <https://github.com/ros-drivers/audio_common/issues/49>`_
- * sound_play: remove some raw prints cluttering output
- * sound_play: added queue_size to SoundClient init
-   Should prevent warning being displayed whenever the client is created.
-   Fixes issue `#43 <https://github.com/ros-drivers/audio_common/issues/43>`_
- * add simple-actionlib functionality to sound_play
- * sound_play: Added functions to play files relative to a package path
- * Update maintainer email
- * Contributors: Matthias Nieuwenhuisen, Michal Staniaszek, aginika, trainman419
- 
- 0.2.7 (2014-07-25)
- ------------------
- 
- 0.2.6 (2014-02-26)
- ------------------
- * Fix path resolution in python soundplay lib.
- * now importing roslib. closes `#33 <https://github.com/ros-drivers/audio_common/issues/33>`_
- * Contributors: Piyush Khandelwal, trainman419
- 
- 0.2.5 (2014-01-23)
- ------------------
- * "0.2.5"
- * Install sounds. Fixes `#29 <https://github.com/ros-drivers/audio_common/issues/29>`_.
- * install sound_play.h and export include folder
- * Contributors: ahendrix, trainman419, v4hn
- 
- 0.2.4 (2013-09-10)
- ------------------
- * Fix cmake ordering.
- * Contributors: Austin Hendrix
- 
- 0.2.3 (2013-07-15)
- ------------------
- * Fix python.
- * Contributors: Austin Hendrix
- 
- 0.2.2 (2013-04-10)
- ------------------
- * Actually add proper dependency on message generation.
- * Reorder CMakeLists.txt.
- * Contributors: Austin Hendrix
- 
- 0.2.1 (2013-04-08 13:59)
- ------------------------
- 
- 0.2.0 (2013-04-08 13:49)
- ------------------------
- * Finish catkinizing audio_common.
- * Start catkinizing sound_play.
- * Fix typo in package.xml
- * Versions and more URLs.
- * Convert manifests to package.xml
- * Ditch old makefiles.
- * Use festival default voice from libsoundplay.
- * Set myself as the maintainer.
- * Fix filehandle leak and add debug statements.
- * Updates manifest
- * Updated manifests for rodep2
- * Fixed sound_play
- * Added test wave
- * Cleaned up the test script
- * Added default voice to say command
- * Updated the gstreamer rosdeps
- * Removed comment
- * Added diagnostic_msgs to sound_play
- * Added a rosdep.yaml file
- * Added ability to use different festival voices
- * Added exit(1) when import of pygame fails. This makes the error message easier to notice.
- * Added Ubuntu platform tags to manifest
- * Added a link to the troubleshooting wiki page in the diagnostic message as requested by `#4070 <https://github.com/ros-drivers/audio_common/issues/4070>`_.
- * Took out the deprecated API.
- * Sound play now publishes header timestamp in message. `#3822 <https://github.com/ros-drivers/audio_common/issues/3822>`_
- * Cleaned up temp file generation when doing text to speach. Now uses the tempfile module.
- * Adding missing export of headers for sound_play C++ API
- * Changing node name for sound play diagnostics, `#3599 <https://github.com/ros-drivers/audio_common/issues/3599>`_
- * Added test.launch to run sound server and a test client.
- * Remove use of deprecated rosbuild macros
- * Replaced review tag with standardized message
- * Updated review status
- * Added a launch file to start soundplay_node.py
- * Made the sound_play client libraries be more explicit about what to do when the node is not running.
- * Updated manifest description
- * Updated copyright year
- * fixed XML typo
- * updated package description
- * Added a copyright message.
- * Removed debugging message from sound_play node.
- * Added tests for new sound_play python API and fixed a few bugs.
- * Fixed missing self arguments in sound_play libsoundplay.py
- * Upgraded the python sound_play API
- * Converted non-camelCase methods to camelCase in sound_play C++ API
- * Changed Lock to RLock to fix `#2801 <https://github.com/ros-drivers/audio_common/issues/2801>`_
- * Made the deprecation of SoundHandle into a warning.
- * Added debug messages
- * Updated soundplay_node to publish diagnostics and increased the number of active channels.
- * Added diagnostic_msgs dependency to sound_play
- * sound_play: Renamed SoundHandle to SoundClient. Added Sound-centric C++ API. Changed byte to int8 in msg file. Updated documentation.
- * migration part 1
- * Contributors: Austin Hendrix, Nate Koenig, blaise, blaisegassend, eitan, gerkey, kwc, nkoenig, watts, wheeler
--- 0 ----
diff -crB --new-file audio_common/sound_play/CMakeLists.txt audio_common_patched/sound_play/CMakeLists.txt
*** audio_common/sound_play/CMakeLists.txt	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,44 ****
- cmake_minimum_required(VERSION 2.8.3)
- 
- project(sound_play)
- 
- find_package(catkin REQUIRED COMPONENTS message_generation roscpp actionlib_msgs)
- 
- add_action_files(DIRECTORY action FILES SoundRequest.action)
- add_message_files(DIRECTORY msg FILES SoundRequest.msg)
- 
- include_directories(include ${catkin_INCLUDE_DIRS})
- 
- catkin_python_setup()
- 
- generate_messages(DEPENDENCIES actionlib_msgs)
- 
- catkin_package(CATKIN_DEPENDS message_runtime actionlib_msgs
-                INCLUDE_DIRS include)
- 
- if(CATKIN_ENABLE_TESTING)
-     catkin_add_nosetests(scripts/test)
- 
-     add_subdirectory(test)
- endif()
- 
- install(PROGRAMS
-    scripts/playbuiltin.py
-    scripts/play.py
-    scripts/say.py
-    scripts/shutup.py
-    scripts/soundplay_node.py
-    scripts/test.py
-    scripts/test_actionlib_client.py
-       DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
- 
- install(FILES
-    soundplay_node.launch
-    test.launch
-       DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
- 
- install(DIRECTORY include/${PROJECT_NAME}/
-         DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})
- 
- install(DIRECTORY sounds
-         DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
--- 0 ----
diff -crB --new-file audio_common/sound_play/include/sound_play/sound_play.h audio_common_patched/sound_play/include/sound_play/sound_play.h
*** audio_common/sound_play/include/sound_play/sound_play.h	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/include/sound_play/sound_play.h	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,410 ****
- /*
-  ***********************************************************
-  * Software License Agreement (BSD License)
-  *
-  *  Copyright (c) 2009, Willow Garage, Inc.
-  *  All rights reserved.
-  *
-  *  Redistribution and use in source and binary forms, with or without
-  *  modification, are permitted provided that the following conditions
-  *  are met:
-  *
-  *   * Redistributions of source code must retain the above copyright
-  *     notice, this list of conditions and the following disclaimer.
-  *   * Redistributions in binary form must reproduce the above
-  *     copyright notice, this list of conditions and the following
-  *     disclaimer in the documentation and/or other materials provided
-  *     with the distribution.
-  *   * Neither the name of the Willow Garage nor the names of its
-  *     contributors may be used to endorse or promote products derived
-  *     from this software without specific prior written permission.
-  *
-  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-  *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-  *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-  *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-  *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-  *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-  *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-  *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-  *  POSSIBILITY OF SUCH DAMAGE.
-  ***********************************************************
-  */
- 
- #ifndef __SOUND_PLAY__SOUND_PLAY__H__
- #define __SOUND_PLAY__SOUND_PLAY__H__
- 
- #include <string>
- #include <ros/ros.h>
- #include <ros/node_handle.h>
- #include <sound_play/SoundRequest.h>
- #include <boost/thread.hpp>
- 
- namespace sound_play
- {
- 
- /** \brief Class that publishes messages to the sound_play node.
-  *
-  * This class is a helper class for communicating with the sound_play node
-  * via the \ref sound_play::SoundRequest message. It has two ways of being used:
-  *
-  * - It can create Sound classes that represent a particular sound which
-  *   can be played, repeated or stopped.
-  *
-  * - It provides methods for each way in which the sound_play::SoundRequest
-  *   message can be invoked.
-  */
- 
- class SoundClient
- {
- public:
-   class Sound
-   {
-     friend class SoundClient;
-   private:
-     int snd_;
-     float vol_;
-     std::string arg_;
-     std::string arg2_;
-     SoundClient *client_;
- 
-     Sound(SoundClient *sc, int snd, const std::string &arg, const std::string arg2 = std::string(), const float vol = 1.0f)
-     {
-       client_ = sc;
-       snd_ = snd;
-       arg_ = arg;
-       arg2_ = arg2;
-       vol_ = vol;
-     }
- 
-   public:
-     /** \brief Play the Sound.
-      *
-      * This method causes the Sound to be played once.
-      */
-     void play()
-     {
-       client_->sendMsg(snd_, SoundRequest::PLAY_ONCE, arg_, arg2_, vol_);
-     }
- 
-     /** \brief Play the Sound repeatedly.
-      *
-      * This method causes the Sound to be played repeatedly until stop() is
-      * called.
-      */
-     void repeat()
-     {
-       client_->sendMsg(snd_, SoundRequest::PLAY_START, arg_, arg2_, vol_);
-     }
- 
-     /** \brief Stop Sound playback.
-      *
-      * This method causes the Sound to stop playing.
-      */
-     void stop()
-     {
-       client_->sendMsg(snd_, SoundRequest::PLAY_STOP, arg_, arg2_, vol_);
-     }
-   };
- 
-   /** \brief Create a SoundClient that publishes on the given topic
-    *
-    * Creates a SoundClient that publishes to the given topic relative to the
-    * given NodeHandle.
-    *
-    * \param nh Node handle to use when creating the topic.
-    *
-    * \param topic Topic to publish to.
-    */
-   SoundClient(ros::NodeHandle &nh, const std::string &topic)
-   {
-     init(nh, topic);
-   }
- 
-   /** \brief Create a SoundClient with the default topic
-    *
-    * Creates a SoundClient that publishes to "robotsound".
-    */
-   SoundClient()
-   {
-     init(ros::NodeHandle(), "robotsound");
-   }
- 
-   /** \brief Create a voice Sound.
-    *
-    * Creates a Sound corresponding to saying the indicated text.
-    *
-    * \param s Text to say
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   Sound voiceSound(const std::string &s, float volume = 1.0f)
-   {
-     return Sound(this, SoundRequest::SAY, s, "", volume);
-   }
- 
-   /** \brief Create a wave Sound.
-    *
-    * Creates a Sound corresponding to indicated file.
-    *
-    * \param s File to play. Should be an absolute path that exists on the
-    * machine running the sound_play node.
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   Sound waveSound(const std::string &s, float volume = 1.0f)
-   {
-     return Sound(this, SoundRequest::PLAY_FILE, s, "", volume);
-   }
- 
-   /** \brief Create a wave Sound from a package.
-    *
-    * Creates a Sound corresponding to indicated file.
-    *
-    * \param p Package containing the sound file.
-    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
-    * on the computer on which the sound_play node is running
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   Sound waveSoundFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
-   {
-     return Sound(this, SoundRequest::PLAY_FILE, s, p, volume);
-   }
- 
-   /** \brief Create a builtin Sound.
-    *
-    * Creates a Sound corresponding to indicated builtin wave.
-    *
-    * \param id Identifier of the sound to play.
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   Sound builtinSound(int id, float volume = 1.0f)
-   {
-     return Sound(this, id, "", "", volume);
-   }
- 
-   /** \brief Say a string
-    *
-    * Send a string to be said by the sound_node. The vocalization can be
-    * stopped using stopSaying or stopAll.
-    *
-    * \param s String to say
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void say(const std::string &s, const std::string &voice="voice_kal_diphone", float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_ONCE, s, voice, volume);
-   }
- 
-   /** \brief Say a string repeatedly
-    *
-    * The string is said repeatedly until stopSaying or stopAll is used.
-    *
-    * \param s String to say repeatedly
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void repeat(const std::string &s, float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_START, s, "", volume);
-   }
- 
-   /** \brief Stop saying a string
-    *
-    * Stops saying a string that was previously started by say or repeat. The
-    * argument indicates which string to stop saying.
-    *
-    * \param s Same string as in the say or repeat command
-    */
-   void stopSaying(const std::string &s)
-   {
-     sendMsg(SoundRequest::SAY, SoundRequest::PLAY_STOP, s, "");
-   }
- 
-   /** \brief Plays a WAV or OGG file
-    *
-    * Plays a WAV or OGG file once. The playback can be stopped by stopWave or
-    * stopAll.
-    *
-    * \param s Filename of the WAV or OGG file. Must be an absolute path valid
-    * on the computer on which the sound_play node is running
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void playWave(const std::string &s, float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_ONCE, s, "", volume);
-   }
- 
-   /** \brief Plays a WAV or OGG file repeatedly
-    *
-    * Plays a WAV or OGG file repeatedly until stopWave or stopAll is used.
-    *
-    * \param s Filename of the WAV or OGG file. Must be an absolute path valid
-    * on the computer on which the sound_play node is running.
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void startWave(const std::string &s, float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_START, s, "", volume);
-   }
- 
-   /** \brief Stop playing a WAV or OGG file
-    *
-    * Stops playing a file that was previously started by playWave or
-    * startWave.
-    *
-    * \param s Same string as in the playWave or startWave command
-    */
-   void stopWave(const std::string &s)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_STOP, s);
-   }
- 
-   /** \brief Plays a WAV or OGG file from a package
-    *
-    * Plays a WAV or OGG file once. The playback can be stopped by stopWaveFromPkg or
-    * stopAll.
-    *
-    * \param p Package name containing the sound file.
-    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
-    * on the computer on which the sound_play node is running
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void playWaveFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_ONCE, s, p, volume);
-   }
- 
-   /** \brief Plays a WAV or OGG file repeatedly
-    *
-    * Plays a WAV or OGG file repeatedly until stopWaveFromPkg or stopAll is used.
-    *
-    * \param p Package name containing the sound file.
-    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
-    * on the computer on which the sound_play node is running
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void startWaveFromPkg(const std::string &p, const std::string &s, float volume = 1.0f)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_START, s, p, volume);
-   }
- 
-   /** \brief Stop playing a WAV or OGG file
-    *
-    * Stops playing a file that was previously started by playWaveFromPkg or
-    * startWaveFromPkg.
-    *
-    * \param p Package name containing the sound file.
-    * \param s Filename of the WAV or OGG file. Must be an path relative to the package valid
-    * on the computer on which the sound_play node is running
-    */
-   void stopWaveFromPkg(const std::string &p, const std::string &s)
-   {
-     sendMsg(SoundRequest::PLAY_FILE, SoundRequest::PLAY_STOP, s, p);
-   }
- 
-   /** \brief Play a buildin sound
-    *
-    * Starts playing one of the built-in sounds. built-ing sounds are documented
-    * in \ref SoundRequest.msg. Playback can be stopped by stopAll.
-    *
-    * \param sound Identifier of the sound to play.
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void play(int sound, float volume = 1.0f)
-   {
-     sendMsg(sound, SoundRequest::PLAY_ONCE, "", "", volume);
-   }
- 
-   /** \brief Play a buildin sound repeatedly
-    *
-    * Starts playing one of the built-in sounds repeatedly until stop or stopAll 
-    * is used. Built-in sounds are documented in \ref SoundRequest.msg.
-    *
-    * \param sound Identifier of the sound to play.
-    * \param volume Volume at which to play the sound. 0 is mute, 1.0 is 100%.
-    */
-   void start(int sound, float volume = 1.0f)
-   {
-     sendMsg(sound, SoundRequest::PLAY_START, "", "", volume); 
-   }
- 
-   /** \brief Stop playing a built-in sound
-    *
-    * Stops playing a built-in sound started with play or start.
-    *
-    * \param sound Same sound that was used to start playback.
-    */
-   void stop(int sound)
-   {
-     sendMsg(sound, SoundRequest::PLAY_STOP);
-   }
- 
-   /** \brief Stop all currently playing sounds
-    *
-    * This method stops all speech, wave file, and built-in sound playback.
-    */
-   void stopAll()
-   {
-     stop(SoundRequest::ALL);
-   }
- 
-   /** \brief Turns warning messages on or off.
-    *
-    * If a message is sent when no node is subscribed to the topic, a
-    * warning message is printed. This method can be used to enable or
-    * disable warnings.
-    *
-    * \param state True to turn off messages, false to turn them on.
-    */
-   void setQuiet(bool state)
-   {
-     quiet_ = state;
-   }
- 
- private:
-   void init(ros::NodeHandle nh, const std::string &topic)
-   {
-     nh_ = nh;
-     pub_ = nh.advertise<sound_play::SoundRequest>(topic, 5);
-     quiet_ = false;
-   }
- 
-   void sendMsg(int snd, int cmd, const std::string &s = "", const std::string &arg2 = "", const float &vol = 1.0f)
-   {
-     boost::mutex::scoped_lock lock(mutex_);
- 
-     if (!nh_.ok())
-       return;
- 
-     SoundRequest msg;
-     msg.sound = snd;
-     msg.command = cmd;
-     msg.arg = s;
-     msg.arg2 = arg2;
- 
-     // ensure volume is in the correct range
-     if (vol < 0)
-       msg.volume = 0;
-     else if (vol > 1.0)
-       msg.volume = 1.0f;
-     else
-       msg.volume = vol;
- 
-     pub_.publish(msg);
- 
-     if (pub_.getNumSubscribers() == 0 && !quiet_)
-       ROS_WARN("Sound command issued, but no node is subscribed to the topic. Perhaps you forgot to run soundplay_node.py");
-   }
- 
-   bool quiet_;
-   ros::NodeHandle nh_;
-   ros::Publisher pub_;
-   boost::mutex mutex_;
- };
- 
- typedef SoundClient::Sound Sound;
- 
- };
- 
- #endif
--- 0 ----
diff -crB --new-file audio_common/sound_play/mainpage.dox audio_common_patched/sound_play/mainpage.dox
*** audio_common/sound_play/mainpage.dox	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/mainpage.dox	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,23 ****
- /**
- 
- \mainpage
- \htmlinclude manifest.html
- 
- The \b sound_play package provides a way to say strings,
- play WAV or OGG files and to play builtin sounds. Documentation for the
- package can be found here at http://www.ros.org/wiki/sound_play 
- 
- Multiple sounds can be played concurrently (up to 4 currently because of
- limitations in pygame).
- 
- Python and C++ client classes are provide for ease of use:
- 
- - sound_play::SoundClient and sound_play::SoundClient::Sound for C++
- - libsoundplay::SoundClient and libsoundplay::SoundClient::Sound for Python
- 
- Example uses are in:
- 
- - test.cpp
- - test.py
- 
- */
--- 0 ----
diff -crB --new-file audio_common/sound_play/msg/SoundRequest.msg audio_common_patched/sound_play/msg/SoundRequest.msg
*** audio_common/sound_play/msg/SoundRequest.msg	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/msg/SoundRequest.msg	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,30 ****
- # IMPORTANT: You should never have to generate this message yourself.
- # Use the sound_play::SoundClient C++ helper or the
- # sound_play.libsoundplay.SoundClient Python helper.
- 
- # Sounds
- int8 BACKINGUP = 1
- int8 NEEDS_UNPLUGGING = 2
- int8 NEEDS_PLUGGING = 3
- int8 NEEDS_UNPLUGGING_BADLY = 4
- int8 NEEDS_PLUGGING_BADLY = 5
- 
- # Sound identifiers that have special meaning
- int8 ALL = -1 # Only legal with PLAY_STOP
- int8 PLAY_FILE = -2
- int8 SAY = -3
- 
- int8 sound # Selects which sound to play (see above)
- 
- # Commands
- int8 PLAY_STOP = 0 # Stop this sound from playing
- int8 PLAY_ONCE = 1 # Play the sound once
- int8 PLAY_START = 2 # Play the sound in a loop until a stop request occurs
- 
- int8 command # Indicates what to do with the sound
- 
- # Volume at which to play the sound, with 0 as mute and 1.0 as 100%.
- float32 volume
- 
- string arg # file name or text to say
- string arg2 # other arguments
--- 0 ----
diff -crB --new-file audio_common/sound_play/package.xml audio_common_patched/sound_play/package.xml
*** audio_common/sound_play/package.xml	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/package.xml	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,43 ****
- <package>
-    <name>sound_play</name>
-    <version>0.3.3</version>
-    <description>
-       sound_play provides a ROS node that translates commands on a ROS topic (<tt>robotsound</tt>) into sounds. The node supports built-in sounds, playing OGG/WAV files, and doing speech synthesis via festival. C++ and Python bindings allow this node to be used without understanding the details of the message format, allowing faster development and resilience to message format changes.
-    </description>
-    <maintainer email="namniart@gmail.com">Austin Hendrix</maintainer>
-    <author>Blaise Gassend</author>
-    <license>BSD</license>
-    <url type="website">http://ros.org/wiki/sound_play</url>
-    <url type="repository">https://github.com/ros-drivers/audio_common</url>
-    <url type="bugtracker">https://github.com/ros-drivers/audio_common/issues</url>
- 
-    <buildtool_depend>catkin</buildtool_depend>
- 
-    <build_depend>roscpp</build_depend>
-    <build_depend>roslib</build_depend>
-    <build_depend>actionlib_msgs</build_depend>
-    <build_depend>actionlib</build_depend>
-    <build_depend>audio_common_msgs</build_depend>
-    <build_depend>diagnostic_msgs</build_depend>
-    <build_depend>message_generation</build_depend>
- 
-    <run_depend>roscpp</run_depend>
-    <run_depend>roslib</run_depend>
-    <run_depend>actionlib_msgs</run_depend>
-    <run_depend>audio_common_msgs</run_depend>
-    <run_depend>diagnostic_msgs</run_depend>
- 
-    <run_depend>python-gi</run_depend>
-    <run_depend>gstreamer1.0</run_depend>
-    <run_depend>gstreamer1.0-plugins-base</run_depend>
-    <run_depend>gstreamer1.0-plugins-ugly</run_depend>
-    <run_depend>gstreamer1.0-plugins-good</run_depend>
- 
-    <run_depend>rospy</run_depend>
-    <run_depend>festival</run_depend>
-    <run_depend>message_runtime</run_depend>
- 
-    <export>
-       <cpp cflags="-I${prefix}/include -I${prefix}/msg/cpp" />
-    </export>
- </package>
--- 0 ----
diff -crB --new-file audio_common/sound_play/README.md audio_common_patched/sound_play/README.md
*** audio_common/sound_play/README.md	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/README.md	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,67 ****
- sound_play
- =========
- 
- ## Dependencies
- 
- - python-pygame
- - festival
- - festvox-don
- - alsa-base
- - alsa-tools
- 
- ## Checking that the speaker/sound card is recognized by the kernel
- 
- `cat /proc/asound/cards`
- 
- Your card should be in the list. Make note of the number in front of the
- card, it will be used to tell alsa where to play sound from.
- 
- If your sound device does not show up, your kernel may not support it, or
- the module may not be loaded. For usb speakers, you may want to try:
- 
- `modprobe snd-usb-audio`
- 
- (not sure if this list is exhaustive)
- 
- ## Telling alsa which sound card/speaker to use
- 
- Run (replace 75 with the number of the sound device to use):
- 
- `asoundconf set-default-card 75`
- 
- This will create .asoundrc.asoundconf in your home directory.
- To make alsa use these settings, add the following line to `~/.asoundrc`
- 
- `include ".asoundrc.asoundconf"`
- 
- To set this default to all users, copy this to the system-wide alsa
- configuration file:
- 
- `mv ~/.asoundrc.asoundconf /etc/asound.conf`
- 
- ## Getting started
- 
- Start the sound play node, and have a look at the scripts in the scripts
- directory that exercise the node's functionality. 
- 
- ## Specify Device via ROS Param
- 
- Besides setting default device as system wide settings, you can also specify audio device via `rosparam`:
- 
- ``` xml
- <launch>
-   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py">
-     <param name="device" value="hw:1,0" />
-   </node>
- </launch>
- ```
- 
- or simply run: `rosrun sound_play soundplay_node.py _device:="hw:1,0"`
- 
- In the launch file above, `~device` parameter is set to `hw:1,0`, which tells `soundplay_node` to use audio device No. `0` connected to audio card No.`1`.
- To find card/device number which you want to use, execute:
- 
- ``` bash
- sudo aplay -l
- ```
- 
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/playbuiltin.py audio_common_patched/sound_play/scripts/playbuiltin.py
*** audio_common/sound_play/scripts/playbuiltin.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/playbuiltin.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,65 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- import sys
- 
- if __name__ == '__main__':
-     if len(sys.argv) < 2 or len(sys.argv) > 3 or sys.argv[1] == '--help':
-         print 'Usage: %s <sound_id> [volume]'%sys.argv[0]
-         print
-         print 'Plays one of the built-in sounds based on its integer ID. Look at the sound_play/SoundRequest message definition for IDs.\n The (optional) volume parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
-         exit(1)
- 
-     # Import here so that usage is fast.
-     import rospy
-     from sound_play.msg import SoundRequest
-     from sound_play.libsoundplay import SoundClient
-     
-     rospy.init_node('play', anonymous = True)
-     
-     soundhandle = SoundClient()
-     rospy.sleep(1)
-     
-     num = int(sys.argv[1])
-     volume = float(sys.argv[2]) if len(sys.argv) == 3 else 1.0
- 
-     print 'Playing sound %i.'%num
- 
-     soundhandle.play(num, volume)
- 
-     rospy.sleep(1)
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/playpackage.py audio_common_patched/sound_play/scripts/playpackage.py
*** audio_common/sound_play/scripts/playpackage.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/playpackage.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,62 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Matthias Nieuwenhuisen, Blaise Gassend
- 
- 
- import sys
- 
- if __name__ == '__main__':
-     if len(sys.argv) < 3 or len(sys.argv) > 4 or sys.argv[1] == '--help':
-         print 'Usage: %s package sound_to_play.(ogg|wav) [volume]'%sys.argv[0]
-         print
-         print 'Plays an .OGG or .WAV file. The path to the file should be relative to the package, and be valid on the computer on which sound_play is running. \n The (optional) volume parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
-         exit(1)
-     
-     # Import after printing usage for speed.
-     import rospy
-     from sound_play.msg import SoundRequest
-     from sound_play.libsoundplay import SoundClient
- 
-     rospy.init_node('play', anonymous = True)
-     soundhandle = SoundClient()
- 
-     volume = float(sys.argv[3]) if len(sys.argv) == 4 else 1.0
-     
-     rospy.sleep(1)
-     print 'Playing "%s" from pkg "%s".'%(sys.argv[2], sys.argv[1])
-     soundhandle.playWaveFromPkg(sys.argv[1], sys.argv[2], volume)
-     rospy.sleep(1)
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/play.py audio_common_patched/sound_play/scripts/play.py
*** audio_common/sound_play/scripts/play.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/play.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,63 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- 
- import sys
- 
- if __name__ == '__main__':
-     if len(sys.argv) < 2 or len(sys.argv) > 3 or sys.argv[1] == '--help':
-         print 'Usage: %s sound_to_play.(ogg|wav) [volume]'%sys.argv[0]
-         print
-         print 'Plays an .OGG or .WAV file. The path to the file should be absolute, and be valid on the computer on which sound_play is running.\n The (optional) second parameter sets the volume for the sound as a value between 0 and 1.0, where 0 is mute.'
-         exit(1)
- 
-     # Import after printing usage for speed.
-     import rospy
-     from sound_play.msg import SoundRequest
-     from sound_play.libsoundplay import SoundClient
- 
-     rospy.init_node('play', anonymous = True)
-     soundhandle = SoundClient()
- 
-     rospy.sleep(1)
-     print 'Playing "%s".'%sys.argv[1]
- 
-     volume = float(sys.argv[2]) if len(sys.argv) == 3 else 1.0
-         
-     soundhandle.playWave(sys.argv[1], volume)
-     rospy.sleep(1)
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/say.py audio_common_patched/sound_play/scripts/say.py
*** audio_common/sound_play/scripts/say.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/say.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,83 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- 
- import sys
- 
- if __name__ == '__main__':
-     if len(sys.argv) > 1 and sys.argv[1] == '--help':
-         print 'Usage: %s \'String to say.\''%sys.argv[0]
-         print '       %s < file_to_say.txt'%sys.argv[0]
-         print
-         print 'Says a string. For a string on the command line, you must use quotes as'
-         print 'appropriate. For a string on standard input, the command will wait for'
-         print 'EOF before saying anything.'
-         exit(-1)
- 
-     # Import after printing usage for speed.
-     import rospy
-     from sound_play.msg import SoundRequest
-     from sound_play.libsoundplay import SoundClient
- 
-     if len(sys.argv) == 1:
-         print 'Awaiting something to say on standard input.'
- 
-     # Ordered this way to minimize wait time.
-     rospy.init_node('say', anonymous = True)
-     soundhandle = SoundClient()
-     rospy.sleep(1)
- 
-     voice = 'voice_kal_diphone'
-     volume = 1.0
- 
-     if len(sys.argv) == 1:
-         s = sys.stdin.read()
-     else:
-         s = sys.argv[1]
- 
-         if len(sys.argv) > 2:
-             voice = sys.argv[2]
-         if len(sys.argv) > 3:
-             volume = float(sys.argv[3])
- 
-     print 'Saying: %s' % s
-     print 'Voice: %s' % voice
-     print 'Volume: %s' % volume
- 
-     soundhandle.say(s, voice, volume)
-     rospy.sleep(1)
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/shutup.py audio_common_patched/sound_play/scripts/shutup.py
*** audio_common/sound_play/scripts/shutup.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/shutup.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,59 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- import rospy
- from sound_play.msg import SoundRequest
- from sound_play.libsoundplay import SoundClient
- 
- if __name__ == '__main__':
-     rospy.init_node('shutup', anonymous = True)
-     
-     soundhandle = SoundClient()
-     rospy.sleep(0.5) # let ROS get started...
- 
-     print "Sending stopAll commande every 100 ms."
-     print "Note: This will not prevent a node that is continuing to issue commands"
-     print "from producing sound."
-     print "Press Ctrl+C to exit."
- 
-     while not rospy.is_shutdown():
-         soundhandle.stopAll()
-         try:
-             rospy.sleep(.1)
-         except:
-             pass
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/soundclient_example.py audio_common_patched/sound_play/scripts/soundclient_example.py
*** audio_common/sound_play/scripts/soundclient_example.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/soundclient_example.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,91 ****
- #!/usr/bin/env python
- 
- """
- Simple example showing how to use the SoundClient provided by libsoundplay,
- in blocking, non-blocking, and explicit usage.
- """
- 
- import rospy
- from sound_play.libsoundplay import SoundClient
- from sound_play.msg import SoundRequest
- 
- 
- def play_explicit():
-     rospy.loginfo('Example: SoundClient play methods can take in an explicit'
-                   ' blocking parameter')
-     soundhandle = SoundClient()  # blocking = False by default
-     rospy.sleep(0.5)  # Ensure publisher connection is successful.
- 
-     sound_beep = soundhandle.waveSound("say-beep.wav", volume=0.5)
-     # Play the same sound twice, once blocking and once not. The first call is
-     # blocking (explicitly specified).
-     sound_beep.play(blocking=True)
-     # This call is not blocking (uses the SoundClient's setting).
-     sound_beep.play()
-     rospy.sleep(0.5)  # Let sound complete.
- 
-     # Play a blocking sound.
-     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING, blocking=True)
- 
-     # Create a new SoundClient where the default behavior *is* to block.
-     soundhandle = SoundClient(blocking=True)
-     soundhandle.say('Say-ing stuff while block-ing')
-     soundhandle.say('Say-ing stuff without block-ing', blocking=False)
-     rospy.sleep(1)
- 
- 
- def play_blocking():
-     """
-     Play various sounds, blocking until each is completed before going to the
-     next.
-     """
-     rospy.loginfo('Example: Playing sounds in *blocking* mode.')
-     soundhandle = SoundClient(blocking=True)
- 
-     rospy.loginfo('Playing say-beep at full volume.')
-     soundhandle.playWave('say-beep.wav')
- 
-     rospy.loginfo('Playing say-beep at volume 0.3.')
-     soundhandle.playWave('say-beep.wav', volume=0.3)
- 
-     rospy.loginfo('Playing sound for NEEDS_PLUGGING.')
-     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
- 
-     rospy.loginfo('Speaking some long string.')
-     soundhandle.say('It was the best of times, it was the worst of times.')
- 
- 
- def play_nonblocking():
-     """
-     Play the same sounds with manual pauses between them.
-     """
-     rospy.loginfo('Example: Playing sounds in *non-blocking* mode.')
-     # NOTE: you must sleep at the beginning to let the SoundClient publisher
-     # establish a connection to the soundplay_node.
-     soundhandle = SoundClient(blocking=False)
-     rospy.sleep(1)
- 
-     # In the non-blocking version you need to sleep between calls.
-     rospy.loginfo('Playing say-beep at full volume.')
-     soundhandle.playWave('say-beep.wav')
-     rospy.sleep(1)
- 
-     rospy.loginfo('Playing say-beep at volume 0.3.')
-     soundhandle.playWave('say-beep.wav', volume=0.3)
-     rospy.sleep(1)
- 
-     rospy.loginfo('Playing sound for NEEDS_PLUGGING.')
-     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
-     rospy.sleep(1)
- 
-     rospy.loginfo('Speaking some long string.')
-     soundhandle.say('It was the best of times, it was the worst of times.')
-     # Note we will return before the string has finished playing.
- 
- 
- if __name__ == '__main__':
-     rospy.init_node('soundclient_example', anonymous=False)
-     play_explicit()
-     play_blocking()
-     play_nonblocking()
-     rospy.loginfo('Finished')
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/soundplay_node.py audio_common_patched/sound_play/scripts/soundplay_node.py
*** audio_common/sound_play/scripts/soundplay_node.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/soundplay_node.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,468 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- import roslib
- import rospy
- import threading
- import os
- import logging
- import sys
- import traceback
- import tempfile
- from diagnostic_msgs.msg import DiagnosticStatus, KeyValue, DiagnosticArray
- from sound_play.msg import SoundRequest, SoundRequestAction, SoundRequestResult, SoundRequestFeedback
- import actionlib
- 
- try:
-     import gi
-     gi.require_version('Gst', '1.0')
-     from gi.repository import Gst as Gst
- except:
-     str="""
- **************************************************************
- Error opening pygst. Is gstreamer installed?
- **************************************************************
- """
-     rospy.logfatal(str)
-     print str
-     exit(1)
- 
- def sleep(t):
-     try:
-         rospy.sleep(t)
-     except:
-         pass
- 
- 
- class soundtype:
-     STOPPED = 0
-     LOOPING = 1
-     COUNTING = 2
- 
-     def __init__(self, file, device, volume = 1.0):
-         self.lock = threading.RLock()
-         self.state = self.STOPPED
-         self.sound = Gst.ElementFactory.make("playbin",None)
-         if self.sound is None:
-             raise Exception("Could not create sound player")
- 
-         if device:
-             self.sink = Gst.ElementFactory.make("alsasink", "sink")
-             self.sink.set_property("device", device)
-             self.sound.set_property("audio-sink", self.sink)
- 
-         if (":" in file):
-             uri = file
-         elif os.path.isfile(file):
-             uri = "file://" + os.path.abspath(file)
-         else:
-           rospy.logerr('Error: URI is invalid: %s'%file)
- 
-         self.uri = uri
-         self.volume = volume
-         self.sound.set_property('uri', uri)
-         self.sound.set_property("volume",volume)
-         self.staleness = 1
-         self.file = file
- 
-         self.bus = self.sound.get_bus()
-         self.bus.add_signal_watch()
-         self.bus.connect("message", self.on_stream_end)
- 
-     def on_stream_end(self, bus, message):
-         if message.type == Gst.MessageType.EOS:
-             self.state = self.STOPPED
- 
-     def __del__(self):
-         # stop our GST object so that it gets garbage-collected
-         self.stop()
- 
-     def update(self):
-         self.bus.poll(Gst.MessageType.ERROR, 10)
- 
-     def loop(self):
-         self.lock.acquire()
-         try:
-             self.staleness = 0
-             if self.state == self.COUNTING:
-                 self.stop()
- 
-             if self.state == self.STOPPED:
-               self.sound.seek_simple(Gst.Format.TIME, Gst.SeekFlags.FLUSH, 0)
-               self.sound.set_state(Gst.State.PLAYING)
-             self.state = self.LOOPING
-         finally:
-             self.lock.release()
- 
-     def stop(self):
-         if self.state != self.STOPPED:
-             self.lock.acquire()
-             try:
-                 self.sound.set_state(Gst.State.NULL)
-                 self.state = self.STOPPED
-             finally:
-                 self.lock.release()
- 
-     def single(self):
-         self.lock.acquire()
-         try:
-             rospy.logdebug("Playing %s"%self.uri)
-             self.staleness = 0
-             if self.state == self.LOOPING:
-                 self.stop()
- 
-             self.sound.seek_simple(Gst.Format.TIME, Gst.SeekFlags.FLUSH, 0)
-             self.sound.set_state(Gst.State.PLAYING)
-             self.state = self.COUNTING
-         finally:
-             self.lock.release()
- 
-     def command(self, cmd):
-          if cmd == SoundRequest.PLAY_STOP:
-              self.stop()
-          elif cmd == SoundRequest.PLAY_ONCE:
-              self.single()
-          elif cmd == SoundRequest.PLAY_START:
-              self.loop()
- 
-     def get_staleness(self):
-         self.lock.acquire()
-         position = 0
-         duration = 0
-         try:
-             position = self.sound.query_position(Gst.Format.TIME)[0]
-             duration = self.sound.query_duration(Gst.Format.TIME)[0]
-         except Exception, e:
-             position = 0
-             duration = 0
-         finally:
-             self.lock.release()
- 
-         if position != duration:
-             self.staleness = 0
-         else:
-             self.staleness = self.staleness + 1
-         return self.staleness
- 
-     def get_playing(self):
-         return self.state == self.COUNTING
- 
- class soundplay:
-     _feedback = SoundRequestFeedback()
-     _result   = SoundRequestResult()
- 
-     def stopdict(self,dict):
-         for sound in dict.values():
-             sound.stop()
- 
-     def stopall(self):
-         self.stopdict(self.builtinsounds)
-         self.stopdict(self.filesounds)
-         self.stopdict(self.voicesounds)
- 
-     def select_sound(self, data):
-         if data.sound == SoundRequest.PLAY_FILE:
-             if not data.arg2:
-                 if not data.arg in self.filesounds.keys():
-                     rospy.logdebug('command for uncached wave: "%s"'%data.arg)
-                     try:
-                         self.filesounds[data.arg] = soundtype(data.arg, self.device, data.volume)
-                     except:
-                         rospy.logerr('Error setting up to play "%s". Does this file exist on the machine on which sound_play is running?'%data.arg)
-                         return
-                 else:
-                     rospy.logdebug('command for cached wave: "%s"'%data.arg)
-                     if self.filesounds[data.arg].sound.get_property('volume') != data.volume:
-                         rospy.logdebug('volume for cached wave has changed, resetting volume')
-                         self.filesounds[data.arg].sound.set_property('volume', data.volume)
-                 sound = self.filesounds[data.arg]
-             else:
-                 absfilename = os.path.join(roslib.packages.get_pkg_dir(data.arg2), data.arg)
-                 if not absfilename in self.filesounds.keys():
-                     rospy.logdebug('command for uncached wave: "%s"'%absfilename)
-                     try:
-                         self.filesounds[absfilename] = soundtype(absfilename, self.device, data.volume)
-                     except:
-                         rospy.logerr('Error setting up to play "%s" from package "%s". Does this file exist on the machine on which sound_play is running?'%(data.arg, data.arg2))
-                         return
-                 else:
-                     rospy.logdebug('command for cached wave: "%s"'%absfilename)
-                     if self.filesounds[absfilename].sound.get_property('volume') != data.volume:
-                         rospy.logdebug('volume for cached wave has changed, resetting volume')
-                         self.filesounds[absfilename].sound.set_property('volume', data.volume)
-                 sound = self.filesounds[absfilename]
-         elif data.sound == SoundRequest.SAY:
-             print data
-             if not data.arg in self.voicesounds.keys():
-                 rospy.logdebug('command for uncached text: "%s"' % data.arg)
-                 txtfile = tempfile.NamedTemporaryFile(prefix='sound_play', suffix='.txt')
-                 (wavfile,wavfilename) = tempfile.mkstemp(prefix='sound_play', suffix='.wav')
-                 txtfilename=txtfile.name
-                 os.close(wavfile)
-                 voice = data.arg2
-                 try:
-                     txtfile.write(data.arg.decode('UTF-8').encode('ISO-8859-15'))
-                     txtfile.flush()
-                     os.system("text2wave -eval '("+voice+")' "+txtfilename+" -o "+wavfilename)
-                     try:
-                         if os.stat(wavfilename).st_size == 0:
-                             raise OSError # So we hit the same catch block
-                     except OSError:
-                         rospy.logerr('Sound synthesis failed. Is festival installed? Is a festival voice installed? Try running "rosdep satisfy sound_play|sh". Refer to http://wiki.ros.org/sound_play/Troubleshooting')
-                         return
-                     self.voicesounds[data.arg] = soundtype(wavfilename, self.device, data.volume)
-                 finally:
-                     txtfile.close()
-             else:
-                 rospy.logdebug('command for cached text: "%s"'%data.arg)
-                 if self.voicesounds[data.arg].sound.get_property('volume') != data.volume:
-                     rospy.logdebug('volume for cached text has changed, resetting volume')
-                     self.voicesounds[data.arg].sound.set_property('volume', data.volume)
-             sound = self.voicesounds[data.arg]
-         else:
-             rospy.logdebug('command for builtin wave: %i'%data.sound)
-             if data.sound not in self.builtinsounds or (data.sound in self.builtinsounds and data.volume != self.builtinsounds[data.sound].volume):
-                 params = self.builtinsoundparams[data.sound]
-                 volume = data.volume
-                 if params[1] != 1: # use the second param as a scaling for the input volume
-                     volume = (volume + params[1])/2
-                 self.builtinsounds[data.sound] = soundtype(params[0], self.device, volume)
-             sound = self.builtinsounds[data.sound]
-         if sound.staleness != 0 and data.command != SoundRequest.PLAY_STOP:
-             # This sound isn't counted in active_sounds
-             rospy.logdebug("activating %i %s"%(data.sound,data.arg))
-             self.active_sounds = self.active_sounds + 1
-             sound.staleness = 0
-             #                    if self.active_sounds > self.num_channels:
-             #                        mixer.set_num_channels(self.active_sounds)
-             #                        self.num_channels = self.active_sounds
-         return sound
- 
-     def callback(self,data):
-         if not self.initialized:
-             return
-         self.mutex.acquire()
-         # Force only one sound at a time
-         self.stopall()
-         try:
-             if data.sound == SoundRequest.ALL and data.command == SoundRequest.PLAY_STOP:
-                 self.stopall()
-             else:
-                 sound = self.select_sound(data)
-                 sound.command(data.command)
-         except Exception, e:
-             rospy.logerr('Exception in callback: %s'%str(e))
-             rospy.loginfo(traceback.format_exc())
-         finally:
-             self.mutex.release()
-             rospy.logdebug("done callback")
- 
-     # Purge sounds that haven't been played in a while.
-     def cleanupdict(self, dict):
-         purgelist = []
-         for (key,sound) in dict.iteritems():
-             try:
-                 staleness = sound.get_staleness()
-             except Exception, e:
-                 rospy.logerr('Exception in cleanupdict for sound (%s): %s'%(str(key),str(e)))
-                 staleness = 100 # Something is wrong. Let's purge and try again.
-             #print "%s %i"%(key, staleness)
-             if staleness >= 10:
-                 purgelist.append(key)
-             if staleness == 0: # Sound is playing
-                 self.active_sounds = self.active_sounds + 1
-         for key in purgelist:
-            rospy.logdebug('Purging %s from cache'%key)
-            dict[key].stop() # clean up resources
-            del dict[key]
- 
-     def cleanup(self):
-         self.mutex.acquire()
-         try:
-             self.active_sounds = 0
-             self.cleanupdict(self.filesounds)
-             self.cleanupdict(self.voicesounds)
-             self.cleanupdict(self.builtinsounds)
-         except:
-             rospy.loginfo('Exception in cleanup: %s'%sys.exc_info()[0])
-         finally:
-             self.mutex.release()
- 
-     def diagnostics(self, state):
-         try:
-             da = DiagnosticArray()
-             ds = DiagnosticStatus()
-             ds.name = rospy.get_caller_id().lstrip('/') + ": Node State"
-             if state == 0:
-                 ds.level = DiagnosticStatus.OK
-                 ds.message = "%i sounds playing"%self.active_sounds
-                 ds.values.append(KeyValue("Active sounds", str(self.active_sounds)))
-                 ds.values.append(KeyValue("Allocated sound channels", str(self.num_channels)))
-                 ds.values.append(KeyValue("Buffered builtin sounds", str(len(self.builtinsounds))))
-                 ds.values.append(KeyValue("Buffered wave sounds", str(len(self.filesounds))))
-                 ds.values.append(KeyValue("Buffered voice sounds", str(len(self.voicesounds))))
-             elif state == 1:
-                 ds.level = DiagnosticStatus.WARN
-                 ds.message = "Sound device not open yet."
-             else:
-                 ds.level = DiagnosticStatus.ERROR
-                 ds.message = "Can't open sound device. See http://wiki.ros.org/sound_play/Troubleshooting"
-             da.status.append(ds)
-             da.header.stamp = rospy.get_rostime()
-             self.diagnostic_pub.publish(da)
-         except Exception, e:
-             rospy.loginfo('Exception in diagnostics: %s'%str(e))
- 
-     def execute_cb(self, data):
-         data = data.sound_request
-         if not self.initialized:
-             return
-         self.mutex.acquire()
-         # Force only one sound at a time
-         self.stopall()
-         try:
-             if data.sound == SoundRequest.ALL and data.command == SoundRequest.PLAY_STOP:
-                 self.stopall()
-             else:
-                 sound = self.select_sound(data)
-                 sound.command(data.command)
- 
-                 r = rospy.Rate(1)
-                 start_time = rospy.get_rostime()
-                 success = True
-                 while sound.get_playing():
-                     sound.update()
-                     if self._as.is_preempt_requested():
-                         rospy.loginfo('sound_play action: Preempted')
-                         sound.stop()
-                         self._as.set_preempted()
-                         success = False
-                         break
- 
-                     self._feedback.playing = sound.get_playing()
-                     self._feedback.stamp = rospy.get_rostime() - start_time
-                     self._as.publish_feedback(self._feedback)
-                     r.sleep()
- 
-                 if success:
-                     self._result.playing = self._feedback.playing
-                     self._result.stamp = self._feedback.stamp
-                     rospy.loginfo('sound_play action: Succeeded')
-                     self._as.set_succeeded(self._result)
- 
-         except Exception, e:
-             rospy.logerr('Exception in actionlib callback: %s'%str(e))
-             rospy.loginfo(traceback.format_exc())
-         finally:
-             self.mutex.release()
-             rospy.logdebug("done actionlib callback")
- 
-     def __init__(self):
-         Gst.init(None)
-         rospy.init_node('sound_play')
-         self.device = rospy.get_param("~device", str())
-         self.diagnostic_pub = rospy.Publisher("/diagnostics", DiagnosticArray, queue_size=1)
-         rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
- 
-         self.builtinsoundparams = {
-                 SoundRequest.BACKINGUP              : (os.path.join(rootdir, 'BACKINGUP.ogg'), 0.1),
-                 SoundRequest.NEEDS_UNPLUGGING       : (os.path.join(rootdir, 'NEEDS_UNPLUGGING.ogg'), 1),
-                 SoundRequest.NEEDS_PLUGGING         : (os.path.join(rootdir, 'NEEDS_PLUGGING.ogg'), 1),
-                 SoundRequest.NEEDS_UNPLUGGING_BADLY : (os.path.join(rootdir, 'NEEDS_UNPLUGGING_BADLY.ogg'), 1),
-                 SoundRequest.NEEDS_PLUGGING_BADLY   : (os.path.join(rootdir, 'NEEDS_PLUGGING_BADLY.ogg'), 1),
-                 }
- 
-         self.no_error = True
-         self.initialized = False
-         self.active_sounds = 0
- 
-         self.mutex = threading.Lock()
-         sub = rospy.Subscriber("robotsound", SoundRequest, self.callback)
-         self._as = actionlib.SimpleActionServer('sound_play', SoundRequestAction, execute_cb=self.execute_cb, auto_start = False)
-         self._as.start()
- 
-         self.mutex.acquire()
-         self.sleep(0.5) # For ros startup race condition
-         self.diagnostics(1)
- 
-         while not rospy.is_shutdown():
-             while not rospy.is_shutdown():
-                 self.init_vars()
-                 self.no_error = True
-                 self.initialized = True
-                 self.mutex.release()
-                 try:
-                     self.idle_loop()
-                     # Returns after inactive period to test device availability
-                     #print "Exiting idle"
-                 except:
-                     rospy.loginfo('Exception in idle_loop: %s'%sys.exc_info()[0])
-                 finally:
-                     self.mutex.acquire()
- 
-             self.diagnostics(2)
-         self.mutex.release()
- 
-     def init_vars(self):
-         self.num_channels = 10
-         self.builtinsounds = {}
-         self.filesounds = {}
-         self.voicesounds = {}
-         self.hotlist = []
-         if not self.initialized:
-             rospy.loginfo('sound_play node is ready to play sound')
- 
-     def sleep(self, duration):
-         try:
-             rospy.sleep(duration)
-         except rospy.exceptions.ROSInterruptException:
-             pass
- 
-     def idle_loop(self):
-         self.last_activity_time = rospy.get_time()
-         while (rospy.get_time() - self.last_activity_time < 10 or
-                  len(self.builtinsounds) + len(self.voicesounds) + len(self.filesounds) > 0) \
-                 and not rospy.is_shutdown():
-             #print "idle_loop"
-             self.diagnostics(0)
-             self.sleep(1)
-             self.cleanup()
-         #print "idle_exiting"
- 
- if __name__ == '__main__':
-     soundplay()
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/test/test_sound_client.py audio_common_patched/sound_play/scripts/test/test_sound_client.py
*** audio_common/sound_play/scripts/test/test_sound_client.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/test/test_sound_client.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,17 ****
- #!/usr/bin/env python
- 
- import unittest
- 
- import rospy
- import rostest
- from sound_play.libsoundplay import SoundClient
- 
- class TestCase(unittest.TestCase):
-     def test_soundclient_constructor(self):
-         s = SoundClient()
-         self.assertIsNotNone(s)
- 
- if __name__ == '__main__':
-     rostest.rosrun('sound_play', 'test_sound_client', TestCase)
- 
- __author__ = 'Felix Duvallet'
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/test_actionlib_client.py audio_common_patched/sound_play/scripts/test_actionlib_client.py
*** audio_common/sound_play/scripts/test_actionlib_client.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/test_actionlib_client.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,64 ****
- #! /usr/bin/env python
- 
- import roslib; roslib.load_manifest('sound_play')
- import rospy
- import actionlib
- from sound_play.msg import SoundRequest, SoundRequestAction, SoundRequestGoal
- 
- import os
- 
- def sound_play_client(volume=1.0):
-     client = actionlib.SimpleActionClient('sound_play', SoundRequestAction)
- 
-     client.wait_for_server()
- 
-     print "Need Unplugging"
-     goal = SoundRequestGoal()
-     goal.sound_request.sound = SoundRequest.NEEDS_UNPLUGGING
-     goal.sound_request.command = SoundRequest.PLAY_ONCE
-     goal.sound_request.volume = volume
- 
-     client.send_goal(goal)
-     client.wait_for_result()
-     print client.get_result()
-     print "End Need Unplugging"
-     print
- 
-     print "Need Plugging"
-     goal = SoundRequestGoal()
-     goal.sound_request.sound = SoundRequest.NEEDS_PLUGGING
-     goal.sound_request.command = SoundRequest.PLAY_ONCE
-     goal.sound_request.volume = volume
-     client.send_goal(goal)
-     client.wait_for_result()
-     print client.get_result()
-     print "End Need Plugging"
-     print
- 
-     print "Say"
-     goal = SoundRequestGoal()
-     goal.sound_request.sound = SoundRequest.SAY
-     goal.sound_request.command = SoundRequest.PLAY_ONCE
-     goal.sound_request.arg = "Testing the actionlib interface A P I"
-     goal.sound_request.volume = volume
-     client.send_goal(goal)
-     client.wait_for_result()
-     print client.get_result()
-     print "End Say"
-     print
- 
-     print "Wav"
-     goal = SoundRequestGoal()
-     goal.sound_request.sound = SoundRequest.PLAY_FILE
-     goal.sound_request.command = SoundRequest.PLAY_ONCE
-     goal.sound_request.arg = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds') + "/say-beep.wav"
-     goal.sound_request.volume = volume
-     client.send_goal(goal)
-     client.wait_for_result()
-     print client.get_result()
-     print "End wav"
-     print
- 
- if __name__ == '__main__':
-     rospy.init_node('soundplay_client_test')
-     sound_play_client()
--- 0 ----
diff -crB --new-file audio_common/sound_play/scripts/test.py audio_common_patched/sound_play/scripts/test.py
*** audio_common/sound_play/scripts/test.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/scripts/test.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,129 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- import rospy, os, sys
- from sound_play.msg import SoundRequest
- 
- from sound_play.libsoundplay import SoundClient
- 
- def sleep(t):
-     try:
-         rospy.sleep(t)
-     except:
-         pass
- 
- if __name__ == '__main__':
-     rospy.init_node('soundplay_test', anonymous = True)
-     soundhandle = SoundClient()
- 
-     rospy.sleep(1)
-     
-     soundhandle.stopAll()
- 
-     print "This script will run continuously until you hit CTRL+C, testing various sound_node sound types."
- 
-     print
-     #print 'Try to play wave files that do not exist.'
-     #soundhandle.playWave('17')
-     #soundhandle.playWave('dummy')
-         
-     # print 'say'
-     # soundhandle.say('Hello world!')
-     # sleep(3)
-        
-     print 'wave'
-     soundhandle.playWave('say-beep.wav')
-     sleep(2)
-     
-     print 'quiet wave'
-     soundhandle.playWave('say-beep.wav', 0.3)
-     sleep(2)
-         
-     print 'plugging'
-     soundhandle.play(SoundRequest.NEEDS_PLUGGING)
-     sleep(2)
- 
-     print 'quiet plugging'
-     soundhandle.play(SoundRequest.NEEDS_PLUGGING, 0.3)
-     sleep(2)
- 
-     print 'unplugging'
-     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING)
-     sleep(2)
- 
-     print 'plugging badly'
-     soundhandle.play(SoundRequest.NEEDS_PLUGGING_BADLY)
-     sleep(2)
- 
-     print 'unplugging badly'
-     soundhandle.play(SoundRequest.NEEDS_UNPLUGGING_BADLY)
-     sleep(2)
- 
-     s1 = soundhandle.builtinSound(SoundRequest.NEEDS_UNPLUGGING_BADLY)
-     s2 = soundhandle.waveSound("say-beep.wav")
-     s3 = soundhandle.voiceSound("Testing the new A P I")
-     s4 = soundhandle.builtinSound(SoundRequest.NEEDS_UNPLUGGING_BADLY, 0.3)
-     s5 = soundhandle.waveSound("say-beep.wav", 0.3)
-     s6 = soundhandle.voiceSound("Testing the new A P I", 0.3)
- 
-     print "New API start voice"
-     s3.repeat()
-     sleep(3)
- 
-     print "New API start voice quiet"
-     s6.play()
-     sleep(3)
-     
-     print "New API wave"
-     s2.repeat()
-     sleep(2)
- 
-     print "New API wave quiet"
-     s5.play()
-     sleep(2)
- 
-     print "New API builtin"
-     s1.play()
-     sleep(2)
- 
-     print "New API builtin quiet"
-     s4.play()
-     sleep(2)
- 
-     print "New API stop"
-     s3.stop()
--- 0 ----
diff -crB --new-file audio_common/sound_play/setup.py audio_common_patched/sound_play/setup.py
*** audio_common/sound_play/setup.py	2018-08-23 14:09:50.428913585 +0200
--- audio_common_patched/sound_play/setup.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,11 ****
- #!/usr/bin/env python
- 
- from distutils.core import setup
- from catkin_pkg.python_setup import generate_distutils_setup
- 
- d = generate_distutils_setup(
-       packages=['sound_play'],
-       package_dir={'': 'src'}
-       )
- 
- setup(**d)
--- 0 ----
diff -crB --new-file audio_common/sound_play/soundplay_node.launch audio_common_patched/sound_play/soundplay_node.launch
*** audio_common/sound_play/soundplay_node.launch	2018-08-23 14:09:50.432913483 +0200
--- audio_common_patched/sound_play/soundplay_node.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,11 ****
- <!-- 
- This launch file starts soundplay_node.py, which is the node that plays
- sounds based on messages on the robotsound topic.  
- -->
- 
- <launch>
-   <arg name="device" default="" />
-   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py">
-     <param name="device" value="$(arg device)" />
-   </node>
- </launch>
--- 0 ----
Binary files audio_common/sound_play/sounds/BACKINGUP.ogg and audio_common_patched/sound_play/sounds/BACKINGUP.ogg differ
Binary files audio_common/sound_play/sounds/NEEDS_PLUGGING_BADLY.ogg and audio_common_patched/sound_play/sounds/NEEDS_PLUGGING_BADLY.ogg differ
Binary files audio_common/sound_play/sounds/NEEDS_PLUGGING.ogg and audio_common_patched/sound_play/sounds/NEEDS_PLUGGING.ogg differ
Binary files audio_common/sound_play/sounds/NEEDS_UNPLUGGING_BADLY.ogg and audio_common_patched/sound_play/sounds/NEEDS_UNPLUGGING_BADLY.ogg differ
Binary files audio_common/sound_play/sounds/NEEDS_UNPLUGGING.ogg and audio_common_patched/sound_play/sounds/NEEDS_UNPLUGGING.ogg differ
Binary files audio_common/sound_play/sounds/say-beep.wav and audio_common_patched/sound_play/sounds/say-beep.wav differ
diff -crB --new-file audio_common/sound_play/src/sound_play/__init__.py audio_common_patched/sound_play/src/sound_play/__init__.py
*** audio_common/sound_play/src/sound_play/__init__.py	2018-08-23 14:09:50.436913380 +0200
--- audio_common_patched/sound_play/src/sound_play/__init__.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,33 ****
- # Software License Agreement (BSD License)
- #
- # Copyright (c) 2013, Willow Garage, Inc.
- # All rights reserved.
- #
- # Redistribution and use in source and binary forms, with or without
- # modification, are permitted provided that the following conditions
- # are met:
- #
- #  * Redistributions of source code must retain the above copyright
- #    notice, this list of conditions and the following disclaimer.
- #  * Redistributions in binary form must reproduce the above
- #    copyright notice, this list of conditions and the following
- #    disclaimer in the documentation and/or other materials provided
- #    with the distribution.
- #  * Neither the name of Willow Garage, Inc. nor the names of its
- #    contributors may be used to endorse or promote products derived
- #    from this software without specific prior written permission.
- #
- # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- # FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- # COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- # INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- # BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- # ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- # POSSIBILITY OF SUCH DAMAGE.
- 
- import libsoundplay as libsoundplay
--- 0 ----
diff -crB --new-file audio_common/sound_play/src/sound_play/libsoundplay.py audio_common_patched/sound_play/src/sound_play/libsoundplay.py
*** audio_common/sound_play/src/sound_play/libsoundplay.py	2018-08-23 14:09:50.436913380 +0200
--- audio_common_patched/sound_play/src/sound_play/libsoundplay.py	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,346 ****
- #!/usr/bin/env python
- 
- #***********************************************************
- #* Software License Agreement (BSD License)
- #*
- #*  Copyright (c) 2009, Willow Garage, Inc.
- #*  All rights reserved.
- #*
- #*  Redistribution and use in source and binary forms, with or without
- #*  modification, are permitted provided that the following conditions
- #*  are met:
- #*
- #*   * Redistributions of source code must retain the above copyright
- #*     notice, this list of conditions and the following disclaimer.
- #*   * Redistributions in binary form must reproduce the above
- #*     copyright notice, this list of conditions and the following
- #*     disclaimer in the documentation and/or other materials provided
- #*     with the distribution.
- #*   * Neither the name of the Willow Garage nor the names of its
- #*     contributors may be used to endorse or promote products derived
- #*     from this software without specific prior written permission.
- #*
- #*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- #*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- #*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- #*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- #*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- #*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- #*  POSSIBILITY OF SUCH DAMAGE.
- #***********************************************************
- 
- # Author: Blaise Gassend
- 
- import rospy
- import roslib
- import actionlib
- import os, sys
- from sound_play.msg import SoundRequest
- from sound_play.msg import SoundRequestGoal
- from sound_play.msg import SoundRequestAction
- 
- ## \brief Class that publishes messages to the sound_play node.
- ##
- ## This class is a helper class for communicating with the sound_play node
- ## via the \ref sound_play.SoundRequest message. It has two ways of being used:
- ##
- ## - It can create Sound classes that represent a particular sound which
- ##   can be played, repeated or stopped.
- ##
- ## - It provides methods for each way in which the sound_play.SoundRequest
- ##   message can be invoked.
- 
- class Sound(object):
-     def __init__(self, client, snd, arg, volume=1.0):
-         self.client = client
-         self.snd = snd
-         self.arg = arg
-         self.vol = volume
- 
- ## \brief Play the Sound.
- ##
- ## This method causes the Sound to be played once.
- 
-     def play(self, **kwargs):
-         self.client.sendMsg(self.snd, SoundRequest.PLAY_ONCE, self.arg,
-                             vol=self.vol, **kwargs)
- 
- ## \brief Play the Sound repeatedly.
- ##
- ## This method causes the Sound to be played repeatedly until stop() is
- ## called.
- 
-     def repeat(self, **kwargs):
-        self.client.sendMsg(self.snd, SoundRequest.PLAY_START, self.arg,
-                            vol=self.vol, **kwargs)
- 
- ## \brief Stop Sound playback.
- ##
- ## This method causes the Sound to stop playing.
- 
-     def stop(self):
-         self.client.sendMsg(self.snd, SoundRequest.PLAY_STOP, self.arg)
- 
- ## This class is a helper class for communicating with the sound_play node
- ## via the \ref sound_play.SoundRequest message. There is a one-to-one mapping
- ## between methods and invocations of the \ref sound_play.SoundRequest message.
- 
- class SoundClient(object):
- 
-     def __init__(self, blocking=False):
-         """
- 
-         The SoundClient can send SoundRequests in two modes: non-blocking mode
-         (by publishing a message to the soundplay_node directly) which will
-         return as soon as the sound request has been sent, or blocking mode (by
-         using the actionlib interface) which will wait until the sound has
-         finished playing completely.
- 
-         The blocking parameter here is the standard behavior, but can be
-         over-ridden.  Each say/play/start/repeat method can take in an optional
-         `blocking=True|False` argument that will over-ride the class-wide
-         behavior. See soundclient_example.py for an example of this behavior.
- 
-         :param blocking: Used as the default behavior unless over-ridden,
-         (default = false)
-         """
- 
-         self._blocking = blocking
- 
-         # NOTE: only one of these will be used at once, but we need to create
-         # both the publisher and actionlib client here.
-         self.actionclient = actionlib.SimpleActionClient(
-             'sound_play', SoundRequestAction)
-         self.pub = rospy.Publisher('robotsound', SoundRequest, queue_size=5)
- 
- ## \brief Create a voice Sound.
- ##
- ## Creates a Sound corresponding to saying the indicated text.
- ##
- ## \param s Text to say
- 
-     def voiceSound(self, s, volume=1.0):
-         return Sound(self, SoundRequest.SAY, s, volume=volume)
- 
- ## \brief Create a wave Sound.
- ##
- ## Creates a Sound corresponding to indicated file.
- ##
- ## \param s File to play. Should be an absolute path that exists on the
- ## machine running the sound_play node.
-     def waveSound(self, sound, volume=1.0):
-         if sound[0] != "/":
-           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
-           sound = rootdir + "/" + sound
-         return Sound(self, SoundRequest.PLAY_FILE, sound, volume=volume)
- 
- ## \brief Create a builtin Sound.
- ##
- ## Creates a Sound corresponding to indicated builtin wave.
- ##
- ## \param id Identifier of the sound to play.
- 
-     def builtinSound(self, id, volume=1.0):
-         return Sound(self, id, "", volume)
- 
- ## \brief Say a string
- ##
- ## Send a string to be said by the sound_node. The vocalization can be
- ## stopped using stopSaying or stopAll.
- ##
- ## \param text String to say
- 
-     def say(self,text, voice='', volume=1.0, **kwargs):
-         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_ONCE, text, voice,
-                      volume, **kwargs)
- 
- ## \brief Say a string repeatedly
- ##
- ## The string is said repeatedly until stopSaying or stopAll is used.
- ##
- ## \param text String to say repeatedly
- 
-     def repeat(self,text, volume=1.0, **kwargs):
-         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_START, text,
-                      vol=volume, **kwargs)
- 
- ## \brief Stop saying a string
- ##
- ## Stops saying a string that was previously started by say or repeat. The
- ## argument indicates which string to stop saying.
- ##
- ## \param text Same string as in the say or repeat command
- 
-     def stopSaying(self,text):
-         self.sendMsg(SoundRequest.SAY, SoundRequest.PLAY_STOP, text)
- 
- ## \brief Plays a WAV or OGG file
- ##
- ## Plays a WAV or OGG file once. The playback can be stopped by stopWave or
- ## stopAll.
- ##
- ## \param sound Filename of the WAV or OGG file. Must be an absolute path valid
- ## on the computer on which the sound_play node is running
- 
-     def playWave(self, sound, volume=1.0, **kwargs):
-         if sound[0] != "/":
-           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
-           sound = rootdir + "/" + sound
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_ONCE, sound,
-                      vol=volume, **kwargs)
- 
- ## \brief Plays a WAV or OGG file repeatedly
- ##
- ## Plays a WAV or OGG file repeatedly until stopWave or stopAll is used.
- ##
- ## \param sound Filename of the WAV or OGG file. Must be an absolute path valid
- ## on the computer on which the sound_play node is running.
- 
-     def startWave(self, sound, volume=1.0, **kwargs):
-         if sound[0] != "/":
-           rootdir = os.path.join(roslib.packages.get_pkg_dir('sound_play'),'sounds')
-           sound = rootdir + "/" + sound
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_START, sound,
-                      vol=volume, **kwargs)
- 
- ##  \brief Stop playing a WAV or OGG file
- ##
- ## Stops playing a file that was previously started by playWave or
- ## startWave.
- ##
- ## \param sound Same string as in the playWave or startWave command
- 
-     def stopWave(self,sound):
-         if sound[0] != "/":
-           rootdir = os.path.join(roslib.package.get_pkg_dir('sound_play'),'sounds')
-           sound = rootdir + "/" + sound
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_STOP, sound)
- 
- ## \brief Plays a WAV or OGG file
- ##
- ## Plays a WAV or OGG file once. The playback can be stopped by stopWaveFromPkg or
- ## stopAll.
- ##
- ## \param package Package name containing the sound file.
- ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
- ## on the computer on which the sound_play node is running
- 
-     def playWaveFromPkg(self, package, sound, volume=1.0, **kwargs):
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_ONCE, sound, package,
-                      volume, **kwargs)
- 
- ## \brief Plays a WAV or OGG file repeatedly
- ##
- ## Plays a WAV or OGG file repeatedly until stopWaveFromPkg or stopAll is used.
- ##
- ## \param package Package name containing the sound file.
- ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
- ## on the computer on which the sound_play node is running
- 
-     def startWaveFromPkg(self, package, sound, volume=1.0, **kwargs):
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_START, sound,
-                      package, volume, **kwargs)
- 
- ##  \brief Stop playing a WAV or OGG file
- ##
- ## Stops playing a file that was previously started by playWaveFromPkg or
- ## startWaveFromPkg.
- ##
- ## \param package Package name containing the sound file.
- ## \param sound Filename of the WAV or OGG file. Must be an path relative to the package valid
- ## on the computer on which the sound_play node is running
- 
-     def stopWaveFromPkg(self,sound, package):
-         self.sendMsg(SoundRequest.PLAY_FILE, SoundRequest.PLAY_STOP, sound, package)
- 
- ## \brief Play a buildin sound
- ##
- ## Starts playing one of the built-in sounds. built-ing sounds are documented
- ## in \ref SoundRequest.msg. Playback can be stopped by stopall.
- ##
- ## \param sound Identifier of the sound to play.
- 
-     def play(self,sound, volume=1.0, **kwargs):
-         self.sendMsg(sound, SoundRequest.PLAY_ONCE, "", vol=volume, **kwargs)
- 
- ## \brief Play a buildin sound repeatedly
- ##
- ## Starts playing one of the built-in sounds repeatedly until stop or
- ## stopall is used. Built-in sounds are documented in \ref SoundRequest.msg.
- ##
- ## \param sound Identifier of the sound to play.
- 
-     def start(self,sound, volume=1.0, **kwargs):
-         self.sendMsg(sound, SoundRequest.PLAY_START, "", vol=volume, **kwargs)
- 
- ## \brief Stop playing a built-in sound
- ##
- ## Stops playing a built-in sound started with play or start.
- ##
- ## \param sound Same sound that was used to start playback
- 
-     def stop(self,sound):
-         self.sendMsg(sound, SoundRequest.PLAY_STOP, "")
- 
- ## \brief Stop all currently playing sounds
- ##
- ## This method stops all speech, wave file, and built-in sound playback.
- 
-     def stopAll(self):
-         self.stop(SoundRequest.ALL)
- 
-     def sendMsg(self, snd, cmd, s, arg2="", vol=1.0, **kwargs):
-         """
-         Internal method that publishes the sound request, either directly as a
-         SoundRequest to the soundplay_node or through the actionlib interface
-         (which blocks until the sound has finished playing).
- 
-         The blocking behavior is nominally the class-wide setting unless it has
-         been explicitly specified in the play call.
-         """
- 
-         # Use the passed-in argument if it exists, otherwise fall back to the
-         # class-wide setting.
-         blocking = kwargs.get('blocking', self._blocking)
- 
-         msg = SoundRequest()
-         msg.sound = snd
-         # Threshold volume between 0 and 1.
-         msg.volume = max(0, min(1, vol))
-         msg.command = cmd
-         msg.arg = s
-         msg.arg2 = arg2
- 
-         rospy.logdebug('Sending sound request with volume = {}'
-                        ' and blocking = {}'.format(msg.volume, blocking))
- 
-         # Defensive check for the existence of the correct communicator.
-         if not blocking and not self.pub:
-             rospy.logerr('Publisher for SoundRequest must exist')
-             return
-         if blocking and not self.actionclient:
-             rospy.logerr('Action client for SoundRequest does not exist.')
-             return
- 
-         if not blocking:  # Publish message directly and return immediately
-             self.pub.publish(msg)
-             if self.pub.get_num_connections() < 1:
-                 rospy.logwarn("Sound command issued, but no node is subscribed"
-                               " to the topic. Perhaps you forgot to run"
-                               " soundplay_node.py?")
-         else:  # Block until result comes back.
-             assert self.actionclient, 'Actionclient must exist'
-             rospy.logdebug('Sending action client sound request [blocking]')
-             self.actionclient.wait_for_server()
-             goal = SoundRequestGoal()
-             goal.sound_request = msg
-             self.actionclient.send_goal(goal)
-             self.actionclient.wait_for_result()
-             rospy.logdebug('sound request response received')
- 
-         return
--- 0 ----
diff -crB --new-file audio_common/sound_play/test/CMakeLists.txt audio_common_patched/sound_play/test/CMakeLists.txt
*** audio_common/sound_play/test/CMakeLists.txt	2018-08-23 14:09:50.436913380 +0200
--- audio_common_patched/sound_play/test/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,4 ****
- add_executable(test_sound_play test.cpp)
- target_link_libraries(test_sound_play ${catkin_LIBRARIES})
- add_dependencies(test_sound_play sound_play_gencpp)
- set_target_properties(test_sound_play PROPERTIES OUTPUT_NAME test)
--- 0 ----
diff -crB --new-file audio_common/sound_play/test/test.cpp audio_common_patched/sound_play/test/test.cpp
*** audio_common/sound_play/test/test.cpp	2018-08-23 14:09:50.436913380 +0200
--- audio_common_patched/sound_play/test/test.cpp	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,147 ****
- /*********************************************************************
- * Software License Agreement (BSD License)
- *
- *  Copyright (c) 2009, Willow Garage, Inc.
- *  All rights reserved.
- *
- *  Redistribution and use in source and binary forms, with or without
- *  modification, are permitted provided that the following conditions
- *  are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above
- *     copyright notice, this list of conditions and the following
- *     disclaimer in the documentation and/or other materials provided
- *     with the distribution.
- *   * Neither the name of the Willow Garage nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
- *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
- *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- *  POSSIBILITY OF SUCH DAMAGE.
- *********************************************************************/
- 
- #include <sound_play/sound_play.h>
- #include <unistd.h>
- 
- void sleepok(int t, ros::NodeHandle &nh)
- {
-   if (nh.ok())
-       sleep(t);
- }
- 
- int main(int argc, char **argv)
- {
-   ros::init(argc, argv, "sound_play_test");
- 
-   ros::NodeHandle nh;
-   sound_play::SoundClient sc;
-   sound_play::SoundClient quiet_sc;
- 
-   sleepok(1, nh);
-   
-   while(nh.ok())
-   {
-     sc.say("Hello world!");
-     sleepok(2, nh);
-     quiet_sc.say("Hello world!");
-     sleepok(2, nh);
- 
-     const char *str1 = "I am annoying.";
-     sc.repeat(str1);
-     sleepok(4, nh);
-     sc.stopSaying(str1);
-     quiet_sc.repeat(str1);
-     sleepok(4, nh);
-     quiet_sc.stopSaying(str1);
- 
-     sc.playWave("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
-     sleepok(2, nh);
-     quiet_sc.playWave("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
-     sleepok(2, nh);
- 
-     const char *str2 = "/usr/share/xemacs21/xemacs-packages/etc/sounds/piano-beep.wav";
-     sc.startWave(str2);
-     sleepok(4, nh);
-     sc.stopWave(str2);
-     quiet_sc.startWave(str2);
-     sleepok(4, nh);
-     quiet_sc.stopWave(str2);
- 
-     sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
-     sleepok(2, nh);
-     quiet_sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
-     sleepok(2, nh);
- 
-     sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
-     sleepok(2, nh);
-     quiet_sc.play(sound_play::SoundRequest::NEEDS_UNPLUGGING);
-     sleepok(2, nh);
- 
-     sc.start(sound_play::SoundRequest::BACKINGUP);
-     sleepok(4, nh);
-     sc.stop(sound_play::SoundRequest::BACKINGUP);
-     quiet_sc.start(sound_play::SoundRequest::BACKINGUP);
-     sleepok(4, nh);
-     quiet_sc.stop(sound_play::SoundRequest::BACKINGUP);
- 
-     sleepok(2, nh);
-     sound_play::Sound s1 = sc.waveSound("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
-     s1.repeat();
-     sleepok(1, nh);
-     s1.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s2 = quiet_sc.waveSound("/usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav");
-     s2.repeat();
-     sleepok(1, nh);
-     s2.stop();
- 		
-     sleepok(2, nh);
-     sound_play::Sound s3 = sc.voiceSound("This is a really long sentence that will get cut off.");
-     s3.play();
-     sleepok(1, nh);
-     s3.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s4 = quiet_sc.voiceSound("This is a really long sentence that will get cut off.");
-     s4.play();
-     sleepok(1, nh);
-     s4.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s5 = sc.builtinSound(sound_play::SoundRequest::NEEDS_UNPLUGGING_BADLY);
-     s5.play();
-     sleepok(1, nh);
-     s5.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s6 = quiet_sc.builtinSound(sound_play::SoundRequest::NEEDS_UNPLUGGING_BADLY);
-     s6.play();
-     sleepok(1, nh);
-     s6.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s7 = sc.waveSoundFromPkg("sound_play", "sounds/BACKINGUP.ogg");
-     s7.play();
-     sleepok(1, nh);
-     s7.stop();
- 
-     sleepok(2, nh);
-     sound_play::Sound s8 = quiet_sc.waveSoundFromPkg("sound_play", "sounds/BACKINGUP.ogg");
-     s8.play();
-     sleepok(1, nh);
-     s8.stop();
-   }
- }
--- 0 ----
diff -crB --new-file audio_common/sound_play/test.launch audio_common_patched/sound_play/test.launch
*** audio_common/sound_play/test.launch	2018-08-23 14:09:50.436913380 +0200
--- audio_common_patched/sound_play/test.launch	1970-01-01 01:00:00.000000000 +0100
***************
*** 1,9 ****
- <!-- 
- This launch file runs the sound_play node and a test script that excersises
- most of its functionality.
- -->
- 
- <launch>
-   <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py"/>
-   <node name="sound_test" pkg="sound_play" type="test.py"/>
- </launch>
--- 0 ----
